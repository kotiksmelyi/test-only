/*! For license information please see main.c877136c1b58609034f9.js.LICENSE.txt */
(()=>{"use strict";var e={221:(e,t,n)=>{var r=n(540);function i(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(){}var l={d:{f:a,r:function(){throw Error(i(522))},D:a,C:a,L:a,m:a,X:a,S:a,M:a},p:0,findDOMNode:null},s=Symbol.for("react.portal"),o=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function u(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=l,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(i(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:s,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=o.T,n=l.p;try{if(o.T=null,l.p=2,e)return e()}finally{o.T=t,l.p=n,l.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,l.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&l.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin),i="string"==typeof t.integrity?t.integrity:void 0,a="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?l.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:i,fetchPriority:a}):"script"===n&&l.d.X(e,{crossOrigin:r,integrity:i,fetchPriority:a,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=u(t.as,t.crossOrigin);l.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&l.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin);l.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=u(t.as,t.crossOrigin);l.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else l.d.m(e)},t.requestFormReset=function(e){l.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return o.H.useFormState(e,t,n)},t.useFormStatus=function(){return o.H.useHostTransitionStatus()},t.version="19.1.0"},247:(e,t,n)=>{var r=n(982),i=n(540),a=n(961);function l(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function s(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function o(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function u(e){if(s(e)!==e)throw Error(l(188))}function c(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=c(e)))return t;e=e.sibling}return null}var d=Object.assign,f=Symbol.for("react.element"),p=Symbol.for("react.transitional.element"),h=Symbol.for("react.portal"),m=Symbol.for("react.fragment"),g=Symbol.for("react.strict_mode"),v=Symbol.for("react.profiler"),y=Symbol.for("react.provider"),b=Symbol.for("react.consumer"),w=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),S=Symbol.for("react.suspense"),k=Symbol.for("react.suspense_list"),x=Symbol.for("react.memo"),E=Symbol.for("react.lazy");Symbol.for("react.scope");var T=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var C=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var P=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=P&&e[P]||e["@@iterator"])?e:null}var L=Symbol.for("react.client.reference");function z(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===L?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case m:return"Fragment";case v:return"Profiler";case g:return"StrictMode";case S:return"Suspense";case k:return"SuspenseList";case T:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case h:return"Portal";case w:return(e.displayName||"Context")+".Provider";case b:return(e._context.displayName||"Context")+".Consumer";case _:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case x:return null!==(t=e.displayName||null)?t:z(e.type)||"Memo";case E:t=e._payload,e=e._init;try{return z(e(t))}catch(e){}}return null}var O=Array.isArray,N=i.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,A=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,D={pending:!1,data:null,method:null,action:null},R=[],I=-1;function F(e){return{current:e}}function B(e){0>I||(e.current=R[I],R[I]=null,I--)}function j(e,t){I++,R[I]=e.current,e.current=t}var $=F(null),V=F(null),H=F(null),G=F(null);function U(e,t){switch(j(H,t),j(V,e),j($,null),t.nodeType){case 9:case 11:e=(e=t.documentElement)&&(e=e.namespaceURI)?rd(e):0;break;default:if(e=t.tagName,t=t.namespaceURI)e=id(t=rd(t),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}B($),j($,e)}function q(){B($),B(V),B(H)}function W(e){null!==e.memoizedState&&j(G,e);var t=$.current,n=id(t,e.type);t!==n&&(j(V,e),j($,n))}function Y(e){V.current===e&&(B($),B(V)),G.current===e&&(B(G),Wd._currentValue=D)}var X=Object.prototype.hasOwnProperty,Q=r.unstable_scheduleCallback,K=r.unstable_cancelCallback,Z=r.unstable_shouldYield,J=r.unstable_requestPaint,ee=r.unstable_now,te=r.unstable_getCurrentPriorityLevel,ne=r.unstable_ImmediatePriority,re=r.unstable_UserBlockingPriority,ie=r.unstable_NormalPriority,ae=r.unstable_LowPriority,le=r.unstable_IdlePriority,se=r.log,oe=r.unstable_setDisableYieldValue,ue=null,ce=null;function de(e){if("function"==typeof se&&oe(e),ce&&"function"==typeof ce.setStrictMode)try{ce.setStrictMode(ue,e)}catch(e){}}var fe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(pe(e)/he|0)|0},pe=Math.log,he=Math.LN2,me=256,ge=4194304;function ve(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function ye(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var i=0,a=e.suspendedLanes,l=e.pingedLanes;e=e.warmLanes;var s=134217727&r;return 0!==s?0!==(r=s&~a)?i=ve(r):0!==(l&=s)?i=ve(l):n||0!==(n=s&~e)&&(i=ve(n)):0!==(s=r&~a)?i=ve(s):0!==l?i=ve(l):n||0!==(n=r&~e)&&(i=ve(n)),0===i?0:0!==t&&t!==i&&0===(t&a)&&((a=i&-i)>=(n=t&-t)||32===a&&4194048&n)?t:i}function be(e,t){return 0===(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function we(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function _e(){var e=me;return!(4194048&(me<<=1))&&(me=256),e}function Se(){var e=ge;return!(62914560&(ge<<=1))&&(ge=4194304),e}function ke(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function xe(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Ee(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-fe(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function Te(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-fe(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}function Ce(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Pe(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Me(){var e=A.p;return 0!==e?e:void 0===(e=window.event)?32:sf(e.type)}var Le=Math.random().toString(36).slice(2),ze="__reactFiber$"+Le,Oe="__reactProps$"+Le,Ne="__reactContainer$"+Le,Ae="__reactEvents$"+Le,De="__reactListeners$"+Le,Re="__reactHandles$"+Le,Ie="__reactResources$"+Le,Fe="__reactMarker$"+Le;function Be(e){delete e[ze],delete e[Oe],delete e[Ae],delete e[De],delete e[Re]}function je(e){var t=e[ze];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Ne]||n[ze]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=yd(e);null!==e;){if(n=e[ze])return n;e=yd(e)}return t}n=(e=n).parentNode}return null}function $e(e){if(e=e[ze]||e[Ne]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Ve(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(l(33))}function He(e){var t=e[Ie];return t||(t=e[Ie]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Ge(e){e[Fe]=!0}var Ue=new Set,qe={};function We(e,t){Ye(e,t),Ye(e+"Capture",t)}function Ye(e,t){for(qe[e]=t,e=0;e<t.length;e++)Ue.add(t[e])}var Xe,Qe,Ke=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Ze={},Je={};function et(e,t,n){if(i=t,X.call(Je,i)||!X.call(Ze,i)&&(Ke.test(i)?Je[i]=!0:(Ze[i]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var i}function tt(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function nt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function rt(e){if(void 0===Xe)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Xe=t&&t[1]||"",Qe=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Xe+e+Qe}var it=!1;function at(e,t){if(!e||it)return"";it=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch(function(){})}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var i=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");i&&i.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),l=a[0],s=a[1];if(l&&s){var o=l.split("\n"),u=s.split("\n");for(i=r=0;r<o.length&&!o[r].includes("DetermineComponentFrameRoot");)r++;for(;i<u.length&&!u[i].includes("DetermineComponentFrameRoot");)i++;if(r===o.length||i===u.length)for(r=o.length-1,i=u.length-1;1<=r&&0<=i&&o[r]!==u[i];)i--;for(;1<=r&&0<=i;r--,i--)if(o[r]!==u[i]){if(1!==r||1!==i)do{if(r--,0>--i||o[r]!==u[i]){var c="\n"+o[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=i);break}}}finally{it=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?rt(n):""}function lt(e){switch(e.tag){case 26:case 27:case 5:return rt(e.type);case 16:return rt("Lazy");case 13:return rt("Suspense");case 19:return rt("SuspenseList");case 0:case 15:return at(e.type,!1);case 11:return at(e.type.render,!1);case 1:return at(e.type,!0);case 31:return rt("Activity");default:return""}}function st(e){try{var t="";do{t+=lt(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function ot(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ut(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ct(e){e._valueTracker||(e._valueTracker=function(e){var t=ut(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function dt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ut(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ft(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var pt=/[\n"\\]/g;function ht(e){return e.replace(pt,function(e){return"\\"+e.charCodeAt(0).toString(16)+" "})}function mt(e,t,n,r,i,a,l,s){e.name="",null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.type=l:e.removeAttribute("type"),null!=t?"number"===l?(0===t&&""===e.value||e.value!=t)&&(e.value=""+ot(t)):e.value!==""+ot(t)&&(e.value=""+ot(t)):"submit"!==l&&"reset"!==l||e.removeAttribute("value"),null!=t?vt(e,l,ot(t)):null!=n?vt(e,l,ot(n)):null!=r&&e.removeAttribute("value"),null==i&&null!=a&&(e.defaultChecked=!!a),null!=i&&(e.checked=i&&"function"!=typeof i&&"symbol"!=typeof i),null!=s&&"function"!=typeof s&&"symbol"!=typeof s&&"boolean"!=typeof s?e.name=""+ot(s):e.removeAttribute("name")}function gt(e,t,n,r,i,a,l,s){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+ot(n):"",t=null!=t?""+ot(t):n,s||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:i)&&"symbol"!=typeof r&&!!r,e.checked=s?e.checked:!!r,e.defaultChecked=!!r,null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l&&(e.name=l)}function vt(e,t,n){"number"===t&&ft(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function yt(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ot(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function bt(e,t,n){null==t||((t=""+ot(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+ot(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function wt(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(l(92));if(O(r)){if(1<r.length)throw Error(l(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=ot(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function _t(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var St=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function kt(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||St.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function xt(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(l(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var i in t)r=t[i],t.hasOwnProperty(i)&&n[i]!==r&&kt(e,i,r)}else for(var a in t)t.hasOwnProperty(a)&&kt(e,a,t[a])}function Et(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Tt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Ct=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Pt(e){return Ct.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Mt=null;function Lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var zt=null,Ot=null;function Nt(e){var t=$e(e);if(t&&(e=t.stateNode)){var n=e[Oe]||null;e:switch(e=t.stateNode,t.type){case"input":if(mt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+ht(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=r[Oe]||null;if(!i)throw Error(l(90));mt(r,i.value,i.defaultValue,i.defaultValue,i.checked,i.defaultChecked,i.type,i.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&dt(r)}break e;case"textarea":bt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&yt(e,!!n.multiple,t,!1)}}}var At=!1;function Dt(e,t,n){if(At)return e(t,n);At=!0;try{return e(t)}finally{if(At=!1,(null!==zt||null!==Ot)&&(ju(),zt&&(t=zt,e=Ot,Ot=zt=null,Nt(t),e)))for(t=0;t<e.length;t++)Nt(e[t])}}function Rt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Oe]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,typeof n));return n}var It=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Ft=!1;if(It)try{var Bt={};Object.defineProperty(Bt,"passive",{get:function(){Ft=!0}}),window.addEventListener("test",Bt,Bt),window.removeEventListener("test",Bt,Bt)}catch(e){Ft=!1}var jt=null,$t=null,Vt=null;function Ht(){if(Vt)return Vt;var e,t,n=$t,r=n.length,i="value"in jt?jt.value:jt.textContent,a=i.length;for(e=0;e<r&&n[e]===i[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===i[a-t];t++);return Vt=i.slice(e,1<t?1-t:void 0)}function Gt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Ut(){return!0}function qt(){return!1}function Wt(e){function t(t,n,r,i,a){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(i):i[l]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?Ut:qt,this.isPropagationStopped=qt,this}return d(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Ut)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Ut)},persist:function(){},isPersistent:Ut}),t}var Yt,Xt,Qt,Kt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Zt=Wt(Kt),Jt=d({},Kt,{view:0,detail:0}),en=Wt(Jt),tn=d({},Jt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Qt&&(Qt&&"mousemove"===e.type?(Yt=e.screenX-Qt.screenX,Xt=e.screenY-Qt.screenY):Xt=Yt=0,Qt=e),Yt)},movementY:function(e){return"movementY"in e?e.movementY:Xt}}),nn=Wt(tn),rn=Wt(d({},tn,{dataTransfer:0})),an=Wt(d({},Jt,{relatedTarget:0})),ln=Wt(d({},Kt,{animationName:0,elapsedTime:0,pseudoElement:0})),sn=Wt(d({},Kt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),on=Wt(d({},Kt,{data:0})),un={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function fn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=dn[e])&&!!t[e]}function pn(){return fn}var hn=Wt(d({},Jt,{key:function(e){if(e.key){var t=un[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Gt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:pn,charCode:function(e){return"keypress"===e.type?Gt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Gt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),mn=Wt(d({},tn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),gn=Wt(d({},Jt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:pn})),vn=Wt(d({},Kt,{propertyName:0,elapsedTime:0,pseudoElement:0})),yn=Wt(d({},tn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),bn=Wt(d({},Kt,{newState:0,oldState:0})),wn=[9,13,27,32],_n=It&&"CompositionEvent"in window,Sn=null;It&&"documentMode"in document&&(Sn=document.documentMode);var kn=It&&"TextEvent"in window&&!Sn,xn=It&&(!_n||Sn&&8<Sn&&11>=Sn),En=String.fromCharCode(32),Tn=!1;function Cn(e,t){switch(e){case"keyup":return-1!==wn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Pn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Mn=!1,Ln={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ln[e.type]:"textarea"===t}function On(e,t,n,r){zt?Ot?Ot.push(r):Ot=[r]:zt=r,0<(t=Hc(t,"onChange")).length&&(n=new Zt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Nn=null,An=null;function Dn(e){Dc(e,0)}function Rn(e){if(dt(Ve(e)))return e}function In(e,t){if("change"===e)return t}var Fn=!1;if(It){var Bn;if(It){var jn="oninput"in document;if(!jn){var $n=document.createElement("div");$n.setAttribute("oninput","return;"),jn="function"==typeof $n.oninput}Bn=jn}else Bn=!1;Fn=Bn&&(!document.documentMode||9<document.documentMode)}function Vn(){Nn&&(Nn.detachEvent("onpropertychange",Hn),An=Nn=null)}function Hn(e){if("value"===e.propertyName&&Rn(An)){var t=[];On(t,An,e,Lt(e)),Dt(Dn,t)}}function Gn(e,t,n){"focusin"===e?(Vn(),An=n,(Nn=t).attachEvent("onpropertychange",Hn)):"focusout"===e&&Vn()}function Un(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Rn(An)}function qn(e,t){if("click"===e)return Rn(t)}function Wn(e,t){if("input"===e||"change"===e)return Rn(t)}var Yn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Xn(e,t){if(Yn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!X.call(t,i)||!Yn(e[i],t[i]))return!1}return!0}function Qn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Kn(e,t){var n,r=Qn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Qn(r)}}function Zn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Zn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Jn(e){for(var t=ft((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=ft((e=t.contentWindow).document)}return t}function er(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var tr=It&&"documentMode"in document&&11>=document.documentMode,nr=null,rr=null,ir=null,ar=!1;function lr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;ar||null==nr||nr!==ft(r)||(r="selectionStart"in(r=nr)&&er(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ir&&Xn(ir,r)||(ir=r,0<(r=Hc(rr,"onSelect")).length&&(t=new Zt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=nr)))}function sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var or={animationend:sr("Animation","AnimationEnd"),animationiteration:sr("Animation","AnimationIteration"),animationstart:sr("Animation","AnimationStart"),transitionrun:sr("Transition","TransitionRun"),transitionstart:sr("Transition","TransitionStart"),transitioncancel:sr("Transition","TransitionCancel"),transitionend:sr("Transition","TransitionEnd")},ur={},cr={};function dr(e){if(ur[e])return ur[e];if(!or[e])return e;var t,n=or[e];for(t in n)if(n.hasOwnProperty(t)&&t in cr)return ur[e]=n[t];return e}It&&(cr=document.createElement("div").style,"AnimationEvent"in window||(delete or.animationend.animation,delete or.animationiteration.animation,delete or.animationstart.animation),"TransitionEvent"in window||delete or.transitionend.transition);var fr=dr("animationend"),pr=dr("animationiteration"),hr=dr("animationstart"),mr=dr("transitionrun"),gr=dr("transitionstart"),vr=dr("transitioncancel"),yr=dr("transitionend"),br=new Map,wr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function _r(e,t){br.set(e,t),We(t,[e])}wr.push("scrollEnd");var Sr=new WeakMap;function kr(e,t){if("object"==typeof e&&null!==e){var n=Sr.get(e);return void 0!==n?n:(t={value:e,source:t,stack:st(t)},Sr.set(e,t),t)}return{value:e,source:t,stack:st(t)}}var xr=[],Er=0,Tr=0;function Cr(){for(var e=Er,t=Tr=Er=0;t<e;){var n=xr[t];xr[t++]=null;var r=xr[t];xr[t++]=null;var i=xr[t];xr[t++]=null;var a=xr[t];if(xr[t++]=null,null!==r&&null!==i){var l=r.pending;null===l?i.next=i:(i.next=l.next,l.next=i),r.pending=i}0!==a&&zr(n,i,a)}}function Pr(e,t,n,r){xr[Er++]=e,xr[Er++]=t,xr[Er++]=n,xr[Er++]=r,Tr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Mr(e,t,n,r){return Pr(e,t,n,r),Or(e)}function Lr(e,t){return Pr(e,null,null,t),Or(e)}function zr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var i=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(i=!0)),e=a,a=a.return;return 3===e.tag?(a=e.stateNode,i&&null!==t&&(i=31-fe(n),null===(r=(e=a.hiddenUpdates)[i])?e[i]=[t]:r.push(t),t.lane=536870912|n),a):null}function Or(e){if(50<zu)throw zu=0,Ou=null,Error(l(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Nr={};function Ar(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Dr(e,t,n,r){return new Ar(e,t,n,r)}function Rr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ir(e,t){var n=e.alternate;return null===n?((n=Dr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Fr(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Br(e,t,n,r,i,a){var s=0;if(r=e,"function"==typeof e)Rr(e)&&(s=1);else if("string"==typeof e)s=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,$.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case T:return(e=Dr(31,n,t,i)).elementType=T,e.lanes=a,e;case m:return jr(n.children,i,a,t);case g:s=8,i|=24;break;case v:return(e=Dr(12,n,t,2|i)).elementType=v,e.lanes=a,e;case S:return(e=Dr(13,n,t,i)).elementType=S,e.lanes=a,e;case k:return(e=Dr(19,n,t,i)).elementType=k,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case y:case w:s=10;break e;case b:s=9;break e;case _:s=11;break e;case x:s=14;break e;case E:s=16,r=null;break e}s=29,n=Error(l(130,null===e?"null":typeof e,"")),r=null}return(t=Dr(s,n,t,i)).elementType=e,t.type=r,t.lanes=a,t}function jr(e,t,n,r){return(e=Dr(7,e,r,t)).lanes=n,e}function $r(e,t,n){return(e=Dr(6,e,null,t)).lanes=n,e}function Vr(e,t,n){return(t=Dr(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var Hr=[],Gr=0,Ur=null,qr=0,Wr=[],Yr=0,Xr=null,Qr=1,Kr="";function Zr(e,t){Hr[Gr++]=qr,Hr[Gr++]=Ur,Ur=e,qr=t}function Jr(e,t,n){Wr[Yr++]=Qr,Wr[Yr++]=Kr,Wr[Yr++]=Xr,Xr=e;var r=Qr;e=Kr;var i=32-fe(r)-1;r&=~(1<<i),n+=1;var a=32-fe(t)+i;if(30<a){var l=i-i%5;a=(r&(1<<l)-1).toString(32),r>>=l,i-=l,Qr=1<<32-fe(t)+i|n<<i|r,Kr=a+e}else Qr=1<<a|n<<i|r,Kr=e}function ei(e){null!==e.return&&(Zr(e,1),Jr(e,1,0))}function ti(e){for(;e===Ur;)Ur=Hr[--Gr],Hr[Gr]=null,qr=Hr[--Gr],Hr[Gr]=null;for(;e===Xr;)Xr=Wr[--Yr],Wr[Yr]=null,Kr=Wr[--Yr],Wr[Yr]=null,Qr=Wr[--Yr],Wr[Yr]=null}var ni=null,ri=null,ii=!1,ai=null,li=!1,si=Error(l(519));function oi(e){throw hi(kr(Error(l(418,"")),e)),si}function ui(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[ze]=e,t[Oe]=r,n){case"dialog":Rc("cancel",t),Rc("close",t);break;case"iframe":case"object":case"embed":Rc("load",t);break;case"video":case"audio":for(n=0;n<Nc.length;n++)Rc(Nc[n],t);break;case"source":Rc("error",t);break;case"img":case"image":case"link":Rc("error",t),Rc("load",t);break;case"details":Rc("toggle",t);break;case"input":Rc("invalid",t),gt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ct(t);break;case"select":Rc("invalid",t);break;case"textarea":Rc("invalid",t),wt(t,r.value,r.defaultValue,r.children),ct(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Xc(t.textContent,n)?(null!=r.popover&&(Rc("beforetoggle",t),Rc("toggle",t)),null!=r.onScroll&&Rc("scroll",t),null!=r.onScrollEnd&&Rc("scrollend",t),null!=r.onClick&&(t.onclick=Qc),t=!0):t=!1,t||oi(e)}function ci(e){for(ni=e.return;ni;)switch(ni.tag){case 5:case 13:return void(li=!1);case 27:case 3:return void(li=!0);default:ni=ni.return}}function di(e){if(e!==ni)return!1;if(!ii)return ci(e),ii=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||ad(e.type,e.memoizedProps)),t=!t),t&&ri&&oi(e),ci(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){ri=gd(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}ri=null}}else 27===n?(n=ri,fd(e.type)?(e=vd,vd=null,ri=e):ri=n):ri=ni?gd(e.stateNode.nextSibling):null;return!0}function fi(){ri=ni=null,ii=!1}function pi(){var e=ai;return null!==e&&(null===yu?yu=e:yu.push.apply(yu,e),ai=null),e}function hi(e){null===ai?ai=[e]:ai.push(e)}var mi=F(null),gi=null,vi=null;function yi(e,t,n){j(mi,t._currentValue),t._currentValue=n}function bi(e){e._currentValue=mi.current,B(mi)}function wi(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function _i(e,t,n,r){var i=e.child;for(null!==i&&(i.return=e);null!==i;){var a=i.dependencies;if(null!==a){var s=i.child;a=a.firstContext;e:for(;null!==a;){var o=a;a=i;for(var u=0;u<t.length;u++)if(o.context===t[u]){a.lanes|=n,null!==(o=a.alternate)&&(o.lanes|=n),wi(a.return,n,e),r||(s=null);break e}a=o.next}}else if(18===i.tag){if(null===(s=i.return))throw Error(l(341));s.lanes|=n,null!==(a=s.alternate)&&(a.lanes|=n),wi(s,n,e),s=null}else s=i.child;if(null!==s)s.return=i;else for(s=i;null!==s;){if(s===e){s=null;break}if(null!==(i=s.sibling)){i.return=s.return,s=i;break}s=s.return}i=s}}function Si(e,t,n,r){e=null;for(var i=t,a=!1;null!==i;){if(!a)if(524288&i.flags)a=!0;else if(262144&i.flags)break;if(10===i.tag){var s=i.alternate;if(null===s)throw Error(l(387));if(null!==(s=s.memoizedProps)){var o=i.type;Yn(i.pendingProps.value,s.value)||(null!==e?e.push(o):e=[o])}}else if(i===G.current){if(null===(s=i.alternate))throw Error(l(387));s.memoizedState.memoizedState!==i.memoizedState.memoizedState&&(null!==e?e.push(Wd):e=[Wd])}i=i.return}null!==e&&_i(t,e,n,r),t.flags|=262144}function ki(e){for(e=e.firstContext;null!==e;){if(!Yn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function xi(e){gi=e,vi=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Ei(e){return Ci(gi,e)}function Ti(e,t){return null===gi&&xi(e),Ci(e,t)}function Ci(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===vi){if(null===e)throw Error(l(308));vi=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else vi=vi.next=t;return n}var Pi="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach(function(e){return e()})}},Mi=r.unstable_scheduleCallback,Li=r.unstable_NormalPriority,zi={$$typeof:w,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Oi(){return{controller:new Pi,data:new Map,refCount:0}}function Ni(e){e.refCount--,0===e.refCount&&Mi(Li,function(){e.controller.abort()})}var Ai=null,Di=0,Ri=0,Ii=null;function Fi(){if(0===--Di&&null!==Ai){null!==Ii&&(Ii.status="fulfilled");var e=Ai;Ai=null,Ri=0,Ii=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Bi=N.S;N.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Ai){var n=Ai=[];Di=0,Ri=Pc(),Ii={status:"pending",value:void 0,then:function(e){n.push(e)}}}Di++,t.then(Fi,Fi)}(0,t),null!==Bi&&Bi(e,t)};var ji=F(null);function $i(){var e=ji.current;return null!==e?e:nu.pooledCache}function Vi(e,t){j(ji,null===t?ji.current:t.pool)}function Hi(){var e=$i();return null===e?null:{parent:zi._currentValue,pool:e}}var Gi=Error(l(460)),Ui=Error(l(474)),qi=Error(l(542)),Wi={then:function(){}};function Yi(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Xi(){}function Qi(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(Xi,Xi),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw Ji(e=t.reason),e;default:if("string"==typeof t.status)t.then(Xi,Xi);else{if(null!==(e=nu)&&100<e.shellSuspendCounter)throw Error(l(482));(e=t).status="pending",e.then(function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}},function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}})}switch(t.status){case"fulfilled":return t.value;case"rejected":throw Ji(e=t.reason),e}throw Ki=t,Gi}}var Ki=null;function Zi(){if(null===Ki)throw Error(l(459));var e=Ki;return Ki=null,e}function Ji(e){if(e===Gi||e===qi)throw Error(l(483))}var ea=!1;function ta(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function na(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function ra(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function ia(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&tu){var i=r.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,t=Or(e),zr(e,null,n),t}return Pr(e,r,t,n),Or(e)}function aa(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Te(e,n)}}function la(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var l={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?i=a=l:a=a.next=l,n=n.next}while(null!==n);null===a?i=a=t:a=a.next=t}else i=a=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var sa=!1;function oa(){if(sa&&null!==Ii)throw Ii}function ua(e,t,n,r){sa=!1;var i=e.updateQueue;ea=!1;var a=i.firstBaseUpdate,l=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var o=s,u=o.next;o.next=null,null===l?a=u:l.next=u,l=o;var c=e.alternate;null!==c&&(s=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===s?c.firstBaseUpdate=u:s.next=u,c.lastBaseUpdate=o)}if(null!==a){var f=i.baseState;for(l=0,c=u=o=null,s=a;;){var p=-536870913&s.lane,h=p!==s.lane;if(h?(iu&p)===p:(r&p)===p){0!==p&&p===Ri&&(sa=!0),null!==c&&(c=c.next={lane:0,tag:s.tag,payload:s.payload,callback:null,next:null});e:{var m=e,g=s;p=t;var v=n;switch(g.tag){case 1:if("function"==typeof(m=g.payload)){f=m.call(v,f,p);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(p="function"==typeof(m=g.payload)?m.call(v,f,p):m))break e;f=d({},f,p);break e;case 2:ea=!0}}null!==(p=s.callback)&&(e.flags|=64,h&&(e.flags|=8192),null===(h=i.callbacks)?i.callbacks=[p]:h.push(p))}else h={lane:p,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(u=c=h,o=f):c=c.next=h,l|=p;if(null===(s=s.next)){if(null===(s=i.shared.pending))break;s=(h=s).next,h.next=null,i.lastBaseUpdate=h,i.shared.pending=null}}null===c&&(o=f),i.baseState=o,i.firstBaseUpdate=u,i.lastBaseUpdate=c,null===a&&(i.shared.lanes=0),fu|=l,e.lanes=l,e.memoizedState=f}}function ca(e,t){if("function"!=typeof e)throw Error(l(191,e));e.call(t)}function da(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)ca(n[e],t)}var fa=F(null),pa=F(0);function ha(e,t){j(pa,e=cu),j(fa,t),cu=e|t.baseLanes}function ma(){j(pa,cu),j(fa,fa.current)}function ga(){cu=pa.current,B(fa),B(pa)}var va=0,ya=null,ba=null,wa=null,_a=!1,Sa=!1,ka=!1,xa=0,Ea=0,Ta=null,Ca=0;function Pa(){throw Error(l(321))}function Ma(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Yn(e[n],t[n]))return!1;return!0}function La(e,t,n,r,i,a){return va=a,ya=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,N.H=null===e||null===e.memoizedState?Gl:Ul,ka=!1,a=n(r,i),ka=!1,Sa&&(a=Oa(t,n,r,i)),za(e),a}function za(e){N.H=Hl;var t=null!==ba&&null!==ba.next;if(va=0,wa=ba=ya=null,_a=!1,Ea=0,Ta=null,t)throw Error(l(300));null===e||Es||null!==(e=e.dependencies)&&ki(e)&&(Es=!0)}function Oa(e,t,n,r){ya=e;var i=0;do{if(Sa&&(Ta=null),Ea=0,Sa=!1,25<=i)throw Error(l(301));if(i+=1,wa=ba=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}N.H=ql,a=t(n,r)}while(Sa);return a}function Na(){var e=N.H,t=e.useState()[0];return t="function"==typeof t.then?Ba(t):t,e=e.useState()[0],(null!==ba?ba.memoizedState:null)!==e&&(ya.flags|=1024),t}function Aa(){var e=0!==xa;return xa=0,e}function Da(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function Ra(e){if(_a){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}_a=!1}va=0,wa=ba=ya=null,Sa=!1,Ea=xa=0,Ta=null}function Ia(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===wa?ya.memoizedState=wa=e:wa=wa.next=e,wa}function Fa(){if(null===ba){var e=ya.alternate;e=null!==e?e.memoizedState:null}else e=ba.next;var t=null===wa?ya.memoizedState:wa.next;if(null!==t)wa=t,ba=e;else{if(null===e){if(null===ya.alternate)throw Error(l(467));throw Error(l(310))}e={memoizedState:(ba=e).memoizedState,baseState:ba.baseState,baseQueue:ba.baseQueue,queue:ba.queue,next:null},null===wa?ya.memoizedState=wa=e:wa=wa.next=e}return wa}function Ba(e){var t=Ea;return Ea+=1,null===Ta&&(Ta=[]),e=Qi(Ta,e,t),t=ya,null===(null===wa?t.memoizedState:wa.next)&&(t=t.alternate,N.H=null===t||null===t.memoizedState?Gl:Ul),e}function ja(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Ba(e);if(e.$$typeof===w)return Ei(e)}throw Error(l(438,String(e)))}function $a(e){var t=null,n=ya.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=ya.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map(function(e){return e.slice()}),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},ya.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=C;return t.index++,n}function Va(e,t){return"function"==typeof t?t(e):t}function Ha(e){return Ga(Fa(),ba,e)}function Ga(e,t,n){var r=e.queue;if(null===r)throw Error(l(311));r.lastRenderedReducer=n;var i=e.baseQueue,a=r.pending;if(null!==a){if(null!==i){var s=i.next;i.next=a.next,a.next=s}t.baseQueue=i=a,r.pending=null}if(a=e.baseState,null===i)e.memoizedState=a;else{var o=s=null,u=null,c=t=i.next,d=!1;do{var f=-536870913&c.lane;if(f!==c.lane?(iu&f)===f:(va&f)===f){var p=c.revertLane;if(0===p)null!==u&&(u=u.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),f===Ri&&(d=!0);else{if((va&p)===p){c=c.next,p===Ri&&(d=!0);continue}f={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(o=u=f,s=a):u=u.next=f,ya.lanes|=p,fu|=p}f=c.action,ka&&n(a,f),a=c.hasEagerState?c.eagerState:n(a,f)}else p={lane:f,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(o=u=p,s=a):u=u.next=p,ya.lanes|=f,fu|=f;c=c.next}while(null!==c&&c!==t);if(null===u?s=a:u.next=o,!Yn(a,e.memoizedState)&&(Es=!0,d&&null!==(n=Ii)))throw n;e.memoizedState=a,e.baseState=s,e.baseQueue=u,r.lastRenderedState=a}return null===i&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Ua(e){var t=Fa(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{a=e(a,s.action),s=s.next}while(s!==i);Yn(a,t.memoizedState)||(Es=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function qa(e,t,n){var r=ya,i=Fa(),a=ii;if(a){if(void 0===n)throw Error(l(407));n=n()}else n=t();var s=!Yn((ba||i).memoizedState,n);if(s&&(i.memoizedState=n,Es=!0),i=i.queue,ml(2048,8,Xa.bind(null,r,i,e),[e]),i.getSnapshot!==t||s||null!==wa&&1&wa.memoizedState.tag){if(r.flags|=2048,fl(9,{destroy:void 0,resource:void 0},Ya.bind(null,r,i,n,t),null),null===nu)throw Error(l(349));a||124&va||Wa(r,t,n)}return n}function Wa(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ya.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},ya.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ya(e,t,n,r){t.value=n,t.getSnapshot=r,Qa(t)&&Ka(e)}function Xa(e,t,n){return n(function(){Qa(t)&&Ka(e)})}function Qa(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Yn(e,n)}catch(e){return!0}}function Ka(e){var t=Lr(e,2);null!==t&&Du(t,0,2)}function Za(e){var t=Ia();if("function"==typeof e){var n=e;if(e=n(),ka){de(!0);try{n()}finally{de(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Va,lastRenderedState:e},t}function Ja(e,t,n,r){return e.baseState=n,Ga(e,ba,"function"==typeof r?r:Va)}function el(e,t,n,r,i){if(jl(e))throw Error(l(485));if(null!==(e=t.action)){var a={payload:i,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==N.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,tl(t,a)):(a.next=n.next,t.pending=n.next=a)}}function tl(e,t){var n=t.action,r=t.payload,i=e.state;if(t.isTransition){var a=N.T,l={};N.T=l;try{var s=n(i,r),o=N.S;null!==o&&o(l,s),nl(e,t,s)}catch(n){il(e,t,n)}finally{N.T=a}}else try{nl(e,t,a=n(i,r))}catch(n){il(e,t,n)}}function nl(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then(function(n){rl(e,t,n)},function(n){return il(e,t,n)}):rl(e,t,n)}function rl(e,t,n){t.status="fulfilled",t.value=n,al(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,tl(e,n)))}function il(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,al(t),t=t.next}while(t!==r)}e.action=null}function al(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function ll(e,t){return t}function sl(e,t){if(ii){var n=nu.formState;if(null!==n){e:{var r=ya;if(ii){if(ri){t:{for(var i=ri,a=li;8!==i.nodeType;){if(!a){i=null;break t}if(null===(i=gd(i.nextSibling))){i=null;break t}}i="F!"===(a=i.data)||"F"===a?i:null}if(i){ri=gd(i.nextSibling),r="F!"===i.data;break e}}oi(r)}r=!1}r&&(t=n[0])}}return(n=Ia()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:ll,lastRenderedState:t},n.queue=r,n=Il.bind(null,ya,r),r.dispatch=n,r=Za(!1),a=Bl.bind(null,ya,!1,r.queue),i={state:t,dispatch:null,action:e,pending:null},(r=Ia()).queue=i,n=el.bind(null,ya,i,a,n),i.dispatch=n,r.memoizedState=e,[t,n,!1]}function ol(e){return ul(Fa(),ba,e)}function ul(e,t,n){if(t=Ga(e,t,ll)[0],e=Ha(Va)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=Ba(t)}catch(e){if(e===Gi)throw qi;throw e}else r=t;var i=(t=Fa()).queue,a=i.dispatch;return n!==t.memoizedState&&(ya.flags|=2048,fl(9,{destroy:void 0,resource:void 0},cl.bind(null,i,n),null)),[r,a,e]}function cl(e,t){e.action=t}function dl(e){var t=Fa(),n=ba;if(null!==n)return ul(t,n,e);Fa(),t=t.memoizedState;var r=(n=Fa()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function fl(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=ya.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},ya.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pl(){return Fa().memoizedState}function hl(e,t,n,r){var i=Ia();r=void 0===r?null:r,ya.flags|=e,i.memoizedState=fl(1|t,{destroy:void 0,resource:void 0},n,r)}function ml(e,t,n,r){var i=Fa();r=void 0===r?null:r;var a=i.memoizedState.inst;null!==ba&&null!==r&&Ma(r,ba.memoizedState.deps)?i.memoizedState=fl(t,a,n,r):(ya.flags|=e,i.memoizedState=fl(1|t,a,n,r))}function gl(e,t){hl(8390656,8,e,t)}function vl(e,t){ml(2048,8,e,t)}function yl(e,t){return ml(4,2,e,t)}function bl(e,t){return ml(4,4,e,t)}function wl(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function _l(e,t,n){n=null!=n?n.concat([e]):null,ml(4,4,wl.bind(null,t,e),n)}function Sl(){}function kl(e,t){var n=Fa();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&Ma(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function xl(e,t){var n=Fa();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&Ma(t,r[1]))return r[0];if(r=e(),ka){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r}function El(e,t,n){return void 0===n||1073741824&va?e.memoizedState=t:(e.memoizedState=n,e=Au(),ya.lanes|=e,fu|=e,n)}function Tl(e,t,n,r){return Yn(n,t)?n:null!==fa.current?(e=El(e,n,r),Yn(e,t)||(Es=!0),e):42&va?(e=Au(),ya.lanes|=e,fu|=e,t):(Es=!0,e.memoizedState=n)}function Cl(e,t,n,r,i){var a=A.p;A.p=0!==a&&8>a?a:8;var l,s,o,u=N.T,c={};N.T=c,Bl(e,!1,t,n);try{var d=i(),f=N.S;null!==f&&f(c,d),null!==d&&"object"==typeof d&&"function"==typeof d.then?Fl(e,t,(l=r,s=[],o={status:"pending",value:null,reason:null,then:function(e){s.push(e)}},d.then(function(){o.status="fulfilled",o.value=l;for(var e=0;e<s.length;e++)(0,s[e])(l)},function(e){for(o.status="rejected",o.reason=e,e=0;e<s.length;e++)(0,s[e])(void 0)}),o),Nu()):Fl(e,t,r,Nu())}catch(n){Fl(e,t,{then:function(){},status:"rejected",reason:n},Nu())}finally{A.p=a,N.T=u}}function Pl(){}function Ml(e,t,n,r){if(5!==e.tag)throw Error(l(476));var i=Ll(e).queue;Cl(e,i,t,D,null===n?Pl:function(){return zl(e),n(r)})}function Ll(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:D,baseState:D,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Va,lastRenderedState:D},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Va,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function zl(e){Fl(e,Ll(e).next.queue,{},Nu())}function Ol(){return Ei(Wd)}function Nl(){return Fa().memoizedState}function Al(){return Fa().memoizedState}function Dl(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Nu(),r=ia(t,e=ra(n),n);return null!==r&&(Du(r,0,n),aa(r,t,n)),t={cache:Oi()},void(e.payload=t)}t=t.return}}function Rl(e,t,n){var r=Nu();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},jl(e)?$l(t,n):null!==(n=Mr(e,t,n,r))&&(Du(n,0,r),Vl(n,t,r))}function Il(e,t,n){Fl(e,t,n,Nu())}function Fl(e,t,n,r){var i={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(jl(e))$l(t,i);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var l=t.lastRenderedState,s=a(l,n);if(i.hasEagerState=!0,i.eagerState=s,Yn(s,l))return Pr(e,t,i,0),null===nu&&Cr(),!1}catch(e){}if(null!==(n=Mr(e,t,i,r)))return Du(n,0,r),Vl(n,t,r),!0}return!1}function Bl(e,t,n,r){if(r={lane:2,revertLane:Pc(),action:r,hasEagerState:!1,eagerState:null,next:null},jl(e)){if(t)throw Error(l(479))}else null!==(t=Mr(e,n,r,2))&&Du(t,0,2)}function jl(e){var t=e.alternate;return e===ya||null!==t&&t===ya}function $l(e,t){Sa=_a=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Vl(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Te(e,n)}}var Hl={readContext:Ei,use:ja,useCallback:Pa,useContext:Pa,useEffect:Pa,useImperativeHandle:Pa,useLayoutEffect:Pa,useInsertionEffect:Pa,useMemo:Pa,useReducer:Pa,useRef:Pa,useState:Pa,useDebugValue:Pa,useDeferredValue:Pa,useTransition:Pa,useSyncExternalStore:Pa,useId:Pa,useHostTransitionStatus:Pa,useFormState:Pa,useActionState:Pa,useOptimistic:Pa,useMemoCache:Pa,useCacheRefresh:Pa},Gl={readContext:Ei,use:ja,useCallback:function(e,t){return Ia().memoizedState=[e,void 0===t?null:t],e},useContext:Ei,useEffect:gl,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,hl(4194308,4,wl.bind(null,t,e),n)},useLayoutEffect:function(e,t){return hl(4194308,4,e,t)},useInsertionEffect:function(e,t){hl(4,2,e,t)},useMemo:function(e,t){var n=Ia();t=void 0===t?null:t;var r=e();if(ka){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=Ia();if(void 0!==n){var i=n(t);if(ka){de(!0);try{n(t)}finally{de(!1)}}}else i=t;return r.memoizedState=r.baseState=i,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:i},r.queue=e,e=e.dispatch=Rl.bind(null,ya,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ia().memoizedState=e},useState:function(e){var t=(e=Za(e)).queue,n=Il.bind(null,ya,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:Sl,useDeferredValue:function(e,t){return El(Ia(),e,t)},useTransition:function(){var e=Za(!1);return e=Cl.bind(null,ya,e.queue,!0,!1),Ia().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=ya,i=Ia();if(ii){if(void 0===n)throw Error(l(407));n=n()}else{if(n=t(),null===nu)throw Error(l(349));124&iu||Wa(r,t,n)}i.memoizedState=n;var a={value:n,getSnapshot:t};return i.queue=a,gl(Xa.bind(null,r,a,e),[e]),r.flags|=2048,fl(9,{destroy:void 0,resource:void 0},Ya.bind(null,r,a,n,t),null),n},useId:function(){var e=Ia(),t=nu.identifierPrefix;if(ii){var n=Kr;t="«"+t+"R"+(n=(Qr&~(1<<32-fe(Qr)-1)).toString(32)+n),0<(n=xa++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=Ca++).toString(32)+"»";return e.memoizedState=t},useHostTransitionStatus:Ol,useFormState:sl,useActionState:sl,useOptimistic:function(e){var t=Ia();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Bl.bind(null,ya,!0,n),n.dispatch=t,[e,t]},useMemoCache:$a,useCacheRefresh:function(){return Ia().memoizedState=Dl.bind(null,ya)}},Ul={readContext:Ei,use:ja,useCallback:kl,useContext:Ei,useEffect:vl,useImperativeHandle:_l,useInsertionEffect:yl,useLayoutEffect:bl,useMemo:xl,useReducer:Ha,useRef:pl,useState:function(){return Ha(Va)},useDebugValue:Sl,useDeferredValue:function(e,t){return Tl(Fa(),ba.memoizedState,e,t)},useTransition:function(){var e=Ha(Va)[0],t=Fa().memoizedState;return["boolean"==typeof e?e:Ba(e),t]},useSyncExternalStore:qa,useId:Nl,useHostTransitionStatus:Ol,useFormState:ol,useActionState:ol,useOptimistic:function(e,t){return Ja(Fa(),0,e,t)},useMemoCache:$a,useCacheRefresh:Al},ql={readContext:Ei,use:ja,useCallback:kl,useContext:Ei,useEffect:vl,useImperativeHandle:_l,useInsertionEffect:yl,useLayoutEffect:bl,useMemo:xl,useReducer:Ua,useRef:pl,useState:function(){return Ua(Va)},useDebugValue:Sl,useDeferredValue:function(e,t){var n=Fa();return null===ba?El(n,e,t):Tl(n,ba.memoizedState,e,t)},useTransition:function(){var e=Ua(Va)[0],t=Fa().memoizedState;return["boolean"==typeof e?e:Ba(e),t]},useSyncExternalStore:qa,useId:Nl,useHostTransitionStatus:Ol,useFormState:dl,useActionState:dl,useOptimistic:function(e,t){var n=Fa();return null!==ba?Ja(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:$a,useCacheRefresh:Al},Wl=null,Yl=0;function Xl(e){var t=Yl;return Yl+=1,null===Wl&&(Wl=[]),Qi(Wl,e,t)}function Ql(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Kl(e,t){if(t.$$typeof===f)throw Error(l(525));throw e=Object.prototype.toString.call(t),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Zl(e){return(0,e._init)(e._payload)}function Jl(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function i(e,t){return(e=Ir(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function o(e,t,n,r){return null===t||6!==t.tag?((t=$r(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){var a=n.type;return a===m?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===E&&Zl(a)===t.type)?(Ql(t=i(t,n.props),n),t.return=e,t):(Ql(t=Br(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Vr(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=jr(n,e.mode,r,a)).return=e,t):((t=i(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=$r(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case p:return Ql(n=Br(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case h:return(t=Vr(t,e.mode,n)).return=e,t;case E:return f(e,t=(0,t._init)(t._payload),n)}if(O(t)||M(t))return(t=jr(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return f(e,Xl(t),n);if(t.$$typeof===w)return f(e,Ti(e,t),n);Kl(e,t)}return null}function g(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==i?null:o(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case p:return n.key===i?u(e,t,n,r):null;case h:return n.key===i?c(e,t,n,r):null;case E:return g(e,t,n=(i=n._init)(n._payload),r)}if(O(n)||M(n))return null!==i?null:d(e,t,n,r,null);if("function"==typeof n.then)return g(e,t,Xl(n),r);if(n.$$typeof===w)return g(e,t,Ti(e,n),r);Kl(e,n)}return null}function v(e,t,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return o(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case p:return u(t,e=e.get(null===r.key?n:r.key)||null,r,i);case h:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i);case E:return v(e,t,n,r=(0,r._init)(r._payload),i)}if(O(r)||M(r))return d(t,e=e.get(n)||null,r,i,null);if("function"==typeof r.then)return v(e,t,n,Xl(r),i);if(r.$$typeof===w)return v(e,t,n,Ti(t,r),i);Kl(t,r)}return null}function y(o,u,c,d){if("object"==typeof c&&null!==c&&c.type===m&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case p:e:{for(var b=c.key;null!==u;){if(u.key===b){if((b=c.type)===m){if(7===u.tag){n(o,u.sibling),(d=i(u,c.props.children)).return=o,o=d;break e}}else if(u.elementType===b||"object"==typeof b&&null!==b&&b.$$typeof===E&&Zl(b)===u.type){n(o,u.sibling),Ql(d=i(u,c.props),c),d.return=o,o=d;break e}n(o,u);break}t(o,u),u=u.sibling}c.type===m?((d=jr(c.props.children,o.mode,d,c.key)).return=o,o=d):(Ql(d=Br(c.type,c.key,c.props,null,o.mode,d),c),d.return=o,o=d)}return s(o);case h:e:{for(b=c.key;null!==u;){if(u.key===b){if(4===u.tag&&u.stateNode.containerInfo===c.containerInfo&&u.stateNode.implementation===c.implementation){n(o,u.sibling),(d=i(u,c.children||[])).return=o,o=d;break e}n(o,u);break}t(o,u),u=u.sibling}(d=Vr(c,o.mode,d)).return=o,o=d}return s(o);case E:return y(o,u,c=(b=c._init)(c._payload),d)}if(O(c))return function(i,l,s,o){for(var u=null,c=null,d=l,p=l=0,h=null;null!==d&&p<s.length;p++){d.index>p?(h=d,d=null):h=d.sibling;var m=g(i,d,s[p],o);if(null===m){null===d&&(d=h);break}e&&d&&null===m.alternate&&t(i,d),l=a(m,l,p),null===c?u=m:c.sibling=m,c=m,d=h}if(p===s.length)return n(i,d),ii&&Zr(i,p),u;if(null===d){for(;p<s.length;p++)null!==(d=f(i,s[p],o))&&(l=a(d,l,p),null===c?u=d:c.sibling=d,c=d);return ii&&Zr(i,p),u}for(d=r(d);p<s.length;p++)null!==(h=v(d,i,p,s[p],o))&&(e&&null!==h.alternate&&d.delete(null===h.key?p:h.key),l=a(h,l,p),null===c?u=h:c.sibling=h,c=h);return e&&d.forEach(function(e){return t(i,e)}),ii&&Zr(i,p),u}(o,u,c,d);if(M(c)){if("function"!=typeof(b=M(c)))throw Error(l(150));return function(i,s,o,u){if(null==o)throw Error(l(151));for(var c=null,d=null,p=s,h=s=0,m=null,y=o.next();null!==p&&!y.done;h++,y=o.next()){p.index>h?(m=p,p=null):m=p.sibling;var b=g(i,p,y.value,u);if(null===b){null===p&&(p=m);break}e&&p&&null===b.alternate&&t(i,p),s=a(b,s,h),null===d?c=b:d.sibling=b,d=b,p=m}if(y.done)return n(i,p),ii&&Zr(i,h),c;if(null===p){for(;!y.done;h++,y=o.next())null!==(y=f(i,y.value,u))&&(s=a(y,s,h),null===d?c=y:d.sibling=y,d=y);return ii&&Zr(i,h),c}for(p=r(p);!y.done;h++,y=o.next())null!==(y=v(p,i,h,y.value,u))&&(e&&null!==y.alternate&&p.delete(null===y.key?h:y.key),s=a(y,s,h),null===d?c=y:d.sibling=y,d=y);return e&&p.forEach(function(e){return t(i,e)}),ii&&Zr(i,h),c}(o,u,c=b.call(c),d)}if("function"==typeof c.then)return y(o,u,Xl(c),d);if(c.$$typeof===w)return y(o,u,Ti(o,c),d);Kl(o,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==u&&6===u.tag?(n(o,u.sibling),(d=i(u,c)).return=o,o=d):(n(o,u),(d=$r(c,o.mode,d)).return=o,o=d),s(o)):n(o,u)}return function(e,t,n,r){try{Yl=0;var i=y(e,t,n,r);return Wl=null,i}catch(t){if(t===Gi||t===qi)throw t;var a=Dr(29,t,null,e.mode);return a.lanes=r,a.return=e,a}}}var es=Jl(!0),ts=Jl(!1),ns=F(null),rs=null;function is(e){var t=e.alternate;j(os,1&os.current),j(ns,e),null===rs&&(null===t||null!==fa.current||null!==t.memoizedState)&&(rs=e)}function as(e){if(22===e.tag){if(j(os,os.current),j(ns,e),null===rs){var t=e.alternate;null!==t&&null!==t.memoizedState&&(rs=e)}}else ls()}function ls(){j(os,os.current),j(ns,ns.current)}function ss(e){B(ns),rs===e&&(rs=null),B(os)}var os=F(0);function us(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||md(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function cs(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:d({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ds={enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Nu(),i=ra(r);i.payload=t,null!=n&&(i.callback=n),null!==(t=ia(e,i,r))&&(Du(t,0,r),aa(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Nu(),i=ra(r);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=ia(e,i,r))&&(Du(t,0,r),aa(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Nu(),r=ra(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=ia(e,r,n))&&(Du(t,0,n),aa(t,e,n))}};function fs(e,t,n,r,i,a,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,l):!(t.prototype&&t.prototype.isPureReactComponent&&Xn(n,r)&&Xn(i,a))}function ps(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ds.enqueueReplaceState(t,t.state,null)}function hs(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var i in n===t&&(n=d({},n)),e)void 0===n[i]&&(n[i]=e[i]);return n}var ms="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function gs(e){ms(e)}function vs(e){console.error(e)}function ys(e){ms(e)}function bs(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout(function(){throw e})}}function ws(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout(function(){throw e})}}function _s(e,t,n){return(n=ra(n)).tag=3,n.payload={element:null},n.callback=function(){bs(e,t)},n}function Ss(e){return(e=ra(e)).tag=3,e}function ks(e,t,n,r){var i=n.type.getDerivedStateFromError;if("function"==typeof i){var a=r.value;e.payload=function(){return i(a)},e.callback=function(){ws(t,n,r)}}var l=n.stateNode;null!==l&&"function"==typeof l.componentDidCatch&&(e.callback=function(){ws(t,n,r),"function"!=typeof i&&(null===ku?ku=new Set([this]):ku.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var xs=Error(l(461)),Es=!1;function Ts(e,t,n,r){t.child=null===e?ts(t,null,n,r):es(t,e.child,n,r)}function Cs(e,t,n,r,i){n=n.render;var a=t.ref;if("ref"in r){var l={};for(var s in r)"ref"!==s&&(l[s]=r[s])}else l=r;return xi(t),r=La(e,t,n,l,a,i),s=Aa(),null===e||Es?(ii&&s&&ei(t),t.flags|=1,Ts(e,t,r,i),t.child):(Da(e,t,i),Ws(e,t,i))}function Ps(e,t,n,r,i){if(null===e){var a=n.type;return"function"!=typeof a||Rr(a)||void 0!==a.defaultProps||null!==n.compare?((e=Br(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ms(e,t,a,r,i))}if(a=e.child,!Ys(e,i)){var l=a.memoizedProps;if((n=null!==(n=n.compare)?n:Xn)(l,r)&&e.ref===t.ref)return Ws(e,t,i)}return t.flags|=1,(e=Ir(a,r)).ref=t.ref,e.return=t,t.child=e}function Ms(e,t,n,r,i){if(null!==e){var a=e.memoizedProps;if(Xn(a,r)&&e.ref===t.ref){if(Es=!1,t.pendingProps=r=a,!Ys(e,i))return t.lanes=e.lanes,Ws(e,t,i);131072&e.flags&&(Es=!0)}}return Ns(e,t,n,r,i)}function Ls(e,t,n){var r=t.pendingProps,i=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==a?a.baseLanes|n:n,null!==e){for(i=t.child=e.child,a=0;null!==i;)a=a|i.lanes|i.childLanes,i=i.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return zs(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,zs(e,t,null!==a?a.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Vi(0,null!==a?a.cachePool:null),null!==a?ha(t,a):ma(),as(t)}else null!==a?(Vi(0,a.cachePool),ha(t,a),ls(),t.memoizedState=null):(null!==e&&Vi(0,null),ma(),ls());return Ts(e,t,i,n),t.child}function zs(e,t,n,r){var i=$i();return i=null===i?null:{parent:zi._currentValue,pool:i},t.memoizedState={baseLanes:n,cachePool:i},null!==e&&Vi(0,null),ma(),as(t),null!==e&&Si(e,t,r,!0),null}function Os(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(l(284));null!==e&&e.ref===n||(t.flags|=4194816)}}function Ns(e,t,n,r,i){return xi(t),n=La(e,t,n,r,void 0,i),r=Aa(),null===e||Es?(ii&&r&&ei(t),t.flags|=1,Ts(e,t,n,i),t.child):(Da(e,t,i),Ws(e,t,i))}function As(e,t,n,r,i,a){return xi(t),t.updateQueue=null,n=Oa(t,r,n,i),za(e),r=Aa(),null===e||Es?(ii&&r&&ei(t),t.flags|=1,Ts(e,t,n,a),t.child):(Da(e,t,a),Ws(e,t,a))}function Ds(e,t,n,r,i){if(xi(t),null===t.stateNode){var a=Nr,l=n.contextType;"object"==typeof l&&null!==l&&(a=Ei(l)),a=new n(r,a),t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=ds,t.stateNode=a,a._reactInternals=t,(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},ta(t),l=n.contextType,a.context="object"==typeof l&&null!==l?Ei(l):Nr,a.state=t.memoizedState,"function"==typeof(l=n.getDerivedStateFromProps)&&(cs(t,n,l,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(l=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),l!==a.state&&ds.enqueueReplaceState(a,a.state,null),ua(t,r,a,i),oa(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){a=t.stateNode;var s=t.memoizedProps,o=hs(n,s);a.props=o;var u=a.context,c=n.contextType;l=Nr,"object"==typeof c&&null!==c&&(l=Ei(c));var d=n.getDerivedStateFromProps;c="function"==typeof d||"function"==typeof a.getSnapshotBeforeUpdate,s=t.pendingProps!==s,c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s||u!==l)&&ps(t,a,r,l),ea=!1;var f=t.memoizedState;a.state=f,ua(t,r,a,i),oa(),u=t.memoizedState,s||f!==u||ea?("function"==typeof d&&(cs(t,n,d,r),u=t.memoizedState),(o=ea||fs(t,n,o,r,f,u,l))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=l,r=o):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,na(e,t),c=hs(n,l=t.memoizedProps),a.props=c,d=t.pendingProps,f=a.context,u=n.contextType,o=Nr,"object"==typeof u&&null!==u&&(o=Ei(u)),(u="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==d||f!==o)&&ps(t,a,r,o),ea=!1,f=t.memoizedState,a.state=f,ua(t,r,a,i),oa();var p=t.memoizedState;l!==d||f!==p||ea||null!==e&&null!==e.dependencies&&ki(e.dependencies)?("function"==typeof s&&(cs(t,n,s,r),p=t.memoizedState),(c=ea||fs(t,n,c,r,f,p,o)||null!==e&&null!==e.dependencies&&ki(e.dependencies))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,o),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,o)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=o,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return a=r,Os(e,t),r=!!(128&t.flags),a||r?(a=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:a.render(),t.flags|=1,null!==e&&r?(t.child=es(t,e.child,null,i),t.child=es(t,null,n,i)):Ts(e,t,n,i),t.memoizedState=a.state,e=t.child):e=Ws(e,t,i),e}function Rs(e,t,n,r){return fi(),t.flags|=256,Ts(e,t,n,r),t.child}var Is={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function Fs(e){return{baseLanes:e,cachePool:Hi()}}function Bs(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=mu),e}function js(e,t,n){var r,i=t.pendingProps,a=!1,s=!!(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&!!(2&os.current)),r&&(a=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(ii){if(a?is(t):ls(),ii){var o,u=ri;if(o=u){e:{for(o=u,u=li;8!==o.nodeType;){if(!u){u=null;break e}if(null===(o=gd(o.nextSibling))){u=null;break e}}u=o}null!==u?(t.memoizedState={dehydrated:u,treeContext:null!==Xr?{id:Qr,overflow:Kr}:null,retryLane:536870912,hydrationErrors:null},(o=Dr(18,null,null,0)).stateNode=u,o.return=t,t.child=o,ni=t,ri=null,o=!0):o=!1}o||oi(t)}if(null!==(u=t.memoizedState)&&null!==(u=u.dehydrated))return md(u)?t.lanes=32:t.lanes=536870912,null;ss(t)}return u=i.children,i=i.fallback,a?(ls(),u=Vs({mode:"hidden",children:u},a=t.mode),i=jr(i,a,n,null),u.return=t,i.return=t,u.sibling=i,t.child=u,(a=t.child).memoizedState=Fs(n),a.childLanes=Bs(e,r,n),t.memoizedState=Is,i):(is(t),$s(t,u))}if(null!==(o=e.memoizedState)&&null!==(u=o.dehydrated)){if(s)256&t.flags?(is(t),t.flags&=-257,t=Hs(e,t,n)):null!==t.memoizedState?(ls(),t.child=e.child,t.flags|=128,t=null):(ls(),a=i.fallback,u=t.mode,i=Vs({mode:"visible",children:i.children},u),(a=jr(a,u,n,null)).flags|=2,i.return=t,a.return=t,i.sibling=a,t.child=i,es(t,e.child,null,n),(i=t.child).memoizedState=Fs(n),i.childLanes=Bs(e,r,n),t.memoizedState=Is,t=a);else if(is(t),md(u)){if(r=u.nextSibling&&u.nextSibling.dataset)var c=r.dgst;r=c,(i=Error(l(419))).stack="",i.digest=r,hi({value:i,source:null,stack:null}),t=Hs(e,t,n)}else if(Es||Si(e,t,n,!1),r=0!==(n&e.childLanes),Es||r){if(null!==(r=nu)&&0!==(i=0!==((i=42&(i=n&-n)?1:Ce(i))&(r.suspendedLanes|n))?0:i)&&i!==o.retryLane)throw o.retryLane=i,Lr(e,i),Du(r,0,i),xs;"$?"===u.data||qu(),t=Hs(e,t,n)}else"$?"===u.data?(t.flags|=192,t.child=e.child,t=null):(e=o.treeContext,ri=gd(u.nextSibling),ni=t,ii=!0,ai=null,li=!1,null!==e&&(Wr[Yr++]=Qr,Wr[Yr++]=Kr,Wr[Yr++]=Xr,Qr=e.id,Kr=e.overflow,Xr=t),(t=$s(t,i.children)).flags|=4096);return t}return a?(ls(),a=i.fallback,u=t.mode,c=(o=e.child).sibling,(i=Ir(o,{mode:"hidden",children:i.children})).subtreeFlags=65011712&o.subtreeFlags,null!==c?a=Ir(c,a):(a=jr(a,u,n,null)).flags|=2,a.return=t,i.return=t,i.sibling=a,t.child=i,i=a,a=t.child,null===(u=e.child.memoizedState)?u=Fs(n):(null!==(o=u.cachePool)?(c=zi._currentValue,o=o.parent!==c?{parent:c,pool:c}:o):o=Hi(),u={baseLanes:u.baseLanes|n,cachePool:o}),a.memoizedState=u,a.childLanes=Bs(e,r,n),t.memoizedState=Is,i):(is(t),e=(n=e.child).sibling,(n=Ir(n,{mode:"visible",children:i.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function $s(e,t){return(t=Vs({mode:"visible",children:t},e.mode)).return=e,e.child=t}function Vs(e,t){return(e=Dr(22,e,null,t)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function Hs(e,t,n){return es(t,e.child,null,n),(e=$s(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Gs(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),wi(e.return,t,n)}function Us(e,t,n,r,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i)}function qs(e,t,n){var r=t.pendingProps,i=r.revealOrder,a=r.tail;if(Ts(e,t,r.children,n),2&(r=os.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Gs(e,n,t);else if(19===e.tag)Gs(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(j(os,r),i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===us(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Us(t,!1,i,n,a);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===us(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Us(t,!0,n,null,a);break;case"together":Us(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ws(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),fu|=t.lanes,0===(n&t.childLanes)){if(null===e)return null;if(Si(e,t,n,!1),0===(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=Ir(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ir(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ys(e,t){return 0!==(e.lanes&t)||!(null===(e=e.dependencies)||!ki(e))}function Xs(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Es=!0;else{if(!(Ys(e,n)||128&t.flags))return Es=!1,function(e,t,n){switch(t.tag){case 3:U(t,t.stateNode.containerInfo),yi(0,zi,e.memoizedState.cache),fi();break;case 27:case 5:W(t);break;case 4:U(t,t.stateNode.containerInfo);break;case 10:yi(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(is(t),t.flags|=128,null):0!==(n&t.child.childLanes)?js(e,t,n):(is(t),null!==(e=Ws(e,t,n))?e.sibling:null);is(t);break;case 19:var i=!!(128&e.flags);if((r=0!==(n&t.childLanes))||(Si(e,t,n,!1),r=0!==(n&t.childLanes)),i){if(r)return qs(e,t,n);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),j(os,os.current),r)break;return null;case 22:case 23:return t.lanes=0,Ls(e,t,n);case 24:yi(0,zi,e.memoizedState.cache)}return Ws(e,t,n)}(e,t,n);Es=!!(131072&e.flags)}else Es=!1,ii&&1048576&t.flags&&Jr(t,qr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,i=r._init;if(r=i(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((i=r.$$typeof)===_){t.tag=11,t=Cs(null,t,r,e,n);break e}if(i===x){t.tag=14,t=Ps(null,t,r,e,n);break e}}throw t=z(r)||r,Error(l(306,t,""))}Rr(r)?(e=hs(r,e),t.tag=1,t=Ds(null,t,r,e,n)):(t.tag=0,t=Ns(null,t,r,e,n))}return t;case 0:return Ns(e,t,t.type,t.pendingProps,n);case 1:return Ds(e,t,r=t.type,i=hs(r,t.pendingProps),n);case 3:e:{if(U(t,t.stateNode.containerInfo),null===e)throw Error(l(387));r=t.pendingProps;var a=t.memoizedState;i=a.element,na(e,t),ua(t,r,null,n);var s=t.memoizedState;if(r=s.cache,yi(0,zi,r),r!==a.cache&&_i(t,[zi],n,!0),oa(),r=s.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:s.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Rs(e,t,r,n);break e}if(r!==i){hi(i=kr(Error(l(424)),t)),t=Rs(e,t,r,n);break e}for(e=9===(e=t.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,ri=gd(e.firstChild),ni=t,ii=!0,ai=null,li=!0,n=ts(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(fi(),r===i){t=Ws(e,t,n);break e}Ts(e,t,r,n)}t=t.child}return t;case 26:return Os(e,t),null===e?(n=Cd(t.type,null,t.pendingProps,null))?t.memoizedState=n:ii||(n=t.type,e=t.pendingProps,(r=nd(H.current).createElement(n))[ze]=t,r[Oe]=e,Jc(r,n,e),Ge(r),t.stateNode=r):t.memoizedState=Cd(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return W(t),null===e&&ii&&(r=t.stateNode=bd(t.type,t.pendingProps,H.current),ni=t,li=!0,i=ri,fd(t.type)?(vd=i,ri=gd(r.firstChild)):ri=i),Ts(e,t,t.pendingProps.children,n),Os(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&ii&&((i=r=ri)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var i=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Fe])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==i.rel||e.getAttribute("href")!==(null==i.href||""===i.href?null:i.href)||e.getAttribute("crossorigin")!==(null==i.crossOrigin?null:i.crossOrigin)||e.getAttribute("title")!==(null==i.title?null:i.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==i.src?null:i.src)||e.getAttribute("type")!==(null==i.type?null:i.type)||e.getAttribute("crossorigin")!==(null==i.crossOrigin?null:i.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var a=null==i.name?null:""+i.name;if("hidden"===i.type&&e.getAttribute("name")===a)return e}if(null===(e=gd(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,li))?(t.stateNode=r,ni=t,ri=gd(r.firstChild),li=!1,i=!0):i=!1),i||oi(t)),W(t),i=t.type,a=t.pendingProps,s=null!==e?e.memoizedProps:null,r=a.children,ad(i,a)?r=null:null!==s&&ad(i,s)&&(t.flags|=32),null!==t.memoizedState&&(i=La(e,t,Na,null,null,n),Wd._currentValue=i),Os(e,t),Ts(e,t,r,n),t.child;case 6:return null===e&&ii&&((e=n=ri)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=gd(e.nextSibling)))return null}return e}(n,t.pendingProps,li))?(t.stateNode=n,ni=t,ri=null,e=!0):e=!1),e||oi(t)),null;case 13:return js(e,t,n);case 4:return U(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=es(t,null,r,n):Ts(e,t,r,n),t.child;case 11:return Cs(e,t,t.type,t.pendingProps,n);case 7:return Ts(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ts(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,yi(0,t.type,r.value),Ts(e,t,r.children,n),t.child;case 9:return i=t.type._context,r=t.pendingProps.children,xi(t),r=r(i=Ei(i)),t.flags|=1,Ts(e,t,r,n),t.child;case 14:return Ps(e,t,t.type,t.pendingProps,n);case 15:return Ms(e,t,t.type,t.pendingProps,n);case 19:return qs(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((n=Vs(r,n)).ref=t.ref,t.child=n,n.return=t,t=n):((n=Ir(e.child,r)).ref=t.ref,t.child=n,n.return=t,t=n),t;case 22:return Ls(e,t,n);case 24:return xi(t),r=Ei(zi),null===e?(null===(i=$i())&&(i=nu,a=Oi(),i.pooledCache=a,a.refCount++,null!==a&&(i.pooledCacheLanes|=n),i=a),t.memoizedState={parent:r,cache:i},ta(t),yi(0,zi,i)):(0!==(e.lanes&n)&&(na(e,t),ua(t,null,null,n),oa()),i=e.memoizedState,a=t.memoizedState,i.parent!==r?(i={parent:r,cache:r},t.memoizedState=i,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=i),yi(0,zi,r)):(r=a.cache,yi(0,zi,r),r!==i.cache&&_i(t,[zi],n,!0))),Ts(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(l(156,t.tag))}function Qs(e){e.flags|=4}function Ks(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!jd(t)){if(null!==(t=ns.current)&&((4194048&iu)===iu?null!==rs:(62914560&iu)!==iu&&!(536870912&iu)||t!==rs))throw Ki=Wi,Ui;e.flags|=8192}}function Zs(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Se():536870912,e.lanes|=t,gu|=t)}function Js(e,t){if(!ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function eo(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=65011712&i.subtreeFlags,r|=65011712&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function to(e,t,n){var r=t.pendingProps;switch(ti(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return eo(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),bi(zi),q(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(di(t)?Qs(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,pi())),eo(t),null;case 26:return n=t.memoizedState,null===e?(Qs(t),null!==n?(eo(t),Ks(t,n)):(eo(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Qs(t),eo(t),Ks(t,n)):(eo(t),t.flags&=-16777217):(e.memoizedProps!==r&&Qs(t),eo(t),t.flags&=-16777217),null;case 27:Y(t),n=H.current;var i=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Qs(t);else{if(!r){if(null===t.stateNode)throw Error(l(166));return eo(t),null}e=$.current,di(t)?ui(t):(e=bd(i,r,n),t.stateNode=e,Qs(t))}return eo(t),null;case 5:if(Y(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Qs(t);else{if(!r){if(null===t.stateNode)throw Error(l(166));return eo(t),null}if(e=$.current,di(t))ui(t);else{switch(i=nd(H.current),e){case 1:e=i.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=i.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=i.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=i.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=i.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?i.createElement("select",{is:r.is}):i.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?i.createElement(n,{is:r.is}):i.createElement(n)}}e[ze]=t,e[Oe]=r;e:for(i=t.child;null!==i;){if(5===i.tag||6===i.tag)e.appendChild(i.stateNode);else if(4!==i.tag&&27!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break e;for(;null===i.sibling;){if(null===i.return||i.return===t)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}t.stateNode=e;e:switch(Jc(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Qs(t)}}return eo(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Qs(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));if(e=H.current,di(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(i=ni))switch(i.tag){case 27:case 5:r=i.memoizedProps}e[ze]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Xc(e.nodeValue,n)))||oi(t)}else(e=nd(e).createTextNode(r))[ze]=t,t.stateNode=e}return eo(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(i=di(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(l(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(l(317));i[ze]=t}else fi(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;eo(t),i=!1}else i=pi(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=i),i=!0;if(!i)return 256&t.flags?(ss(t),t):(ss(t),null)}if(ss(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){i=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(i=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==i&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Zs(t,t.updateQueue),eo(t),null;case 4:return q(),null===e&&Bc(t.stateNode.containerInfo),eo(t),null;case 10:return bi(t.type),eo(t),null;case 19:if(B(os),null===(i=t.memoizedState))return eo(t),null;if(r=!!(128&t.flags),null===(a=i.rendering))if(r)Js(i,!1);else{if(0!==du||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(a=us(e))){for(t.flags|=128,Js(i,!1),e=a.updateQueue,t.updateQueue=e,Zs(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Fr(n,e),n=n.sibling;return j(os,1&os.current|2),t.child}e=e.sibling}null!==i.tail&&ee()>_u&&(t.flags|=128,r=!0,Js(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=us(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Zs(t,e),Js(i,!0),null===i.tail&&"hidden"===i.tailMode&&!a.alternate&&!ii)return eo(t),null}else 2*ee()-i.renderingStartTime>_u&&536870912!==n&&(t.flags|=128,r=!0,Js(i,!1),t.lanes=4194304);i.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=i.last)?e.sibling=a:t.child=a,i.last=a)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=ee(),t.sibling=null,e=os.current,j(os,r?1&e|2:1&e),t):(eo(t),null);case 22:case 23:return ss(t),ga(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(eo(t),6&t.subtreeFlags&&(t.flags|=8192)):eo(t),null!==(n=t.updateQueue)&&Zs(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&B(ji),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),bi(zi),eo(t),null;case 25:case 30:return null}throw Error(l(156,t.tag))}function no(e,t){switch(ti(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return bi(zi),q(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return Y(t),null;case 13:if(ss(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(l(340));fi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return B(os),null;case 4:return q(),null;case 10:return bi(t.type),null;case 22:case 23:return ss(t),ga(),null!==e&&B(ji),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return bi(zi),null;default:return null}}function ro(e,t){switch(ti(t),t.tag){case 3:bi(zi),q();break;case 26:case 27:case 5:Y(t);break;case 4:q();break;case 13:ss(t);break;case 19:B(os);break;case 10:bi(t.type);break;case 22:case 23:ss(t),ga(),null!==e&&B(ji);break;case 24:bi(zi)}}function io(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var i=r.next;n=i;do{if((n.tag&e)===e){r=void 0;var a=n.create,l=n.inst;r=a(),l.destroy=r}n=n.next}while(n!==i)}}catch(e){uc(t,t.return,e)}}function ao(e,t,n){try{var r=t.updateQueue,i=null!==r?r.lastEffect:null;if(null!==i){var a=i.next;r=a;do{if((r.tag&e)===e){var l=r.inst,s=l.destroy;if(void 0!==s){l.destroy=void 0,i=t;var o=n,u=s;try{u()}catch(e){uc(i,o,e)}}}r=r.next}while(r!==a)}}catch(e){uc(t,t.return,e)}}function lo(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{da(t,n)}catch(t){uc(e,e.return,t)}}}function so(e,t,n){n.props=hs(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){uc(e,t,n)}}function oo(e,t){try{var n=e.ref;if(null!==n){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof n?e.refCleanup=n(r):n.current=r}}catch(n){uc(e,t,n)}}function uo(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){uc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){uc(e,t,n)}else n.current=null}function co(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){uc(e,e.return,t)}}function fo(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var i=null,a=null,s=null,o=null,u=null,c=null,d=null;for(h in n){var f=n[h];if(n.hasOwnProperty(h)&&null!=f)switch(h){case"checked":case"value":break;case"defaultValue":u=f;default:r.hasOwnProperty(h)||Kc(e,t,h,null,r,f)}}for(var p in r){var h=r[p];if(f=n[p],r.hasOwnProperty(p)&&(null!=h||null!=f))switch(p){case"type":a=h;break;case"name":i=h;break;case"checked":c=h;break;case"defaultChecked":d=h;break;case"value":s=h;break;case"defaultValue":o=h;break;case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(l(137,t));break;default:h!==f&&Kc(e,t,p,h,r,f)}}return void mt(e,s,o,u,c,d,a,i);case"select":for(a in h=s=o=p=null,n)if(u=n[a],n.hasOwnProperty(a)&&null!=u)switch(a){case"value":break;case"multiple":h=u;default:r.hasOwnProperty(a)||Kc(e,t,a,null,r,u)}for(i in r)if(a=r[i],u=n[i],r.hasOwnProperty(i)&&(null!=a||null!=u))switch(i){case"value":p=a;break;case"defaultValue":o=a;break;case"multiple":s=a;default:a!==u&&Kc(e,t,i,a,r,u)}return t=o,n=s,r=h,void(null!=p?yt(e,!!n,p,!1):!!r!=!!n&&(null!=t?yt(e,!!n,t,!0):yt(e,!!n,n?[]:"",!1)));case"textarea":for(o in h=p=null,n)if(i=n[o],n.hasOwnProperty(o)&&null!=i&&!r.hasOwnProperty(o))switch(o){case"value":case"children":break;default:Kc(e,t,o,null,r,i)}for(s in r)if(i=r[s],a=n[s],r.hasOwnProperty(s)&&(null!=i||null!=a))switch(s){case"value":p=i;break;case"defaultValue":h=i;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=i)throw Error(l(91));break;default:i!==a&&Kc(e,t,s,i,r,a)}return void bt(e,p,h);case"option":for(var m in n)p=n[m],n.hasOwnProperty(m)&&null!=p&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:Kc(e,t,m,null,r,p));for(u in r)p=r[u],h=n[u],!r.hasOwnProperty(u)||p===h||null==p&&null==h||("selected"===u?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Kc(e,t,u,p,r,h));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Kc(e,t,g,null,r,p);for(c in r)if(p=r[c],h=n[c],r.hasOwnProperty(c)&&p!==h&&(null!=p||null!=h))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(l(137,t));break;default:Kc(e,t,c,p,r,h)}return;default:if(Et(t)){for(var v in n)p=n[v],n.hasOwnProperty(v)&&void 0!==p&&!r.hasOwnProperty(v)&&Zc(e,t,v,void 0,r,p);for(d in r)p=r[d],h=n[d],!r.hasOwnProperty(d)||p===h||void 0===p&&void 0===h||Zc(e,t,d,p,r,h);return}}for(var y in n)p=n[y],n.hasOwnProperty(y)&&null!=p&&!r.hasOwnProperty(y)&&Kc(e,t,y,null,r,p);for(f in r)p=r[f],h=n[f],!r.hasOwnProperty(f)||p===h||null==p&&null==h||Kc(e,t,f,p,r,h)}(r,e.type,n,t),r[Oe]=t}catch(t){uc(e,e.return,t)}}function po(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&fd(e.type)||4===e.tag}function ho(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||po(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&fd(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function mo(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Qc));else if(4!==r&&(27===r&&fd(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(mo(e,t,n),e=e.sibling;null!==e;)mo(e,t,n),e=e.sibling}function go(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&fd(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(go(e,t,n),e=e.sibling;null!==e;)go(e,t,n),e=e.sibling}function vo(e){var t=e.stateNode,n=e.memoizedProps;try{for(var r=e.type,i=t.attributes;i.length;)t.removeAttributeNode(i[0]);Jc(t,r,n),t[ze]=e,t[Oe]=n}catch(t){uc(e,e.return,t)}}var yo=!1,bo=!1,wo=!1,_o="function"==typeof WeakSet?WeakSet:Set,So=null;function ko(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:Ro(e,n),4&r&&io(5,n);break;case 1:if(Ro(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){uc(n,n.return,e)}else{var i=hs(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(i,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){uc(n,n.return,e)}}64&r&&lo(n),512&r&&oo(n,n.return);break;case 3:if(Ro(e,n),64&r&&null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:t=n.child.stateNode}try{da(e,t)}catch(e){uc(n,n.return,e)}}break;case 27:null===t&&4&r&&vo(n);case 26:case 5:Ro(e,n),null===t&&4&r&&co(n),512&r&&oo(n,n.return);break;case 12:Ro(e,n);break;case 13:Ro(e,n),4&r&&Mo(e,n),64&r&&null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if("$?"!==e.data||"complete"===n.readyState)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=pc.bind(null,n));break;case 22:if(!(r=null!==n.memoizedState||yo)){t=null!==t&&null!==t.memoizedState||bo,i=yo;var a=bo;yo=r,(bo=t)&&!a?Fo(e,n,!!(8772&n.subtreeFlags)):Ro(e,n),yo=i,bo=a}break;case 30:break;default:Ro(e,n)}}function xo(e){var t=e.alternate;null!==t&&(e.alternate=null,xo(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&Be(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var Eo=null,To=!1;function Co(e,t,n){for(n=n.child;null!==n;)Po(e,t,n),n=n.sibling}function Po(e,t,n){if(ce&&"function"==typeof ce.onCommitFiberUnmount)try{ce.onCommitFiberUnmount(ue,n)}catch(e){}switch(n.tag){case 26:bo||uo(n,t),Co(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:bo||uo(n,t);var r=Eo,i=To;fd(n.type)&&(Eo=n.stateNode,To=!1),Co(e,t,n),wd(n.stateNode),Eo=r,To=i;break;case 5:bo||uo(n,t);case 6:if(r=Eo,i=To,Eo=null,Co(e,t,n),To=i,null!==(Eo=r))if(To)try{(9===Eo.nodeType?Eo.body:"HTML"===Eo.nodeName?Eo.ownerDocument.body:Eo).removeChild(n.stateNode)}catch(e){uc(n,t,e)}else try{Eo.removeChild(n.stateNode)}catch(e){uc(n,t,e)}break;case 18:null!==Eo&&(To?(pd(9===(e=Eo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),Ef(e)):pd(Eo,n.stateNode));break;case 4:r=Eo,i=To,Eo=n.stateNode.containerInfo,To=!0,Co(e,t,n),Eo=r,To=i;break;case 0:case 11:case 14:case 15:bo||ao(2,n,t),bo||ao(4,n,t),Co(e,t,n);break;case 1:bo||(uo(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&so(n,t,r)),Co(e,t,n);break;case 21:Co(e,t,n);break;case 22:bo=(r=bo)||null!==n.memoizedState,Co(e,t,n),bo=r;break;default:Co(e,t,n)}}function Mo(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{Ef(e)}catch(e){uc(t,t.return,e)}}function Lo(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new _o),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new _o),t;default:throw Error(l(435,e.tag))}}(e);t.forEach(function(t){var r=hc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))})}function zo(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r],a=e,s=t,o=s;e:for(;null!==o;){switch(o.tag){case 27:if(fd(o.type)){Eo=o.stateNode,To=!1;break e}break;case 5:Eo=o.stateNode,To=!1;break e;case 3:case 4:Eo=o.stateNode.containerInfo,To=!0;break e}o=o.return}if(null===Eo)throw Error(l(160));Po(a,s,i),Eo=null,To=!1,null!==(a=i.alternate)&&(a.return=null),i.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)No(t,e),t=t.sibling}var Oo=null;function No(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:zo(t,e),Ao(e),4&r&&(ao(3,e,e.return),io(3,e),ao(5,e,e.return));break;case 1:zo(t,e),Ao(e),512&r&&(bo||null===n||uo(n,n.return)),64&r&&yo&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var i=Oo;if(zo(t,e),Ao(e),512&r&&(bo||null===n||uo(n,n.return)),4&r){var a=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,i=i.ownerDocument||i;t:switch(r){case"title":(!(a=i.getElementsByTagName("title")[0])||a[Fe]||a[ze]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=i.createElement(r),i.head.insertBefore(a,i.querySelector("head > title"))),Jc(a,r,n),a[ze]=e,Ge(a),r=a;break e;case"link":var s=Fd("link","href",i).get(r+(n.href||""));if(s)for(var o=0;o<s.length;o++)if((a=s[o]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&a.getAttribute("rel")===(null==n.rel?null:n.rel)&&a.getAttribute("title")===(null==n.title?null:n.title)&&a.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){s.splice(o,1);break t}Jc(a=i.createElement(r),r,n),i.head.appendChild(a);break;case"meta":if(s=Fd("meta","content",i).get(r+(n.content||"")))for(o=0;o<s.length;o++)if((a=s[o]).getAttribute("content")===(null==n.content?null:""+n.content)&&a.getAttribute("name")===(null==n.name?null:n.name)&&a.getAttribute("property")===(null==n.property?null:n.property)&&a.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&a.getAttribute("charset")===(null==n.charSet?null:n.charSet)){s.splice(o,1);break t}Jc(a=i.createElement(r),r,n),i.head.appendChild(a);break;default:throw Error(l(468,r))}a[ze]=e,Ge(a),r=a}e.stateNode=r}else Bd(i,e.type,e.stateNode);else e.stateNode=Nd(i,r,e.memoizedProps);else a!==r?(null===a?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):a.count--,null===r?Bd(i,e.type,e.stateNode):Nd(i,r,e.memoizedProps)):null===r&&null!==e.stateNode&&fo(e,e.memoizedProps,n.memoizedProps)}break;case 27:zo(t,e),Ao(e),512&r&&(bo||null===n||uo(n,n.return)),null!==n&&4&r&&fo(e,e.memoizedProps,n.memoizedProps);break;case 5:if(zo(t,e),Ao(e),512&r&&(bo||null===n||uo(n,n.return)),32&e.flags){i=e.stateNode;try{_t(i,"")}catch(t){uc(e,e.return,t)}}4&r&&null!=e.stateNode&&fo(e,i=e.memoizedProps,null!==n?n.memoizedProps:i),1024&r&&(wo=!0);break;case 6:if(zo(t,e),Ao(e),4&r){if(null===e.stateNode)throw Error(l(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){uc(e,e.return,t)}}break;case 3:if(Id=null,i=Oo,Oo=kd(t.containerInfo),zo(t,e),Oo=i,Ao(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ef(t.containerInfo)}catch(t){uc(e,e.return,t)}wo&&(wo=!1,Do(e));break;case 4:r=Oo,Oo=kd(e.stateNode.containerInfo),zo(t,e),Ao(e),Oo=r;break;case 12:default:zo(t,e),Ao(e);break;case 13:zo(t,e),Ao(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(wu=ee()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Lo(e,r));break;case 22:i=null!==e.memoizedState;var u=null!==n&&null!==n.memoizedState,c=yo,d=bo;if(yo=c||i,bo=d||u,zo(t,e),bo=d,yo=c,Ao(e),8192&r)e:for(t=e.stateNode,t._visibility=i?-2&t._visibility:1|t._visibility,i&&(null===n||u||yo||bo||Io(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){u=n=t;try{if(a=u.stateNode,i)"function"==typeof(s=a.style).setProperty?s.setProperty("display","none","important"):s.display="none";else{o=u.stateNode;var f=u.memoizedProps.style,p=null!=f&&f.hasOwnProperty("display")?f.display:null;o.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){uc(u,u.return,e)}}}else if(6===t.tag){if(null===n){u=t;try{u.stateNode.nodeValue=i?"":u.memoizedProps}catch(e){uc(u,u.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,Lo(e,n));break;case 19:zo(t,e),Ao(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Lo(e,r));case 30:case 21:}}function Ao(e){var t=e.flags;if(2&t){try{for(var n,r=e.return;null!==r;){if(po(r)){n=r;break}r=r.return}if(null==n)throw Error(l(160));switch(n.tag){case 27:var i=n.stateNode;go(e,ho(e),i);break;case 5:var a=n.stateNode;32&n.flags&&(_t(a,""),n.flags&=-33),go(e,ho(e),a);break;case 3:case 4:var s=n.stateNode.containerInfo;mo(e,ho(e),s);break;default:throw Error(l(161))}}catch(t){uc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Do(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;Do(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function Ro(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)ko(e,t.alternate,t),t=t.sibling}function Io(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:ao(4,t,t.return),Io(t);break;case 1:uo(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&so(t,t.return,n),Io(t);break;case 27:wd(t.stateNode);case 26:case 5:uo(t,t.return),Io(t);break;case 22:null===t.memoizedState&&Io(t);break;default:Io(t)}e=e.sibling}}function Fo(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,i=e,a=t,l=a.flags;switch(a.tag){case 0:case 11:case 15:Fo(i,a,n),io(4,a);break;case 1:if(Fo(i,a,n),"function"==typeof(i=(r=a).stateNode).componentDidMount)try{i.componentDidMount()}catch(e){uc(r,r.return,e)}if(null!==(i=(r=a).updateQueue)){var s=r.stateNode;try{var o=i.shared.hiddenCallbacks;if(null!==o)for(i.shared.hiddenCallbacks=null,i=0;i<o.length;i++)ca(o[i],s)}catch(e){uc(r,r.return,e)}}n&&64&l&&lo(a),oo(a,a.return);break;case 27:vo(a);case 26:case 5:Fo(i,a,n),n&&null===r&&4&l&&co(a),oo(a,a.return);break;case 12:Fo(i,a,n);break;case 13:Fo(i,a,n),n&&4&l&&Mo(i,a);break;case 22:null===a.memoizedState&&Fo(i,a,n),oo(a,a.return);break;case 30:break;default:Fo(i,a,n)}t=t.sibling}}function Bo(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Ni(n))}function jo(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ni(e))}function $o(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Vo(e,t,n,r),t=t.sibling}function Vo(e,t,n,r){var i=t.flags;switch(t.tag){case 0:case 11:case 15:$o(e,t,n,r),2048&i&&io(9,t);break;case 1:case 13:default:$o(e,t,n,r);break;case 3:$o(e,t,n,r),2048&i&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ni(e)));break;case 12:if(2048&i){$o(e,t,n,r),e=t.stateNode;try{var a=t.memoizedProps,l=a.id,s=a.onPostCommit;"function"==typeof s&&s(l,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){uc(t,t.return,e)}}else $o(e,t,n,r);break;case 23:break;case 22:a=t.stateNode,l=t.alternate,null!==t.memoizedState?2&a._visibility?$o(e,t,n,r):Go(e,t):2&a._visibility?$o(e,t,n,r):(a._visibility|=2,Ho(e,t,n,r,!!(10256&t.subtreeFlags))),2048&i&&Bo(l,t);break;case 24:$o(e,t,n,r),2048&i&&jo(t.alternate,t)}}function Ho(e,t,n,r,i){for(i=i&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var a=e,l=t,s=n,o=r,u=l.flags;switch(l.tag){case 0:case 11:case 15:Ho(a,l,s,o,i),io(8,l);break;case 23:break;case 22:var c=l.stateNode;null!==l.memoizedState?2&c._visibility?Ho(a,l,s,o,i):Go(a,l):(c._visibility|=2,Ho(a,l,s,o,i)),i&&2048&u&&Bo(l.alternate,l);break;case 24:Ho(a,l,s,o,i),i&&2048&u&&jo(l.alternate,l);break;default:Ho(a,l,s,o,i)}t=t.sibling}}function Go(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,i=r.flags;switch(r.tag){case 22:Go(n,r),2048&i&&Bo(r.alternate,r);break;case 24:Go(n,r),2048&i&&jo(r.alternate,r);break;default:Go(n,r)}t=t.sibling}}var Uo=8192;function qo(e){if(e.subtreeFlags&Uo)for(e=e.child;null!==e;)Wo(e),e=e.sibling}function Wo(e){switch(e.tag){case 26:qo(e),e.flags&Uo&&null!==e.memoizedState&&function(e,t,n){if(null===$d)throw Error(l(475));var r=$d;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var i=Pd(n.href),a=e.querySelector(Md(i));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Hd.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=a,void Ge(a);a=e.ownerDocument||e,n=Ld(n),(i=_d.get(i))&&Dd(n,i),Ge(a=a.createElement("link"));var s=a;s._p=new Promise(function(e,t){s.onload=e,s.onerror=t}),Jc(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Hd.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(Oo,e.memoizedState,e.memoizedProps);break;case 5:default:qo(e);break;case 3:case 4:var t=Oo;Oo=kd(e.stateNode.containerInfo),qo(e),Oo=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Uo,Uo=16777216,qo(e),Uo=t):qo(e))}}function Yo(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Xo(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];So=r,Zo(r,e)}Yo(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Qo(e),e=e.sibling}function Qo(e){switch(e.tag){case 0:case 11:case 15:Xo(e),2048&e.flags&&ao(9,e,e.return);break;case 3:case 12:default:Xo(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&2&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-3,Ko(e)):Xo(e)}}function Ko(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];So=r,Zo(r,e)}Yo(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:ao(8,t,t.return),Ko(t);break;case 22:2&(n=t.stateNode)._visibility&&(n._visibility&=-3,Ko(t));break;default:Ko(t)}e=e.sibling}}function Zo(e,t){for(;null!==So;){var n=So;switch(n.tag){case 0:case 11:case 15:ao(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Ni(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,So=r;else e:for(n=e;null!==So;){var i=(r=So).sibling,a=r.return;if(xo(r),r===n){So=null;break e}if(null!==i){i.return=a,So=i;break e}So=a}}}var Jo={getCacheForType:function(e){var t=Ei(zi),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},eu="function"==typeof WeakMap?WeakMap:Map,tu=0,nu=null,ru=null,iu=0,au=0,lu=null,su=!1,ou=!1,uu=!1,cu=0,du=0,fu=0,pu=0,hu=0,mu=0,gu=0,vu=null,yu=null,bu=!1,wu=0,_u=1/0,Su=null,ku=null,xu=0,Eu=null,Tu=null,Cu=0,Pu=0,Mu=null,Lu=null,zu=0,Ou=null;function Nu(){return 2&tu&&0!==iu?iu&-iu:null!==N.T?0!==Ri?Ri:Pc():Me()}function Au(){0===mu&&(mu=536870912&iu&&!ii?536870912:_e());var e=ns.current;return null!==e&&(e.flags|=32),mu}function Du(e,t,n){(e!==nu||2!==au&&9!==au)&&null===e.cancelPendingCommit||(Vu(e,0),Bu(e,iu,mu,!1)),xe(e,n),2&tu&&e===nu||(e===nu&&(!(2&tu)&&(pu|=n),4===du&&Bu(e,iu,mu,!1)),_c(e))}function Ru(e,t,n){if(6&tu)throw Error(l(327));for(var r=!n&&!(124&t)&&0===(t&e.expiredLanes)||be(e,t),i=r?function(e,t){var n=tu;tu|=2;var r=Gu(),i=Uu();nu!==e||iu!==t?(Su=null,_u=ee()+500,Vu(e,t)):ou=be(e,t);e:for(;;)try{if(0!==au&&null!==ru){t=ru;var a=lu;t:switch(au){case 1:au=0,lu=null,Zu(e,t,a,1);break;case 2:case 9:if(Yi(a)){au=0,lu=null,Ku(t);break}t=function(){2!==au&&9!==au||nu!==e||(au=7),_c(e)},a.then(t,t);break e;case 3:au=7;break e;case 4:au=5;break e;case 7:Yi(a)?(au=0,lu=null,Ku(t)):(au=0,lu=null,Zu(e,t,a,7));break;case 5:var s=null;switch(ru.tag){case 26:s=ru.memoizedState;case 5:case 27:var o=ru;if(!s||jd(s)){au=0,lu=null;var u=o.sibling;if(null!==u)ru=u;else{var c=o.return;null!==c?(ru=c,Ju(c)):ru=null}break t}}au=0,lu=null,Zu(e,t,a,5);break;case 6:au=0,lu=null,Zu(e,t,a,6);break;case 8:$u(),du=6;break e;default:throw Error(l(462))}}Xu();break}catch(t){Hu(e,t)}return vi=gi=null,N.H=r,N.A=i,tu=n,null!==ru?0:(nu=null,iu=0,Cr(),du)}(e,t):Wu(e,t,!0),a=r;;){if(0===i){ou&&!r&&Bu(e,t,0,!1);break}if(n=e.current.alternate,!a||Fu(n)){if(2===i){if(a=t,e.errorRecoveryDisabledLanes&a)var s=0;else s=0!=(s=-536870913&e.pendingLanes)?s:536870912&s?536870912:0;if(0!==s){t=s;e:{var o=e;i=vu;var u=o.current.memoizedState.isDehydrated;if(u&&(Vu(o,s).flags|=256),2!==(s=Wu(o,s,!1))){if(uu&&!u){o.errorRecoveryDisabledLanes|=a,pu|=a,i=4;break e}a=yu,yu=i,null!==a&&(null===yu?yu=a:yu.push.apply(yu,a))}i=s}if(a=!1,2!==i)continue}}if(1===i){Vu(e,0),Bu(e,t,0,!0);break}e:{switch(r=e,a=i){case 0:case 1:throw Error(l(345));case 4:if((4194048&t)!==t)break;case 6:Bu(r,t,mu,!su);break e;case 2:yu=null;break;case 3:case 5:break;default:throw Error(l(329))}if((62914560&t)===t&&10<(i=wu+300-ee())){if(Bu(r,t,mu,!su),0!==ye(r,0,!0))break e;r.timeoutHandle=sd(Iu.bind(null,r,n,yu,Su,bu,t,mu,pu,gu,su,a,2,-0,0),i)}else Iu(r,n,yu,Su,bu,t,mu,pu,gu,su,a,0,-0,0)}break}i=Wu(e,t,!1),a=!1}_c(e)}function Iu(e,t,n,r,i,a,s,o,u,c,d,f,p,h){if(e.timeoutHandle=-1,(8192&(f=t.subtreeFlags)||!(16785408&~f))&&($d={stylesheets:null,count:0,unsuspend:Vd},Wo(t),null!==(f=function(){if(null===$d)throw Error(l(475));var e=$d;return e.stylesheets&&0===e.count&&Ud(e,e.stylesheets),0<e.count?function(t){var n=setTimeout(function(){if(e.stylesheets&&Ud(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}},6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=f(tc.bind(null,e,t,a,n,r,i,s,o,u,d,1,p,h)),void Bu(e,a,s,!c);tc(e,t,a,n,r,i,s,o,u)}function Fu(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],a=i.getSnapshot;i=i.value;try{if(!Yn(a(),i))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Bu(e,t,n,r){t&=~hu,t&=~pu,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var i=t;0<i;){var a=31-fe(i),l=1<<a;r[a]=-1,i&=~l}0!==n&&Ee(e,n,t)}function ju(){return!!(6&tu)||(Sc(0,!1),!1)}function $u(){if(null!==ru){if(0===au)var e=ru.return;else vi=gi=null,Ra(e=ru),Wl=null,Yl=0,e=ru;for(;null!==e;)ro(e.alternate,e),e=e.return;ru=null}}function Vu(e,t){var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,od(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),$u(),nu=e,ru=n=Ir(e.current,null),iu=t,au=0,lu=null,su=!1,ou=be(e,t),uu=!1,gu=mu=hu=pu=fu=du=0,yu=vu=null,bu=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var i=31-fe(r),a=1<<i;t|=e[i],r&=~a}return cu=t,Cr(),n}function Hu(e,t){ya=null,N.H=Hl,t===Gi||t===qi?(t=Zi(),au=3):t===Ui?(t=Zi(),au=4):au=t===xs?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,lu=t,null===ru&&(du=1,bs(e,kr(t,e.current)))}function Gu(){var e=N.H;return N.H=Hl,null===e?Hl:e}function Uu(){var e=N.A;return N.A=Jo,e}function qu(){du=4,su||(4194048&iu)!==iu&&null!==ns.current||(ou=!0),!(134217727&fu)&&!(134217727&pu)||null===nu||Bu(nu,iu,mu,!1)}function Wu(e,t,n){var r=tu;tu|=2;var i=Gu(),a=Uu();nu===e&&iu===t||(Su=null,Vu(e,t)),t=!1;var l=du;e:for(;;)try{if(0!==au&&null!==ru){var s=ru,o=lu;switch(au){case 8:$u(),l=6;break e;case 3:case 2:case 9:case 6:null===ns.current&&(t=!0);var u=au;if(au=0,lu=null,Zu(e,s,o,u),n&&ou){l=0;break e}break;default:u=au,au=0,lu=null,Zu(e,s,o,u)}}Yu(),l=du;break}catch(t){Hu(e,t)}return t&&e.shellSuspendCounter++,vi=gi=null,tu=r,N.H=i,N.A=a,null===ru&&(nu=null,iu=0,Cr()),l}function Yu(){for(;null!==ru;)Qu(ru)}function Xu(){for(;null!==ru&&!Z();)Qu(ru)}function Qu(e){var t=Xs(e.alternate,e,cu);e.memoizedProps=e.pendingProps,null===t?Ju(e):ru=t}function Ku(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=As(n,t,t.pendingProps,t.type,void 0,iu);break;case 11:t=As(n,t,t.pendingProps,t.type.render,t.ref,iu);break;case 5:Ra(t);default:ro(n,t),t=Xs(n,t=ru=Fr(t,cu),cu)}e.memoizedProps=e.pendingProps,null===t?Ju(e):ru=t}function Zu(e,t,n,r){vi=gi=null,Ra(t),Wl=null,Yl=0;var i=t.return;try{if(function(e,t,n,r,i){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Si(t,n,i,!0),null!==(n=ns.current)){switch(n.tag){case 13:return null===rs?qu():null===n.alternate&&0===du&&(du=3),n.flags&=-257,n.flags|=65536,n.lanes=i,r===Wi?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),cc(e,r,i)),!1;case 22:return n.flags|=65536,r===Wi?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),cc(e,r,i)),!1}throw Error(l(435,n.tag))}return cc(e,r,i),qu(),!1}if(ii)return null!==(t=ns.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=i,r!==si&&hi(kr(e=Error(l(422),{cause:r}),n))):(r!==si&&hi(kr(t=Error(l(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,i&=-i,e.lanes|=i,r=kr(r,n),la(e,i=_s(e.stateNode,r,i)),4!==du&&(du=2)),!1;var a=Error(l(520),{cause:r});if(a=kr(a,n),null===vu?vu=[a]:vu.push(a),4!==du&&(du=2),null===t)return!0;r=kr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=i&-i,n.lanes|=e,la(n,e=_s(n.stateNode,r,e)),!1;case 1:if(t=n.type,a=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==ku&&ku.has(a))))return n.flags|=65536,i&=-i,n.lanes|=i,ks(i=Ss(i),e,n,r),la(n,i),!1}n=n.return}while(null!==n);return!1}(e,i,t,n,iu))return du=1,bs(e,kr(n,e.current)),void(ru=null)}catch(t){if(null!==i)throw ru=i,t;return du=1,bs(e,kr(n,e.current)),void(ru=null)}32768&t.flags?(ii||1===r?e=!0:ou||536870912&iu?e=!1:(su=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=ns.current)&&13===r.tag&&(r.flags|=16384)),ec(t,e)):Ju(t)}function Ju(e){var t=e;do{if(32768&t.flags)return void ec(t,su);e=t.return;var n=to(t.alternate,t,cu);if(null!==n)return void(ru=n);if(null!==(t=t.sibling))return void(ru=t);ru=t=e}while(null!==t);0===du&&(du=5)}function ec(e,t){do{var n=no(e.alternate,e);if(null!==n)return n.flags&=32767,void(ru=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(ru=e);ru=e=n}while(null!==e);du=6,ru=null}function tc(e,t,n,r,i,a,s,o,u){e.cancelPendingCommit=null;do{lc()}while(0!==xu);if(6&tu)throw Error(l(327));if(null!==t){if(t===e.current)throw Error(l(177));if(a=t.lanes|t.childLanes,function(e,t,n,r,i,a){var l=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var s=e.entanglements,o=e.expirationTimes,u=e.hiddenUpdates;for(n=l&~n;0<n;){var c=31-fe(n),d=1<<c;s[c]=0,o[c]=-1;var f=u[c];if(null!==f)for(u[c]=null,c=0;c<f.length;c++){var p=f[c];null!==p&&(p.lane&=-536870913)}n&=~d}0!==r&&Ee(e,r,0),0!==a&&0===i&&0!==e.tag&&(e.suspendedLanes|=a&~(l&~t))}(e,n,a|=Tr,s,o,u),e===nu&&(ru=nu=null,iu=0),Tu=t,Eu=e,Cu=n,Pu=a,Mu=i,Lu=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,Q(ie,function(){return sc(),null})):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=N.T,N.T=null,i=A.p,A.p=2,s=tu,tu|=4;try{!function(e,t){if(e=e.containerInfo,ed=Jd,er(e=Jn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var s=0,o=-1,u=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==i&&3!==f.nodeType||(o=s+i),f!==a||0!==r&&3!==f.nodeType||(u=s+r),3===f.nodeType&&(s+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===i&&(o=s),p===a&&++d===r&&(u=s),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===o||-1===u?null:{start:o,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(td={focusedElem:e,selectionRange:n},Jd=!1,So=t;null!==So;)if(e=(t=So).child,1024&t.subtreeFlags&&null!==e)e.return=t,So=e;else for(;null!==So;){switch(a=(t=So).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==a){e=void 0,n=t,i=a.memoizedProps,a=a.memoizedState,r=n.stateNode;try{var m=hs(n.type,i,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(m,a),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){uc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))hd(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":hd(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(l(163))}if(null!==(e=t.sibling)){e.return=t.return,So=e;break}So=t.return}}(e,t)}finally{tu=s,A.p=i,N.T=r}}xu=1,nc(),rc(),ic()}}function nc(){if(1===xu){xu=0;var e=Eu,t=Tu,n=!!(13878&t.flags);if(13878&t.subtreeFlags||n){n=N.T,N.T=null;var r=A.p;A.p=2;var i=tu;tu|=4;try{No(t,e);var a=td,l=Jn(e.containerInfo),s=a.focusedElem,o=a.selectionRange;if(l!==s&&s&&s.ownerDocument&&Zn(s.ownerDocument.documentElement,s)){if(null!==o&&er(s)){var u=o.start,c=o.end;if(void 0===c&&(c=u),"selectionStart"in s)s.selectionStart=u,s.selectionEnd=Math.min(c,s.value.length);else{var d=s.ownerDocument||document,f=d&&d.defaultView||window;if(f.getSelection){var p=f.getSelection(),h=s.textContent.length,m=Math.min(o.start,h),g=void 0===o.end?m:Math.min(o.end,h);!p.extend&&m>g&&(l=g,g=m,m=l);var v=Kn(s,m),y=Kn(s,g);if(v&&y&&(1!==p.rangeCount||p.anchorNode!==v.node||p.anchorOffset!==v.offset||p.focusNode!==y.node||p.focusOffset!==y.offset)){var b=d.createRange();b.setStart(v.node,v.offset),p.removeAllRanges(),m>g?(p.addRange(b),p.extend(y.node,y.offset)):(b.setEnd(y.node,y.offset),p.addRange(b))}}}}for(d=[],p=s;p=p.parentNode;)1===p.nodeType&&d.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof s.focus&&s.focus(),s=0;s<d.length;s++){var w=d[s];w.element.scrollLeft=w.left,w.element.scrollTop=w.top}}Jd=!!ed,td=ed=null}finally{tu=i,A.p=r,N.T=n}}e.current=t,xu=2}}function rc(){if(2===xu){xu=0;var e=Eu,t=Tu,n=!!(8772&t.flags);if(8772&t.subtreeFlags||n){n=N.T,N.T=null;var r=A.p;A.p=2;var i=tu;tu|=4;try{ko(e,t.alternate,t)}finally{tu=i,A.p=r,N.T=n}}xu=3}}function ic(){if(4===xu||3===xu){xu=0,J();var e=Eu,t=Tu,n=Cu,r=Lu;10256&t.subtreeFlags||10256&t.flags?xu=5:(xu=0,Tu=Eu=null,ac(e,e.pendingLanes));var i=e.pendingLanes;if(0===i&&(ku=null),Pe(n),t=t.stateNode,ce&&"function"==typeof ce.onCommitFiberRoot)try{ce.onCommitFiberRoot(ue,t,void 0,!(128&~t.current.flags))}catch(e){}if(null!==r){t=N.T,i=A.p,A.p=2,N.T=null;try{for(var a=e.onRecoverableError,l=0;l<r.length;l++){var s=r[l];a(s.value,{componentStack:s.stack})}}finally{N.T=t,A.p=i}}3&Cu&&lc(),_c(e),i=e.pendingLanes,4194090&n&&42&i?e===Ou?zu++:(zu=0,Ou=e):zu=0,Sc(0,!1)}}function ac(e,t){0===(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Ni(t))}function lc(e){return nc(),rc(),ic(),sc()}function sc(){if(5!==xu)return!1;var e=Eu,t=Pu;Pu=0;var n=Pe(Cu),r=N.T,i=A.p;try{A.p=32>n?32:n,N.T=null,n=Mu,Mu=null;var a=Eu,s=Cu;if(xu=0,Tu=Eu=null,Cu=0,6&tu)throw Error(l(331));var o=tu;if(tu|=4,Qo(a.current),Vo(a,a.current,s,n),tu=o,Sc(0,!1),ce&&"function"==typeof ce.onPostCommitFiberRoot)try{ce.onPostCommitFiberRoot(ue,a)}catch(e){}return!0}finally{A.p=i,N.T=r,ac(e,t)}}function oc(e,t,n){t=kr(n,t),null!==(e=ia(e,t=_s(e.stateNode,t,2),2))&&(xe(e,2),_c(e))}function uc(e,t,n){if(3===e.tag)oc(e,e,n);else for(;null!==t;){if(3===t.tag){oc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ku||!ku.has(r))){e=kr(n,e),null!==(r=ia(t,n=Ss(2),2))&&(ks(n,r,t,e),xe(r,2),_c(r));break}}t=t.return}}function cc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new eu;var i=new Set;r.set(t,i)}else void 0===(i=r.get(t))&&(i=new Set,r.set(t,i));i.has(n)||(uu=!0,i.add(n),e=dc.bind(null,e,t,n),t.then(e,e))}function dc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,nu===e&&(iu&n)===n&&(4===du||3===du&&(62914560&iu)===iu&&300>ee()-wu?!(2&tu)&&Vu(e,0):hu|=n,gu===iu&&(gu=0)),_c(e)}function fc(e,t){0===t&&(t=Se()),null!==(e=Lr(e,t))&&(xe(e,t),_c(e))}function pc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),fc(e,n)}function hc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(l(314))}null!==r&&r.delete(t),fc(e,n)}var mc=null,gc=null,vc=!1,yc=!1,bc=!1,wc=0;function _c(e){e!==gc&&null===e.next&&(null===gc?mc=gc=e:gc=gc.next=e),yc=!0,vc||(vc=!0,cd(function(){6&tu?Q(ne,kc):xc()}))}function Sc(e,t){if(!bc&&yc){bc=!0;do{for(var n=!1,r=mc;null!==r;){if(!t)if(0!==e){var i=r.pendingLanes;if(0===i)var a=0;else{var l=r.suspendedLanes,s=r.pingedLanes;a=(1<<31-fe(42|e)+1)-1,a=201326741&(a&=i&~(l&~s))?201326741&a|1:a?2|a:0}0!==a&&(n=!0,Cc(r,a))}else a=iu,!(3&(a=ye(r,r===nu?a:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||be(r,a)||(n=!0,Cc(r,a));r=r.next}}while(n);bc=!1}}function kc(){xc()}function xc(){yc=vc=!1;var e,t=0;0!==wc&&(((e=window.event)&&"popstate"===e.type?e!==ld&&(ld=e,!0):(ld=null,!1))&&(t=wc),wc=0);for(var n=ee(),r=null,i=mc;null!==i;){var a=i.next,l=Ec(i,n);0===l?(i.next=null,null===r?mc=a:r.next=a,null===a&&(gc=r)):(r=i,(0!==t||3&l)&&(yc=!0)),i=a}Sc(t,!1)}function Ec(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var l=31-fe(a),s=1<<l,o=i[l];-1===o?0!==(s&n)&&0===(s&r)||(i[l]=we(s,t)):o<=t&&(e.expiredLanes|=s),a&=~s}if(n=iu,n=ye(e,e===(t=nu)?n:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===n||e===t&&(2===au||9===au)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&K(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||be(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&K(r),Pe(n)){case 2:case 8:n=re;break;case 32:default:n=ie;break;case 268435456:n=le}return r=Tc.bind(null,e),n=Q(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&K(r),e.callbackPriority=2,e.callbackNode=null,2}function Tc(e,t){if(0!==xu&&5!==xu)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(lc()&&e.callbackNode!==n)return null;var r=iu;return 0===(r=ye(e,e===nu?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(Ru(e,r,t),Ec(e,ee()),null!=e.callbackNode&&e.callbackNode===n?Tc.bind(null,e):null)}function Cc(e,t){if(lc())return null;Ru(e,t,!0)}function Pc(){return 0===wc&&(wc=_e()),wc}function Mc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Pt(""+e)}function Lc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var zc=0;zc<wr.length;zc++){var Oc=wr[zc];_r(Oc.toLowerCase(),"on"+(Oc[0].toUpperCase()+Oc.slice(1)))}_r(fr,"onAnimationEnd"),_r(pr,"onAnimationIteration"),_r(hr,"onAnimationStart"),_r("dblclick","onDoubleClick"),_r("focusin","onFocus"),_r("focusout","onBlur"),_r(mr,"onTransitionRun"),_r(gr,"onTransitionStart"),_r(vr,"onTransitionCancel"),_r(yr,"onTransitionEnd"),Ye("onMouseEnter",["mouseout","mouseover"]),Ye("onMouseLeave",["mouseout","mouseover"]),Ye("onPointerEnter",["pointerout","pointerover"]),Ye("onPointerLeave",["pointerout","pointerover"]),We("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),We("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),We("onBeforeInput",["compositionend","keypress","textInput","paste"]),We("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),We("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),We("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Nc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ac=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Nc));function Dc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var l=r.length-1;0<=l;l--){var s=r[l],o=s.instance,u=s.currentTarget;if(s=s.listener,o!==a&&i.isPropagationStopped())break e;a=s,i.currentTarget=u;try{a(i)}catch(e){ms(e)}i.currentTarget=null,a=o}else for(l=0;l<r.length;l++){if(o=(s=r[l]).instance,u=s.currentTarget,s=s.listener,o!==a&&i.isPropagationStopped())break e;a=s,i.currentTarget=u;try{a(i)}catch(e){ms(e)}i.currentTarget=null,a=o}}}}function Rc(e,t){var n=t[Ae];void 0===n&&(n=t[Ae]=new Set);var r=e+"__bubble";n.has(r)||(jc(t,e,2,!1),n.add(r))}function Ic(e,t,n){var r=0;t&&(r|=4),jc(n,e,r,t)}var Fc="_reactListening"+Math.random().toString(36).slice(2);function Bc(e){if(!e[Fc]){e[Fc]=!0,Ue.forEach(function(t){"selectionchange"!==t&&(Ac.has(t)||Ic(t,!1,e),Ic(t,!0,e))});var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Fc]||(t[Fc]=!0,Ic("selectionchange",!1,t))}}function jc(e,t,n,r){switch(sf(t)){case 2:var i=ef;break;case 8:i=tf;break;default:i=nf}n=i.bind(null,t,n,e),i=void 0,!Ft||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function $c(e,t,n,r,i){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var o=r.stateNode.containerInfo;if(o===i)break;if(4===l)for(l=r.return;null!==l;){var u=l.tag;if((3===u||4===u)&&l.stateNode.containerInfo===i)return;l=l.return}for(;null!==o;){if(null===(l=je(o)))return;if(5===(u=l.tag)||6===u||26===u||27===u){r=a=l;continue e}o=o.parentNode}}r=r.return}Dt(function(){var r=a,i=Lt(n),l=[];e:{var o=br.get(e);if(void 0!==o){var u=Zt,c=e;switch(e){case"keypress":if(0===Gt(n))break e;case"keydown":case"keyup":u=hn;break;case"focusin":c="focus",u=an;break;case"focusout":c="blur",u=an;break;case"beforeblur":case"afterblur":u=an;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=nn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=gn;break;case fr:case pr:case hr:u=ln;break;case yr:u=vn;break;case"scroll":case"scrollend":u=en;break;case"wheel":u=yn;break;case"copy":case"cut":case"paste":u=sn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=mn;break;case"toggle":case"beforetoggle":u=bn}var d=!!(4&t),f=!d&&("scroll"===e||"scrollend"===e),p=d?null!==o?o+"Capture":null:o;d=[];for(var h,m=r;null!==m;){var g=m;if(h=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===h||null===p||null!=(g=Rt(m,p))&&d.push(Vc(m,g,h)),f)break;m=m.return}0<d.length&&(o=new u(o,c,null,n,i),l.push({event:o,listeners:d}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||n===Mt||!(c=n.relatedTarget||n.fromElement)||!je(c)&&!c[Ne])&&(u||o)&&(o=i.window===i?i:(o=i.ownerDocument)?o.defaultView||o.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?je(c):null)&&(f=s(c),d=c.tag,c!==f||5!==d&&27!==d&&6!==d)&&(c=null)):(u=null,c=r),u!==c)){if(d=nn,g="onMouseLeave",p="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(d=mn,g="onPointerLeave",p="onPointerEnter",m="pointer"),f=null==u?o:Ve(u),h=null==c?o:Ve(c),(o=new d(g,m+"leave",u,n,i)).target=f,o.relatedTarget=h,g=null,je(i)===r&&((d=new d(p,m+"enter",c,n,i)).target=h,d.relatedTarget=f,g=d),f=g,u&&c)e:{for(p=c,m=0,h=d=u;h;h=Gc(h))m++;for(h=0,g=p;g;g=Gc(g))h++;for(;0<m-h;)d=Gc(d),m--;for(;0<h-m;)p=Gc(p),h--;for(;m--;){if(d===p||null!==p&&d===p.alternate)break e;d=Gc(d),p=Gc(p)}d=null}else d=null;null!==u&&Uc(l,o,u,d,!1),null!==c&&null!==f&&Uc(l,f,c,d,!0)}if("select"===(u=(o=r?Ve(r):window).nodeName&&o.nodeName.toLowerCase())||"input"===u&&"file"===o.type)var v=In;else if(zn(o))if(Fn)v=Wn;else{v=Un;var y=Gn}else!(u=o.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==o.type&&"radio"!==o.type?r&&Et(r.elementType)&&(v=In):v=qn;switch(v&&(v=v(e,r))?On(l,v,n,i):(y&&y(e,o,r),"focusout"===e&&r&&"number"===o.type&&null!=r.memoizedProps.value&&vt(o,"number",o.value)),y=r?Ve(r):window,e){case"focusin":(zn(y)||"true"===y.contentEditable)&&(nr=y,rr=r,ir=null);break;case"focusout":ir=rr=nr=null;break;case"mousedown":ar=!0;break;case"contextmenu":case"mouseup":case"dragend":ar=!1,lr(l,n,i);break;case"selectionchange":if(tr)break;case"keydown":case"keyup":lr(l,n,i)}var b;if(_n)e:{switch(e){case"compositionstart":var w="onCompositionStart";break e;case"compositionend":w="onCompositionEnd";break e;case"compositionupdate":w="onCompositionUpdate";break e}w=void 0}else Mn?Cn(e,n)&&(w="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(w="onCompositionStart");w&&(xn&&"ko"!==n.locale&&(Mn||"onCompositionStart"!==w?"onCompositionEnd"===w&&Mn&&(b=Ht()):($t="value"in(jt=i)?jt.value:jt.textContent,Mn=!0)),0<(y=Hc(r,w)).length&&(w=new on(w,e,null,n,i),l.push({event:w,listeners:y}),(b||null!==(b=Pn(n)))&&(w.data=b))),(b=kn?function(e,t){switch(e){case"compositionend":return Pn(t);case"keypress":return 32!==t.which?null:(Tn=!0,En);case"textInput":return(e=t.data)===En&&Tn?null:e;default:return null}}(e,n):function(e,t){if(Mn)return"compositionend"===e||!_n&&Cn(e,t)?(e=Ht(),Vt=$t=jt=null,Mn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return xn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(w=Hc(r,"onBeforeInput")).length&&(y=new on("onBeforeInput","beforeinput",null,n,i),l.push({event:y,listeners:w}),y.data=b),function(e,t,n,r,i){if("submit"===t&&n&&n.stateNode===i){var a=Mc((i[Oe]||null).action),l=r.submitter;l&&null!==(t=(t=l[Oe]||null)?Mc(t.formAction):l.getAttribute("formAction"))&&(a=t,l=null);var s=new Zt("action","action",null,r,i);e.push({event:s,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==wc){var e=l?Lc(i,l):new FormData(i);Ml(n,{pending:!0,data:e,method:i.method,action:a},null,e)}}else"function"==typeof a&&(s.preventDefault(),e=l?Lc(i,l):new FormData(i),Ml(n,{pending:!0,data:e,method:i.method,action:a},a,e))},currentTarget:i}]})}}(l,e,r,n,i)}Dc(l,t)})}function Vc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hc(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,a=i.stateNode;if(5!==(i=i.tag)&&26!==i&&27!==i||null===a||(null!=(i=Rt(e,n))&&r.unshift(Vc(e,i,a)),null!=(i=Rt(e,t))&&r.push(Vc(e,i,a))),3===e.tag)return r;e=e.return}return[]}function Gc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Uc(e,t,n,r,i){for(var a=t._reactName,l=[];null!==n&&n!==r;){var s=n,o=s.alternate,u=s.stateNode;if(s=s.tag,null!==o&&o===r)break;5!==s&&26!==s&&27!==s||null===u||(o=u,i?null!=(u=Rt(n,a))&&l.unshift(Vc(n,u,o)):i||null!=(u=Rt(n,a))&&l.push(Vc(n,u,o))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var qc=/\r\n?/g,Wc=/\u0000|\uFFFD/g;function Yc(e){return("string"==typeof e?e:""+e).replace(qc,"\n").replace(Wc,"")}function Xc(e,t){return t=Yc(t),Yc(e)===t}function Qc(){}function Kc(e,t,n,r,i,a){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||_t(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&_t(e,""+r);break;case"className":tt(e,"class",r);break;case"tabIndex":tt(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":tt(e,n,r);break;case"style":xt(e,r,a);break;case"data":if("object"!==t){tt(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&Kc(e,t,"name",i.name,i,null),Kc(e,t,"formEncType",i.formEncType,i,null),Kc(e,t,"formMethod",i.formMethod,i,null),Kc(e,t,"formTarget",i.formTarget,i,null)):(Kc(e,t,"encType",i.encType,i,null),Kc(e,t,"method",i.method,i,null),Kc(e,t,"target",i.target,i,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Qc);break;case"onScroll":null!=r&&Rc("scroll",e);break;case"onScrollEnd":null!=r&&Rc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(l(61));if(null!=(n=r.__html)){if(null!=i.children)throw Error(l(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Pt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Rc("beforetoggle",e),Rc("toggle",e),et(e,"popover",r);break;case"xlinkActuate":nt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":nt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":nt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":nt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":nt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":nt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":nt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":nt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":nt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":et(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&et(e,n=Tt.get(n)||n,r)}}function Zc(e,t,n,r,i,a){switch(n){case"style":xt(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(l(61));if(null!=(n=r.__html)){if(null!=i.children)throw Error(l(60));e.innerHTML=n}}break;case"children":"string"==typeof r?_t(e,r):("number"==typeof r||"bigint"==typeof r)&&_t(e,""+r);break;case"onScroll":null!=r&&Rc("scroll",e);break;case"onScrollEnd":null!=r&&Rc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Qc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:qe.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(i=n.endsWith("Capture"),t=n.slice(2,i?n.length-7:void 0),"function"==typeof(a=null!=(a=e[Oe]||null)?a[n]:null)&&e.removeEventListener(t,a,i),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):et(e,n,r):("function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,i)))}}function Jc(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Rc("error",e),Rc("load",e);var r,i=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var s=n[r];if(null!=s)switch(r){case"src":i=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(l(137,t));default:Kc(e,t,r,s,n,null)}}return a&&Kc(e,t,"srcSet",n.srcSet,n,null),void(i&&Kc(e,t,"src",n.src,n,null));case"input":Rc("invalid",e);var o=r=s=a=null,u=null,c=null;for(i in n)if(n.hasOwnProperty(i)){var d=n[i];if(null!=d)switch(i){case"name":a=d;break;case"type":s=d;break;case"checked":u=d;break;case"defaultChecked":c=d;break;case"value":r=d;break;case"defaultValue":o=d;break;case"children":case"dangerouslySetInnerHTML":if(null!=d)throw Error(l(137,t));break;default:Kc(e,t,i,d,n,null)}}return gt(e,r,o,u,c,s,a,!1),void ct(e);case"select":for(a in Rc("invalid",e),i=s=r=null,n)if(n.hasOwnProperty(a)&&null!=(o=n[a]))switch(a){case"value":r=o;break;case"defaultValue":s=o;break;case"multiple":i=o;default:Kc(e,t,a,o,n,null)}return t=r,n=s,e.multiple=!!i,void(null!=t?yt(e,!!i,t,!1):null!=n&&yt(e,!!i,n,!0));case"textarea":for(s in Rc("invalid",e),r=a=i=null,n)if(n.hasOwnProperty(s)&&null!=(o=n[s]))switch(s){case"value":i=o;break;case"defaultValue":a=o;break;case"children":r=o;break;case"dangerouslySetInnerHTML":if(null!=o)throw Error(l(91));break;default:Kc(e,t,s,o,n,null)}return wt(e,i,a,r),void ct(e);case"option":for(u in n)n.hasOwnProperty(u)&&null!=(i=n[u])&&("selected"===u?e.selected=i&&"function"!=typeof i&&"symbol"!=typeof i:Kc(e,t,u,i,n,null));return;case"dialog":Rc("beforetoggle",e),Rc("toggle",e),Rc("cancel",e),Rc("close",e);break;case"iframe":case"object":Rc("load",e);break;case"video":case"audio":for(i=0;i<Nc.length;i++)Rc(Nc[i],e);break;case"image":Rc("error",e),Rc("load",e);break;case"details":Rc("toggle",e);break;case"embed":case"source":case"link":Rc("error",e),Rc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(i=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(l(137,t));default:Kc(e,t,c,i,n,null)}return;default:if(Et(t)){for(d in n)n.hasOwnProperty(d)&&void 0!==(i=n[d])&&Zc(e,t,d,i,n,void 0);return}}for(o in n)n.hasOwnProperty(o)&&null!=(i=n[o])&&Kc(e,t,o,i,n,null)}var ed=null,td=null;function nd(e){return 9===e.nodeType?e:e.ownerDocument}function rd(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function id(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function ad(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ld=null,sd="function"==typeof setTimeout?setTimeout:void 0,od="function"==typeof clearTimeout?clearTimeout:void 0,ud="function"==typeof Promise?Promise:void 0,cd="function"==typeof queueMicrotask?queueMicrotask:void 0!==ud?function(e){return ud.resolve(null).then(e).catch(dd)}:sd;function dd(e){setTimeout(function(){throw e})}function fd(e){return"head"===e}function pd(e,t){var n=t,r=0,i=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0<r&&8>r){n=r;var l=e.ownerDocument;if(1&n&&wd(l.documentElement),2&n&&wd(l.body),4&n)for(wd(n=l.head),l=n.firstChild;l;){var s=l.nextSibling,o=l.nodeName;l[Fe]||"SCRIPT"===o||"STYLE"===o||"LINK"===o&&"stylesheet"===l.rel.toLowerCase()||n.removeChild(l),l=s}}if(0===i)return e.removeChild(a),void Ef(t);i--}else"$"===n||"$?"===n||"$!"===n?i++:r=n.charCodeAt(0)-48;else r=0;n=a}while(n);Ef(t)}function hd(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":hd(n),Be(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function md(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function gd(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}var vd=null;function yd(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function bd(e,t,n){switch(t=nd(n),e){case"html":if(!(e=t.documentElement))throw Error(l(452));return e;case"head":if(!(e=t.head))throw Error(l(453));return e;case"body":if(!(e=t.body))throw Error(l(454));return e;default:throw Error(l(451))}}function wd(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);Be(e)}var _d=new Map,Sd=new Set;function kd(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var xd=A.d;A.d={f:function(){var e=xd.f(),t=ju();return e||t},r:function(e){var t=$e(e);null!==t&&5===t.tag&&"form"===t.type?zl(t):xd.r(e)},D:function(e){xd.D(e),Td("dns-prefetch",e,null)},C:function(e,t){xd.C(e,t),Td("preconnect",e,t)},L:function(e,t,n){xd.L(e,t,n);var r=Ed;if(r&&e&&t){var i='link[rel="preload"][as="'+ht(t)+'"]';"image"===t&&n&&n.imageSrcSet?(i+='[imagesrcset="'+ht(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(i+='[imagesizes="'+ht(n.imageSizes)+'"]')):i+='[href="'+ht(e)+'"]';var a=i;switch(t){case"style":a=Pd(e);break;case"script":a=zd(e)}_d.has(a)||(e=d({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),_d.set(a,e),null!==r.querySelector(i)||"style"===t&&r.querySelector(Md(a))||"script"===t&&r.querySelector(Od(a))||(Jc(t=r.createElement("link"),"link",e),Ge(t),r.head.appendChild(t)))}},m:function(e,t){xd.m(e,t);var n=Ed;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",i='link[rel="modulepreload"][as="'+ht(r)+'"][href="'+ht(e)+'"]',a=i;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=zd(e)}if(!_d.has(a)&&(e=d({rel:"modulepreload",href:e},t),_d.set(a,e),null===n.querySelector(i))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Od(a)))return}Jc(r=n.createElement("link"),"link",e),Ge(r),n.head.appendChild(r)}}},X:function(e,t){xd.X(e,t);var n=Ed;if(n&&e){var r=He(n).hoistableScripts,i=zd(e),a=r.get(i);a||((a=n.querySelector(Od(i)))||(e=d({src:e,async:!0},t),(t=_d.get(i))&&Rd(e,t),Ge(a=n.createElement("script")),Jc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(i,a))}},S:function(e,t,n){xd.S(e,t,n);var r=Ed;if(r&&e){var i=He(r).hoistableStyles,a=Pd(e);t=t||"default";var l=i.get(a);if(!l){var s={loading:0,preload:null};if(l=r.querySelector(Md(a)))s.loading=5;else{e=d({rel:"stylesheet",href:e,"data-precedence":t},n),(n=_d.get(a))&&Dd(e,n);var o=l=r.createElement("link");Ge(o),Jc(o,"link",e),o._p=new Promise(function(e,t){o.onload=e,o.onerror=t}),o.addEventListener("load",function(){s.loading|=1}),o.addEventListener("error",function(){s.loading|=2}),s.loading|=4,Ad(l,t,r)}l={type:"stylesheet",instance:l,count:1,state:s},i.set(a,l)}}},M:function(e,t){xd.M(e,t);var n=Ed;if(n&&e){var r=He(n).hoistableScripts,i=zd(e),a=r.get(i);a||((a=n.querySelector(Od(i)))||(e=d({src:e,async:!0,type:"module"},t),(t=_d.get(i))&&Rd(e,t),Ge(a=n.createElement("script")),Jc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(i,a))}}};var Ed="undefined"==typeof document?null:document;function Td(e,t,n){var r=Ed;if(r&&"string"==typeof t&&t){var i=ht(t);i='link[rel="'+e+'"][href="'+i+'"]',"string"==typeof n&&(i+='[crossorigin="'+n+'"]'),Sd.has(i)||(Sd.add(i),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(i)&&(Jc(t=r.createElement("link"),"link",e),Ge(t),r.head.appendChild(t)))}}function Cd(e,t,n,r){var i,a,s,o,u=(u=H.current)?kd(u):null;if(!u)throw Error(l(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=Pd(n.href),(r=(n=He(u).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=Pd(n.href);var c=He(u).hoistableStyles,d=c.get(e);if(d||(u=u.ownerDocument||u,d={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,d),(c=u.querySelector(Md(e)))&&!c._p&&(d.instance=c,d.state.loading=5),_d.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},_d.set(e,n),c||(i=u,a=e,s=n,o=d.state,i.querySelector('link[rel="preload"][as="style"]['+a+"]")?o.loading=1:(a=i.createElement("link"),o.preload=a,a.addEventListener("load",function(){return o.loading|=1}),a.addEventListener("error",function(){return o.loading|=2}),Jc(a,"link",s),Ge(a),i.head.appendChild(a))))),t&&null===r)throw Error(l(528,""));return d}if(t&&null!==r)throw Error(l(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=zd(n),(r=(n=He(u).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(l(444,e))}}function Pd(e){return'href="'+ht(e)+'"'}function Md(e){return'link[rel="stylesheet"]['+e+"]"}function Ld(e){return d({},e,{"data-precedence":e.precedence,precedence:null})}function zd(e){return'[src="'+ht(e)+'"]'}function Od(e){return"script[async]"+e}function Nd(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+ht(n.href)+'"]');if(r)return t.instance=r,Ge(r),r;var i=d({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Ge(r=(e.ownerDocument||e).createElement("style")),Jc(r,"style",i),Ad(r,n.precedence,e),t.instance=r;case"stylesheet":i=Pd(n.href);var a=e.querySelector(Md(i));if(a)return t.state.loading|=4,t.instance=a,Ge(a),a;r=Ld(n),(i=_d.get(i))&&Dd(r,i),Ge(a=(e.ownerDocument||e).createElement("link"));var s=a;return s._p=new Promise(function(e,t){s.onload=e,s.onerror=t}),Jc(a,"link",r),t.state.loading|=4,Ad(a,n.precedence,e),t.instance=a;case"script":return a=zd(n.src),(i=e.querySelector(Od(a)))?(t.instance=i,Ge(i),i):(r=n,(i=_d.get(a))&&Rd(r=d({},n),i),Ge(i=(e=e.ownerDocument||e).createElement("script")),Jc(i,"link",r),e.head.appendChild(i),t.instance=i);case"void":return null;default:throw Error(l(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Ad(r,n.precedence,e));return t.instance}function Ad(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),i=r.length?r[r.length-1]:null,a=i,l=0;l<r.length;l++){var s=r[l];if(s.dataset.precedence===t)a=s;else if(a!==i)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Dd(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Rd(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var Id=null;function Fd(e,t,n){if(null===Id){var r=new Map,i=Id=new Map;i.set(n,r)}else(r=(i=Id).get(n))||(r=new Map,i.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),i=0;i<n.length;i++){var a=n[i];if(!(a[Fe]||a[ze]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var l=a.getAttribute(t)||"";l=e+l;var s=r.get(l);s?s.push(a):r.set(l,[a])}}return r}function Bd(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function jd(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var $d=null;function Vd(){}function Hd(){if(this.count--,0===this.count)if(this.stylesheets)Ud(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Gd=null;function Ud(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Gd=new Map,t.forEach(qd,e),Gd=null,Hd.call(e))}function qd(e,t){if(!(4&t.state.loading)){var n=Gd.get(e);if(n)var r=n.get(null);else{n=new Map,Gd.set(e,n);for(var i=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<i.length;a++){var l=i[a];"LINK"!==l.nodeName&&"not all"===l.getAttribute("media")||(n.set(l.dataset.precedence,l),r=l)}r&&n.set(null,r)}l=(i=t.instance).getAttribute("data-precedence"),(a=n.get(l)||r)===r&&n.set(null,i),n.set(l,i),this.count++,r=Hd.bind(this),i.addEventListener("load",r),i.addEventListener("error",r),a?a.parentNode.insertBefore(i,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(i,e.firstChild),t.state.loading|=4}}var Wd={$$typeof:w,Provider:null,Consumer:null,_currentValue:D,_currentValue2:D,_threadCount:0};function Yd(e,t,n,r,i,a,l,s){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=ke(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ke(0),this.hiddenUpdates=ke(null),this.identifierPrefix=r,this.onUncaughtError=i,this.onCaughtError=a,this.onRecoverableError=l,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=s,this.incompleteTransitions=new Map}function Xd(e,t,n,r,i,a){i=function(e){return e?e=Nr:Nr}(i),null===r.context?r.context=i:r.pendingContext=i,(r=ra(t)).payload={element:n},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(n=ia(e,r,t))&&(Du(n,0,t),aa(n,e,t))}function Qd(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Kd(e,t){Qd(e,t),(e=e.alternate)&&Qd(e,t)}function Zd(e){if(13===e.tag){var t=Lr(e,67108864);null!==t&&Du(t,0,67108864),Kd(e,67108864)}}var Jd=!0;function ef(e,t,n,r){var i=N.T;N.T=null;var a=A.p;try{A.p=2,nf(e,t,n,r)}finally{A.p=a,N.T=i}}function tf(e,t,n,r){var i=N.T;N.T=null;var a=A.p;try{A.p=8,nf(e,t,n,r)}finally{A.p=a,N.T=i}}function nf(e,t,n,r){if(Jd){var i=rf(r);if(null===i)$c(e,t,r,af,n),gf(e,r);else if(function(e,t,n,r,i){switch(t){case"focusin":return uf=vf(uf,e,t,n,r,i),!0;case"dragenter":return cf=vf(cf,e,t,n,r,i),!0;case"mouseover":return df=vf(df,e,t,n,r,i),!0;case"pointerover":var a=i.pointerId;return ff.set(a,vf(ff.get(a)||null,e,t,n,r,i)),!0;case"gotpointercapture":return a=i.pointerId,pf.set(a,vf(pf.get(a)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r))r.stopPropagation();else if(gf(e,r),4&t&&-1<mf.indexOf(e)){for(;null!==i;){var a=$e(i);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var l=ve(a.pendingLanes);if(0!==l){var s=a;for(s.pendingLanes|=2,s.entangledLanes|=2;l;){var o=1<<31-fe(l);s.entanglements[1]|=o,l&=~o}_c(a),!(6&tu)&&(_u=ee()+500,Sc(0,!1))}}break;case 13:null!==(s=Lr(a,2))&&Du(s,0,2),ju(),Kd(a,2)}if(null===(a=rf(r))&&$c(e,t,r,af,n),a===i)break;i=a}null!==i&&r.stopPropagation()}else $c(e,t,r,null,n)}}function rf(e){return lf(e=Lt(e))}var af=null;function lf(e){if(af=null,null!==(e=je(e))){var t=s(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=o(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return af=e,null}function sf(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(te()){case ne:return 2;case re:return 8;case ie:case ae:return 32;case le:return 268435456;default:return 32}default:return 32}}var of=!1,uf=null,cf=null,df=null,ff=new Map,pf=new Map,hf=[],mf="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function gf(e,t){switch(e){case"focusin":case"focusout":uf=null;break;case"dragenter":case"dragleave":cf=null;break;case"mouseover":case"mouseout":df=null;break;case"pointerover":case"pointerout":ff.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":pf.delete(t.pointerId)}}function vf(e,t,n,r,i,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[i]},null!==t&&null!==(t=$e(t))&&Zd(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function yf(e){var t=je(e.target);if(null!==t){var n=s(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=o(n)))return e.blockedOn=t,void function(e){var t=A.p;try{return A.p=e,function(){if(13===n.tag){var e=Nu();e=Ce(e);var t=Lr(n,e);null!==t&&Du(t,0,e),Kd(n,e)}}()}finally{A.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function bf(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=rf(e.nativeEvent);if(null!==n)return null!==(t=$e(n))&&Zd(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Mt=r,n.target.dispatchEvent(r),Mt=null,t.shift()}return!0}function wf(e,t,n){bf(e)&&n.delete(t)}function _f(){of=!1,null!==uf&&bf(uf)&&(uf=null),null!==cf&&bf(cf)&&(cf=null),null!==df&&bf(df)&&(df=null),ff.forEach(wf),pf.forEach(wf)}function Sf(e,t){e.blockedOn===t&&(e.blockedOn=null,of||(of=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,_f)))}var kf=null;function xf(e){kf!==e&&(kf=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,function(){kf===e&&(kf=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],i=e[t+2];if("function"!=typeof r){if(null===lf(r||n))continue;break}var a=$e(n);null!==a&&(e.splice(t,3),t-=3,Ml(a,{pending:!0,data:i,method:n.method,action:r},r,i))}}))}function Ef(e){function t(t){return Sf(t,e)}null!==uf&&Sf(uf,e),null!==cf&&Sf(cf,e),null!==df&&Sf(df,e),ff.forEach(t),pf.forEach(t);for(var n=0;n<hf.length;n++){var r=hf[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<hf.length&&null===(n=hf[0]).blockedOn;)yf(n),null===n.blockedOn&&hf.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var i=n[r],a=n[r+1],l=i[Oe]||null;if("function"==typeof a)l||xf(n);else if(l){var s=null;if(a&&a.hasAttribute("formAction")){if(i=a,l=a[Oe]||null)s=l.formAction;else if(null!==lf(i))continue}else s=l.action;"function"==typeof s?n[r+1]=s:(n.splice(r,3),r-=3),xf(n)}}}function Tf(e){this._internalRoot=e}function Cf(e){this._internalRoot=e}Cf.prototype.render=Tf.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(l(409));Xd(t.current,Nu(),e,t,null,null)},Cf.prototype.unmount=Tf.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Xd(e.current,2,null,e,null,null),ju(),t[Ne]=null}},Cf.prototype.unstable_scheduleHydration=function(e){if(e){var t=Me();e={blockedOn:null,target:e,priority:t};for(var n=0;n<hf.length&&0!==t&&t<hf[n].priority;n++);hf.splice(n,0,e),0===n&&yf(e)}};var Pf=i.version;if("19.1.0"!==Pf)throw Error(l(527,Pf,"19.1.0"));A.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=s(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return u(i),e;if(a===r)return u(i),t;a=a.sibling}throw Error(l(188))}if(n.return!==r.return)n=i,r=a;else{for(var o=!1,c=i.child;c;){if(c===n){o=!0,n=i,r=a;break}if(c===r){o=!0,r=i,n=a;break}c=c.sibling}if(!o){for(c=a.child;c;){if(c===n){o=!0,n=a,r=i;break}if(c===r){o=!0,r=a,n=i;break}c=c.sibling}if(!o)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?c(e):null)?null:e.stateNode};var Mf={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:N,reconcilerVersion:"19.1.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Lf=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Lf.isDisabled&&Lf.supportsFiber)try{ue=Lf.inject(Mf),ce=Lf}catch(e){}}t.createRoot=function(e,t){if(!(n=e)||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(l(299));var n,r=!1,i="",a=gs,s=vs,o=ys;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(i=t.identifierPrefix),void 0!==t.onUncaughtError&&(a=t.onUncaughtError),void 0!==t.onCaughtError&&(s=t.onCaughtError),void 0!==t.onRecoverableError&&(o=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=function(e,t,n,r,i,a,l,s,o,u,c,d){return e=new Yd(e,t,n,l,s,o,u,d),t=1,!0===a&&(t|=24),a=Dr(3,null,null,t),e.current=a,a.stateNode=e,(t=Oi()).refCount++,e.pooledCache=t,t.refCount++,a.memoizedState={element:r,isDehydrated:n,cache:t},ta(a),e}(e,1,!1,null,0,r,i,a,s,o,0,null),e[Ne]=t.current,Bc(e),new Tf(t)}},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(!(0<a(i,t)))break e;e[r]=t,e[n]=i,n=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,l=i>>>1;r<l;){var s=2*(r+1)-1,o=e[s],u=s+1,c=e[u];if(0>a(o,n))u<i&&0>a(c,o)?(e[r]=c,e[u]=n,r=u):(e[r]=o,e[s]=n,r=s);else{if(!(u<i&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var s=Date,o=s.now();t.unstable_now=function(){return s.now()-o}}var u=[],c=[],d=1,f=null,p=3,h=!1,m=!1,g=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,w="undefined"!=typeof setImmediate?setImmediate:null;function _(e){for(var t=r(c);null!==t;){if(null===t.callback)i(c);else{if(!(t.startTime<=e))break;i(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function S(e){if(g=!1,_(e),!m)if(null!==r(u))m=!0,x||(x=!0,k());else{var t=r(c);null!==t&&O(S,t.startTime-e)}}var k,x=!1,E=-1,T=5,C=-1;function P(){return!(!v&&t.unstable_now()-C<T)}function M(){if(v=!1,x){var e=t.unstable_now();C=e;var n=!0;try{e:{m=!1,g&&(g=!1,b(E),E=-1),h=!0;var a=p;try{t:{for(_(e),f=r(u);null!==f&&!(f.expirationTime>e&&P());){var l=f.callback;if("function"==typeof l){f.callback=null,p=f.priorityLevel;var s=l(f.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof s){f.callback=s,_(e),n=!0;break t}f===r(u)&&i(u),_(e)}else i(u);f=r(u)}if(null!==f)n=!0;else{var o=r(c);null!==o&&O(S,o.startTime-e),n=!1}}break e}finally{f=null,p=a,h=!1}n=void 0}}finally{n?k():x=!1}}}if("function"==typeof w)k=function(){w(M)};else if("undefined"!=typeof MessageChannel){var L=new MessageChannel,z=L.port2;L.port1.onmessage=M,k=function(){z.postMessage(null)}}else k=function(){y(M,0)};function O(e,n){E=y(function(){e(t.unstable_now())},n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):T=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_requestPaint=function(){v=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,i,a){var l=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?l+a:l,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:i,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>l?(e.sortIndex=a,n(c,e),null===r(u)&&e===r(c)&&(g?(b(E),E=-1):g=!0,O(S,a-l))):(e.sortIndex=s,n(u,e),m||h||(m=!0,x||(x=!0,k()))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},540:(e,t,n)=>{e.exports=n(869)},698:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.fragment");function i(e,t,r){var i=null;if(void 0!==r&&(i=""+r),void 0!==t.key&&(i=""+t.key),"key"in t)for(var a in r={},t)"key"!==a&&(r[a]=t[a]);else r=t;return t=r.ref,{$$typeof:n,type:e,key:i,ref:void 0!==t?t:null,props:r}}t.Fragment=r,t.jsx=i,t.jsxs=i},848:(e,t,n)=>{e.exports=n(698)},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),s=Symbol.for("react.consumer"),o=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var w=b.prototype=new y;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var _=Array.isArray,S={H:null,A:null,T:null,S:null,V:null},k=Object.prototype.hasOwnProperty;function x(e,t,r,i,a,l){return r=l.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:l}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var T=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,function(e){return r[e]})):t.toString(36);var n,r}function P(){}function M(e,t,i,a,l){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var o,u,c=!1;if(null===e)c=!0;else switch(s){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case f:return M((c=e._init)(e._payload),t,i,a,l)}}if(c)return l=l(e),c=""===a?"."+C(e,0):a,_(l)?(i="",null!=c&&(i=c.replace(T,"$&/")+"/"),M(l,t,i,"",function(e){return e})):null!=l&&(E(l)&&(o=l,u=i+(null==l.key||e&&e.key===l.key?"":(""+l.key).replace(T,"$&/")+"/")+c,l=x(o.type,u,void 0,0,0,o.props)),t.push(l)),1;c=0;var d,h=""===a?".":a+":";if(_(e))for(var m=0;m<e.length;m++)c+=M(a=e[m],t,i,s=h+C(a,m),l);else if("function"==typeof(m=null===(d=e)||"object"!=typeof d?null:"function"==typeof(d=p&&d[p]||d["@@iterator"])?d:null))for(e=m.call(e),m=0;!(a=e.next()).done;)c+=M(a=a.value,t,i,s=h+C(a,m++),l);else if("object"===s){if("function"==typeof e.then)return M(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(P,P):(e.status="pending",e.then(function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)},function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)})),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,i,a,l);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function L(e,t,n){if(null==e)return e;var r=[],i=0;return M(e,r,"","",function(e){return t.call(n,e,i++)}),r}function z(e){if(-1===e._status){var t=e._result;(t=t()).then(function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)},function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)}),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function N(){}t.Children={map:L,forEach:function(e,t,n){L(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return L(e,function(){t++}),t},toArray:function(e){return L(e,function(e){return e})||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=i,t.Profiler=l,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=S,t.__COMPILER_RUNTIME={__proto__:null,c:function(e){return S.H.useMemoCache(e)}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=m({},e.props),i=e.key;if(null!=t)for(a in t.ref,void 0!==t.key&&(i=""+t.key),t)!k.call(t,a)||"key"===a||"__self"===a||"__source"===a||"ref"===a&&void 0===t.ref||(r[a]=t[a]);var a=arguments.length-2;if(1===a)r.children=n;else if(1<a){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+2];r.children=l}return x(e.type,i,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:o,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:s,_context:e},e},t.createElement=function(e,t,n){var r,i={},a=null;if(null!=t)for(r in void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var s=Array(l),o=0;o<l;o++)s[o]=arguments[o+2];i.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return x(e,a,void 0,0,0,i)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:z}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=S.T,n={};S.T=n;try{var r=e(),i=S.S;null!==i&&i(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(N,O)}catch(e){O(e)}finally{S.T=t}},t.unstable_useCacheRefresh=function(){return S.H.useCacheRefresh()},t.use=function(e){return S.H.use(e)},t.useActionState=function(e,t,n){return S.H.useActionState(e,t,n)},t.useCallback=function(e,t){return S.H.useCallback(e,t)},t.useContext=function(e){return S.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return S.H.useDeferredValue(e,t)},t.useEffect=function(e,t,n){var r=S.H;if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return S.H.useId()},t.useImperativeHandle=function(e,t,n){return S.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return S.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return S.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return S.H.useMemo(e,t)},t.useOptimistic=function(e,t){return S.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return S.H.useReducer(e,t,n)},t.useRef=function(e){return S.H.useRef(e)},t.useState=function(e){return S.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return S.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return S.H.useTransition()},t.version="19.1.0"},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{e.exports=n(477)}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}var r=n(848),i=n(338),a=n(540),l=[{id:1,title:"Литература",events:[{year:1825,description:"Пушкин завершает работу над первой главой «Евгения Онегина»."},{year:1869,description:"Выходит роман Льва Толстого «Война и мир»."},{year:1880,description:"Достоевский произносит знаменитую речь о Пушкине в Москве."},{year:1925,description:"Фицджеральд публикует роман «Великий Гэтсби»."},{year:1967,description:"Габриэль Гарсия Маркес выпускает роман «Сто лет одиночества»."}]},{id:2,title:"Музыка",events:[{year:1969,description:"The Beatles выпускают альбом «Abbey Road»."},{year:1977,description:"Премьера песни «We Will Rock You» группы Queen."},{year:1982,description:"Майкл Джексон выпускает «Thriller», самый продаваемый альбом в истории."},{year:1991,description:"Nirvana выпускают культовый альбом «Nevermind»."},{year:2016,description:"Дэвид Боуи выпускает свой последний альбом «Blackstar» за два дня до смерти."}]},{id:3,title:"Кино",events:[{year:1927,description:"Выходит первый звуковой фильм «Певец джаза»."},{year:1972,description:"Премьера «Крестного отца» Фрэнсиса Форда Копполы."},{year:1994,description:"«Криминальное чтиво» Квентина Тарантино завоёвывает Золотую пальмовую ветвь."},{year:2003,description:"«Властелин колец: Возвращение короля» выигрывает 11 «Оскаров»."},{year:2020,description:"Южнокорейский фильм «Паразиты» получает «Оскар» за лучший фильм."}]},{id:4,title:"Наука",events:[{year:1905,description:"Альберт Эйнштейн публикует теорию относительности."},{year:1953,description:"Уотсон и Крик раскрывают структуру ДНК."},{year:1969,description:"Нил Армстронг становится первым человеком, ступившим на Луну."},{year:2012,description:"CERN подтверждает открытие бозона Хиггса."},{year:2023,description:"Искусственный интеллект GPT-4 выходит в публичный доступ."}]},{id:5,title:"Технологии",events:[{year:1976,description:"Стив Джобс и Стив Возняк основывают компанию Apple."},{year:1991,description:"Создана первая веб-страница Тимом Бернерсом-Ли."},{year:2007,description:"Apple представляет первый iPhone."},{year:2015,description:"Илон Маск запускает проект Starlink."},{year:2021,description:"Facebook переименован в Meta и объявляет о развитии метавселенной."}]},{id:6,title:"Искусство",events:[{year:1503,description:"Леонардо да Винчи начинает писать «Мону Лизу»."},{year:1889,description:"Винсент Ван Гог пишет «Звёздную ночь»."},{year:1937,description:"Пабло Пикассо создаёт «Гернику» в ответ на бомбардировку города."},{year:1962,description:"Энди Уорхол представляет серию «Суп Кэмпбелл»."},{year:2021,description:"NFT-арт Beeple продаётся на аукционе за $69 миллионов."}]}];const s=(0,a.createContext)(null);function o(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var c,d,f,p,h,m,g,v,y,b,w,_,S,k,x,E,T,C={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},P={duration:.5,overwrite:!1,delay:0},M=1e8,L=1e-8,z=2*Math.PI,O=z/4,N=0,A=Math.sqrt,D=Math.cos,R=Math.sin,I=function(e){return"string"==typeof e},F=function(e){return"function"==typeof e},B=function(e){return"number"==typeof e},j=function(e){return void 0===e},$=function(e){return"object"==typeof e},V=function(e){return!1!==e},H=function(){return"undefined"!=typeof window},G=function(e){return F(e)||I(e)},U="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},q=Array.isArray,W=/(?:-?\.?\d|\.)+/gi,Y=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,X=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,Q=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,K=/[+-]=-?[.\d]+/,Z=/[^,'"\[\]\s]+/gi,J=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,ee={},te={},ne=function(e){return(te=Oe(e,ee))&&Nn},re=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},ie=function(e,t){return!t&&console.warn(e)},ae=function(e,t){return e&&(ee[e]=t)&&te&&(te[e]=t)||ee},le=function(){return 0},se={suppressEvents:!0,isStart:!0,kill:!1},oe={suppressEvents:!0,kill:!1},ue={suppressEvents:!0},ce={},de=[],fe={},pe={},he={},me=30,ge=[],ve="",ye=function(e){var t,n,r=e[0];if($(r)||F(r)||(e=[e]),!(t=(r._gsap||{}).harness)){for(n=ge.length;n--&&!ge[n].targetTest(r););t=ge[n]}for(n=e.length;n--;)e[n]&&(e[n]._gsap||(e[n]._gsap=new qt(e[n],t)))||e.splice(n,1);return e},be=function(e){return e._gsap||ye(ut(e))[0]._gsap},we=function(e,t,n){return(n=e[t])&&F(n)?e[t]():j(n)&&e.getAttribute&&e.getAttribute(t)||n},_e=function(e,t){return(e=e.split(",")).forEach(t)||e},Se=function(e){return Math.round(1e5*e)/1e5||0},ke=function(e){return Math.round(1e7*e)/1e7||0},xe=function(e,t){var n=t.charAt(0),r=parseFloat(t.substr(2));return e=parseFloat(e),"+"===n?e+r:"-"===n?e-r:"*"===n?e*r:e/r},Ee=function(e,t){for(var n=t.length,r=0;e.indexOf(t[r])<0&&++r<n;);return r<n},Te=function(){var e,t,n=de.length,r=de.slice(0);for(fe={},de.length=0,e=0;e<n;e++)(t=r[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},Ce=function(e){return!!(e._initted||e._startAt||e.add)},Pe=function(e,t,n,r){de.length&&!d&&Te(),e.render(t,n,r||!!(d&&t<0&&Ce(e))),de.length&&!d&&Te()},Me=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(Z).length<2?t:I(e)?e.trim():e},Le=function(e){return e},ze=function(e,t){for(var n in t)n in e||(e[n]=t[n]);return e},Oe=function(e,t){for(var n in t)e[n]=t[n];return e},Ne=function e(t,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(t[r]=$(n[r])?e(t[r]||(t[r]={}),n[r]):n[r]);return t},Ae=function(e,t){var n,r={};for(n in e)n in t||(r[n]=e[n]);return r},De=function(e){var t,n=e.parent||p,r=e.keyframes?(t=q(e.keyframes),function(e,n){for(var r in n)r in e||"duration"===r&&t||"ease"===r||(e[r]=n[r])}):ze;if(V(e.inherit))for(;n;)r(e,n.vars.defaults),n=n.parent||n._dp;return e},Re=function(e,t,n,r,i){void 0===n&&(n="_first"),void 0===r&&(r="_last");var a,l=e[r];if(i)for(a=t[i];l&&l[i]>a;)l=l._prev;return l?(t._next=l._next,l._next=t):(t._next=e[n],e[n]=t),t._next?t._next._prev=t:e[r]=t,t._prev=l,t.parent=t._dp=e,t},Ie=function(e,t,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i=t._prev,a=t._next;i?i._next=a:e[n]===t&&(e[n]=a),a?a._prev=i:e[r]===t&&(e[r]=i),t._next=t._prev=t.parent=null},Fe=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove&&e.parent.remove(e),e._act=0},Be=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var n=e;n;)n._dirty=1,n=n.parent;return e},je=function(e,t,n,r){return e._startAt&&(d?e._startAt.revert(oe):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,r))},$e=function e(t){return!t||t._ts&&e(t.parent)},Ve=function(e){return e._repeat?He(e._tTime,e=e.duration()+e._rDelay)*e:0},He=function(e,t){var n=Math.floor(e=ke(e/t));return e&&n===e?n-1:n},Ge=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},Ue=function(e){return e._end=ke(e._start+(e._tDur/Math.abs(e._ts||e._rts||L)||0))},qe=function(e,t){var n=e._dp;return n&&n.smoothChildTiming&&e._ts&&(e._start=ke(n._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),Ue(e),n._dirty||Be(n,e)),e},We=function(e,t){var n;if((t._time||!t._dur&&t._initted||t._start<e._time&&(t._dur||!t.add))&&(n=Ge(e.rawTime(),t),(!t._dur||at(0,t.totalDuration(),n)-t._tTime>L)&&t.render(n,!0)),Be(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(n=e;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;e._zTime=-1e-8}},Ye=function(e,t,n,r){return t.parent&&Fe(t),t._start=ke((B(n)?n:n||e!==p?nt(e,n,t):e._time)+t._delay),t._end=ke(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),Re(e,t,"_first","_last",e._sort?"_start":0),Ze(t)||(e._recent=t),r||We(e,t),e._ts<0&&qe(e,e._tTime),e},Xe=function(e,t){return(ee.ScrollTrigger||re("scrollTrigger",t))&&ee.ScrollTrigger.create(t,e)},Qe=function(e,t,n,r,i){return en(e,t,i),e._initted?!n&&e._pt&&!d&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&y!==Nt.frame?(de.push(e),e._lazy=[i,r],1):void 0:1},Ke=function e(t){var n=t.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||e(n))},Ze=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},Je=function(e,t,n,r){var i=e._repeat,a=ke(t)||0,l=e._tTime/e._tDur;return l&&!r&&(e._time*=a/e._dur),e._dur=a,e._tDur=i?i<0?1e10:ke(a*(i+1)+e._rDelay*i):a,l>0&&!r&&qe(e,e._tTime=e._tDur*l),e.parent&&Ue(e),n||Be(e.parent,e),e},et=function(e){return e instanceof Yt?Be(e):Je(e,e._dur)},tt={_start:0,endTime:le,totalDuration:le},nt=function e(t,n,r){var i,a,l,s=t.labels,o=t._recent||tt,u=t.duration()>=M?o.endTime(!1):t._dur;return I(n)&&(isNaN(n)||n in s)?(a=n.charAt(0),l="%"===n.substr(-1),i=n.indexOf("="),"<"===a||">"===a?(i>=0&&(n=n.replace(/=/,"")),("<"===a?o._start:o.endTime(o._repeat>=0))+(parseFloat(n.substr(1))||0)*(l?(i<0?o:r).totalDuration()/100:1)):i<0?(n in s||(s[n]=u),s[n]):(a=parseFloat(n.charAt(i-1)+n.substr(i+1)),l&&r&&(a=a/100*(q(r)?r[0]:r).totalDuration()),i>1?e(t,n.substr(0,i-1),r)+a:u+a)):null==n?u:+n},rt=function(e,t,n){var r,i,a=B(t[1]),l=(a?2:1)+(e<2?0:1),s=t[l];if(a&&(s.duration=t[1]),s.parent=n,e){for(r=s,i=n;i&&!("immediateRender"in r);)r=i.vars.defaults||{},i=V(i.vars.inherit)&&i.parent;s.immediateRender=V(r.immediateRender),e<2?s.runBackwards=1:s.startAt=t[l-1]}return new ln(t[0],s,t[l+1])},it=function(e,t){return e||0===e?t(e):t},at=function(e,t,n){return n<e?e:n>t?t:n},lt=function(e,t){return I(e)&&(t=J.exec(e))?t[1]:""},st=[].slice,ot=function(e,t){return e&&$(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&$(e[0]))&&!e.nodeType&&e!==h},ut=function(e,t,n){return f&&!t&&f.selector?f.selector(e):!I(e)||n||!m&&At()?q(e)?function(e,t,n){return void 0===n&&(n=[]),e.forEach(function(e){var r;return I(e)&&!t||ot(e,1)?(r=n).push.apply(r,ut(e)):n.push(e)})||n}(e,n):ot(e)?st.call(e,0):e?[e]:[]:st.call((t||g).querySelectorAll(e),0)},ct=function(e){return e=ut(e)[0]||ie("Invalid scope")||{},function(t){var n=e.current||e.nativeElement||e;return ut(t,n.querySelectorAll?n:n===e?ie("Invalid scope")||g.createElement("div"):e)}},dt=function(e){return e.sort(function(){return.5-Math.random()})},ft=function(e){if(F(e))return e;var t=$(e)?e:{each:e},n=$t(t.ease),r=t.from||0,i=parseFloat(t.base)||0,a={},l=r>0&&r<1,s=isNaN(r)||l,o=t.axis,u=r,c=r;return I(r)?u=c={center:.5,edges:.5,end:1}[r]||0:!l&&s&&(u=r[0],c=r[1]),function(e,l,d){var f,p,h,m,g,v,y,b,w,_=(d||t).length,S=a[_];if(!S){if(!(w="auto"===t.grid?0:(t.grid||[1,M])[1])){for(y=-M;y<(y=d[w++].getBoundingClientRect().left)&&w<_;);w<_&&w--}for(S=a[_]=[],f=s?Math.min(w,_)*u-.5:r%w,p=w===M?0:s?_*c/w-.5:r/w|0,y=0,b=M,v=0;v<_;v++)h=v%w-f,m=p-(v/w|0),S[v]=g=o?Math.abs("y"===o?m:h):A(h*h+m*m),g>y&&(y=g),g<b&&(b=g);"random"===r&&dt(S),S.max=y-b,S.min=b,S.v=_=(parseFloat(t.amount)||parseFloat(t.each)*(w>_?_-1:o?"y"===o?_/w:w:Math.max(w,_/w))||0)*("edges"===r?-1:1),S.b=_<0?i-_:i,S.u=lt(t.amount||t.each)||0,n=n&&_<0?Bt(n):n}return _=(S[e]-S.min)/S.max||0,ke(S.b+(n?n(_):_)*S.v)+S.u}},pt=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(n){var r=ke(Math.round(parseFloat(n)/e)*e*t);return(r-r%1)/t+(B(n)?0:lt(n))}},ht=function(e,t){var n,r,i=q(e);return!i&&$(e)&&(n=i=e.radius||M,e.values?(e=ut(e.values),(r=!B(e[0]))&&(n*=n)):e=pt(e.increment)),it(t,i?F(e)?function(t){return r=e(t),Math.abs(r-t)<=n?r:t}:function(t){for(var i,a,l=parseFloat(r?t.x:t),s=parseFloat(r?t.y:0),o=M,u=0,c=e.length;c--;)(i=r?(i=e[c].x-l)*i+(a=e[c].y-s)*a:Math.abs(e[c]-l))<o&&(o=i,u=c);return u=!n||o<=n?e[u]:t,r||u===t||B(t)?u:u+lt(t)}:pt(e))},mt=function(e,t,n,r){return it(q(e)?!t:!0===n?!!(n=0):!r,function(){return q(e)?e[~~(Math.random()*e.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((e-n/2+Math.random()*(t-e+.99*n))/n)*n*r)/r})},gt=function(e,t,n){return it(n,function(n){return e[~~t(n)]})},vt=function(e){for(var t,n,r,i,a=0,l="";~(t=e.indexOf("random(",a));)r=e.indexOf(")",t),i="["===e.charAt(t+7),n=e.substr(t+7,r-t-7).match(i?Z:W),l+=e.substr(a,t-a)+mt(i?n:+n[0],i?0:+n[1],+n[2]||1e-5),a=r+1;return l+e.substr(a,e.length-a)},yt=function(e,t,n,r,i){var a=t-e,l=r-n;return it(i,function(t){return n+((t-e)/a*l||0)})},bt=function(e,t,n){var r,i,a,l=e.labels,s=M;for(r in l)(i=l[r]-t)<0==!!n&&i&&s>(i=Math.abs(i))&&(a=r,s=i);return a},wt=function(e,t,n){var r,i,a,l=e.vars,s=l[t],o=f,u=e._ctx;if(s)return r=l[t+"Params"],i=l.callbackScope||e,n&&de.length&&Te(),u&&(f=u),a=r?s.apply(i,r):s.call(i),f=o,a},_t=function(e){return Fe(e),e.scrollTrigger&&e.scrollTrigger.kill(!!d),e.progress()<1&&wt(e,"onInterrupt"),e},St=[],kt=function(e){if(e)if(e=!e.name&&e.default||e,H()||e.headless){var t=e.name,n=F(e),r=t&&!n&&e.init?function(){this._props=[]}:e,i={init:le,render:mn,add:Zt,kill:vn,modifier:gn,rawVars:0},a={targetTest:0,get:0,getSetter:dn,aliases:{},register:0};if(At(),e!==r){if(pe[t])return;ze(r,ze(Ae(e,i),a)),Oe(r.prototype,Oe(i,Ae(e,a))),pe[r.prop=t]=r,e.targetTest&&(ge.push(r),ce[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}ae(t,r),e.register&&e.register(Nn,r,wn)}else St.push(e)},xt=255,Et={aqua:[0,xt,xt],lime:[0,xt,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,xt],navy:[0,0,128],white:[xt,xt,xt],olive:[128,128,0],yellow:[xt,xt,0],orange:[xt,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[xt,0,0],pink:[xt,192,203],cyan:[0,xt,xt],transparent:[xt,xt,xt,0]},Tt=function(e,t,n){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(n-t)*e*6:e<.5?n:3*e<2?t+(n-t)*(2/3-e)*6:t)*xt+.5|0},Ct=function(e,t,n){var r,i,a,l,s,o,u,c,d,f,p=e?B(e)?[e>>16,e>>8&xt,e&xt]:0:Et.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),Et[e])p=Et[e];else if("#"===e.charAt(0)){if(e.length<6&&(r=e.charAt(1),i=e.charAt(2),a=e.charAt(3),e="#"+r+r+i+i+a+a+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&xt,p&xt,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&xt,e&xt]}else if("hsl"===e.substr(0,3))if(p=f=e.match(W),t){if(~e.indexOf("="))return p=e.match(Y),n&&p.length<4&&(p[3]=1),p}else l=+p[0]%360/360,s=+p[1]/100,r=2*(o=+p[2]/100)-(i=o<=.5?o*(s+1):o+s-o*s),p.length>3&&(p[3]*=1),p[0]=Tt(l+1/3,r,i),p[1]=Tt(l,r,i),p[2]=Tt(l-1/3,r,i);else p=e.match(W)||Et.transparent;p=p.map(Number)}return t&&!f&&(r=p[0]/xt,i=p[1]/xt,a=p[2]/xt,o=((u=Math.max(r,i,a))+(c=Math.min(r,i,a)))/2,u===c?l=s=0:(d=u-c,s=o>.5?d/(2-u-c):d/(u+c),l=u===r?(i-a)/d+(i<a?6:0):u===i?(a-r)/d+2:(r-i)/d+4,l*=60),p[0]=~~(l+.5),p[1]=~~(100*s+.5),p[2]=~~(100*o+.5)),n&&p.length<4&&(p[3]=1),p},Pt=function(e){var t=[],n=[],r=-1;return e.split(Lt).forEach(function(e){var i=e.match(X)||[];t.push.apply(t,i),n.push(r+=i.length+1)}),t.c=n,t},Mt=function(e,t,n){var r,i,a,l,s="",o=(e+s).match(Lt),u=t?"hsla(":"rgba(",c=0;if(!o)return e;if(o=o.map(function(e){return(e=Ct(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"}),n&&(a=Pt(e),(r=n.c).join(s)!==a.c.join(s)))for(l=(i=e.replace(Lt,"1").split(X)).length-1;c<l;c++)s+=i[c]+(~r.indexOf(c)?o.shift()||u+"0,0,0,0)":(a.length?a:o.length?o:n).shift());if(!i)for(l=(i=e.split(Lt)).length-1;c<l;c++)s+=i[c]+o[c];return s+i[l]},Lt=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in Et)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),zt=/hsl[a]?\(/,Ot=function(e){var t,n=e.join(" ");if(Lt.lastIndex=0,Lt.test(n))return t=zt.test(n),e[1]=Mt(e[1],t),e[0]=Mt(e[0],t,Pt(e[1])),!0},Nt=function(){var e,t,n,r,i,a,l=Date.now,s=500,o=33,u=l(),c=u,d=1e3/240,f=d,p=[],y=function n(h){var m,g,v,y,b=l()-c,w=!0===h;if((b>s||b<0)&&(u+=b-o),((m=(v=(c+=b)-u)-f)>0||w)&&(y=++r.frame,i=v-1e3*r.time,r.time=v/=1e3,f+=m+(m>=d?4:d-m),g=1),w||(e=t(n)),g)for(a=0;a<p.length;a++)p[a](v,i,y,h)};return r={time:0,frame:0,tick:function(){y(!0)},deltaRatio:function(e){return i/(1e3/(e||60))},wake:function(){v&&(!m&&H()&&(h=m=window,g=h.document||{},ee.gsap=Nn,(h.gsapVersions||(h.gsapVersions=[])).push(Nn.version),ne(te||h.GreenSockGlobals||!h.gsap&&h||{}),St.forEach(kt)),n="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,e&&r.sleep(),t=n||function(e){return setTimeout(e,f-1e3*r.time+1|0)},w=1,y(2))},sleep:function(){(n?cancelAnimationFrame:clearTimeout)(e),w=0,t=le},lagSmoothing:function(e,t){s=e||1/0,o=Math.min(t||33,s)},fps:function(e){d=1e3/(e||240),f=1e3*r.time+d},add:function(e,t,n){var i=t?function(t,n,a,l){e(t,n,a,l),r.remove(i)}:e;return r.remove(e),p[n?"unshift":"push"](i),At(),i},remove:function(e,t){~(t=p.indexOf(e))&&p.splice(t,1)&&a>=t&&a--},_listeners:p}}(),At=function(){return!w&&Nt.wake()},Dt={},Rt=/^[\d.\-M][\d.\-,\s]/,It=/["']/g,Ft=function(e){for(var t,n,r,i={},a=e.substr(1,e.length-3).split(":"),l=a[0],s=1,o=a.length;s<o;s++)n=a[s],t=s!==o-1?n.lastIndexOf(","):n.length,r=n.substr(0,t),i[l]=isNaN(r)?r.replace(It,"").trim():+r,l=n.substr(t+1).trim();return i},Bt=function(e){return function(t){return 1-e(1-t)}},jt=function e(t,n){for(var r,i=t._first;i;)i instanceof Yt?e(i,n):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===n||(i.timeline?e(i.timeline,n):(r=i._ease,i._ease=i._yEase,i._yEase=r,i._yoyo=n)),i=i._next},$t=function(e,t){return e&&(F(e)?e:Dt[e]||function(e){var t,n,r,i,a=(e+"").split("("),l=Dt[a[0]];return l&&a.length>1&&l.config?l.config.apply(null,~e.indexOf("{")?[Ft(a[1])]:(t=e,n=t.indexOf("(")+1,r=t.indexOf(")"),i=t.indexOf("(",n),t.substring(n,~i&&i<r?t.indexOf(")",r+1):r)).split(",").map(Me)):Dt._CE&&Rt.test(e)?Dt._CE("",e):l}(e))||t},Vt=function(e,t,n,r){void 0===n&&(n=function(e){return 1-t(1-e)}),void 0===r&&(r=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var i,a={easeIn:t,easeOut:n,easeInOut:r};return _e(e,function(e){for(var t in Dt[e]=ee[e]=a,Dt[i=e.toLowerCase()]=n,a)Dt[i+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=Dt[e+"."+t]=a[t]}),a},Ht=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},Gt=function e(t,n,r){var i=n>=1?n:1,a=(r||(t?.3:.45))/(n<1?n:1),l=a/z*(Math.asin(1/i)||0),s=function(e){return 1===e?1:i*Math.pow(2,-10*e)*R((e-l)*a)+1},o="out"===t?s:"in"===t?function(e){return 1-s(1-e)}:Ht(s);return a=z/a,o.config=function(n,r){return e(t,n,r)},o},Ut=function e(t,n){void 0===n&&(n=1.70158);var r=function(e){return e?--e*e*((n+1)*e+n)+1:0},i="out"===t?r:"in"===t?function(e){return 1-r(1-e)}:Ht(r);return i.config=function(n){return e(t,n)},i};_e("Linear,Quad,Cubic,Quart,Quint,Strong",function(e,t){var n=t<5?t+1:t;Vt(e+",Power"+(n-1),t?function(e){return Math.pow(e,n)}:function(e){return e},function(e){return 1-Math.pow(1-e,n)},function(e){return e<.5?Math.pow(2*e,n)/2:1-Math.pow(2*(1-e),n)/2})}),Dt.Linear.easeNone=Dt.none=Dt.Linear.easeIn,Vt("Elastic",Gt("in"),Gt("out"),Gt()),_=7.5625,x=2*(k=1/(S=2.75)),E=2.5*k,Vt("Bounce",function(e){return 1-T(1-e)},T=function(e){return e<k?_*e*e:e<x?_*Math.pow(e-1.5/S,2)+.75:e<E?_*(e-=2.25/S)*e+.9375:_*Math.pow(e-2.625/S,2)+.984375}),Vt("Expo",function(e){return Math.pow(2,10*(e-1))*e+e*e*e*e*e*e*(1-e)}),Vt("Circ",function(e){return-(A(1-e*e)-1)}),Vt("Sine",function(e){return 1===e?1:1-D(e*O)}),Vt("Back",Ut("in"),Ut("out"),Ut()),Dt.SteppedEase=Dt.steps=ee.SteppedEase={config:function(e,t){void 0===e&&(e=1);var n=1/e,r=e+(t?0:1),i=t?1:0;return function(e){return((r*at(0,.99999999,e)|0)+i)*n}}},P.ease=Dt["quad.out"],_e("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",function(e){return ve+=e+","+e+"Params,"});var qt=function(e,t){this.id=N++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:we,this.set=t?t.getSetter:dn},Wt=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,Je(this,+e.duration,1,1),this.data=e.data,f&&(this._ctx=f,f.data.push(this)),w||Nt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,Je(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(At(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(qe(this,e),!n._dp||n.parent||We(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&Ye(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===L||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),Pe(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Ve(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>=0&&this._initted?1:0},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Ve(this),t):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},t.iteration=function(e,t){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*n,t):this._repeat?He(this._tTime,n)+1:1},t.timeScale=function(e,t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var n=this.parent&&this._ts?Ge(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(at(-Math.abs(this._delay),this.totalDuration(),n),!1!==t),Ue(this),function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e}(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(At(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==L&&(this._tTime-=L)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&Ye(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(V(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Ge(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=ue);var t=d;return d=e,Ce(this)&&(this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents)),"nested"!==this.data&&!1!==e.kill&&this.kill(),d=t,this},t.globalTime=function(e){for(var t=this,n=arguments.length?e:t.rawTime();t;)n=t._start+n/(Math.abs(t._ts)||1),t=t._dp;return!this.parent&&this._sat?this._sat.globalTime(e):n},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,et(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,et(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(nt(this,e),V(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,V(t)),this._dur||(this._zTime=-1e-8),this},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,n=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=n&&e<this.endTime(!0)-L))},t.eventCallback=function(e,t,n){var r=this.vars;return arguments.length>1?(t?(r[e]=t,n&&(r[e+"Params"]=n),"onUpdate"===e&&(this._onUpdate=t)):delete r[e],this):r[e]},t.then=function(e){var t=this;return new Promise(function(n){var r=F(e)?e:Le,i=function(){var e=t.then;t.then=null,F(r)&&(r=r(t))&&(r.then||r===t)&&(t.then=e),n(r),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?i():t._prom=i})},t.kill=function(){_t(this)},e}();ze(Wt.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Yt=function(e){function t(t,n){var r;return void 0===t&&(t={}),(r=e.call(this,t)||this).labels={},r.smoothChildTiming=!!t.smoothChildTiming,r.autoRemoveChildren=!!t.autoRemoveChildren,r._sort=V(t.sortChildren),p&&Ye(t.parent||p,o(r),n),t.reversed&&r.reverse(),t.paused&&r.paused(!0),t.scrollTrigger&&Xe(o(r),t.scrollTrigger),r}u(t,e);var n=t.prototype;return n.to=function(e,t,n){return rt(0,arguments,this),this},n.from=function(e,t,n){return rt(1,arguments,this),this},n.fromTo=function(e,t,n,r){return rt(2,arguments,this),this},n.set=function(e,t,n){return t.duration=0,t.parent=this,De(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new ln(e,t,nt(this,n),1),this},n.call=function(e,t,n){return Ye(this,ln.delayedCall(0,e,t),n)},n.staggerTo=function(e,t,n,r,i,a,l){return n.duration=t,n.stagger=n.stagger||r,n.onComplete=a,n.onCompleteParams=l,n.parent=this,new ln(e,n,nt(this,i)),this},n.staggerFrom=function(e,t,n,r,i,a,l){return n.runBackwards=1,De(n).immediateRender=V(n.immediateRender),this.staggerTo(e,t,n,r,i,a,l)},n.staggerFromTo=function(e,t,n,r,i,a,l,s){return r.startAt=n,De(r).immediateRender=V(r.immediateRender),this.staggerTo(e,t,r,i,a,l,s)},n.render=function(e,t,n){var r,i,a,l,s,o,u,c,f,h,m,g,v=this._time,y=this._dirty?this.totalDuration():this._tDur,b=this._dur,w=e<=0?0:ke(e),_=this._zTime<0!=e<0&&(this._initted||!b);if(this!==p&&w>y&&e>=0&&(w=y),w!==this._tTime||n||_){if(v!==this._time&&b&&(w+=this._time-v,e+=this._time-v),r=w,f=this._start,o=!(c=this._ts),_&&(b||(v=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(m=this._yoyo,s=b+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*s+e,t,n);if(r=ke(w%s),w===y?(l=this._repeat,r=b):((l=~~(h=ke(w/s)))&&l===h&&(r=b,l--),r>b&&(r=b)),h=He(this._tTime,s),!v&&this._tTime&&h!==l&&this._tTime-h*s-this._dur<=0&&(h=l),m&&1&l&&(r=b-r,g=1),l!==h&&!this._lock){var S=m&&1&h,k=S===(m&&1&l);if(l<h&&(S=!S),v=S?0:w%b?b:w,this._lock=1,this.render(v||(g?0:ke(l*s)),t,!b)._lock=0,this._tTime=w,!t&&this.parent&&wt(this,"onRepeat"),this.vars.repeatRefresh&&!g&&(this.invalidate()._lock=1),v&&v!==this._time||o!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(b=this._dur,y=this._tDur,k&&(this._lock=2,v=S?b:-1e-4,this.render(v,!0),this.vars.repeatRefresh&&!g&&this.invalidate()),this._lock=0,!this._ts&&!o)return this;jt(this,g)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(u=function(e,t,n){var r;if(n>t)for(r=e._first;r&&r._start<=n;){if("isPause"===r.data&&r._start>t)return r;r=r._next}else for(r=e._last;r&&r._start>=n;){if("isPause"===r.data&&r._start<t)return r;r=r._prev}}(this,ke(v),ke(r)),u&&(w-=r-(r=u._start))),this._tTime=w,this._time=r,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,v=0),!v&&w&&!t&&!h&&(wt(this,"onStart"),this._tTime!==w))return this;if(r>=v&&e>=0)for(i=this._first;i;){if(a=i._next,(i._act||r>=i._start)&&i._ts&&u!==i){if(i.parent!==this)return this.render(e,t,n);if(i.render(i._ts>0?(r-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(r-i._start)*i._ts,t,n),r!==this._time||!this._ts&&!o){u=0,a&&(w+=this._zTime=-1e-8);break}}i=a}else{i=this._last;for(var x=e<0?e:r;i;){if(a=i._prev,(i._act||x<=i._end)&&i._ts&&u!==i){if(i.parent!==this)return this.render(e,t,n);if(i.render(i._ts>0?(x-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(x-i._start)*i._ts,t,n||d&&Ce(i)),r!==this._time||!this._ts&&!o){u=0,a&&(w+=this._zTime=x?-1e-8:L);break}}i=a}}if(u&&!t&&(this.pause(),u.render(r>=v?0:-1e-8)._zTime=r>=v?1:-1,this._ts))return this._start=f,Ue(this),this.render(e,t,n);this._onUpdate&&!t&&wt(this,"onUpdate",!0),(w===y&&this._tTime>=this.totalDuration()||!w&&v)&&(f!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((e||!b)&&(w===y&&this._ts>0||!w&&this._ts<0)&&Fe(this,1),t||e<0&&!v||!w&&!v&&y||(wt(this,w===y&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(w<y&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(e,t){var n=this;if(B(t)||(t=nt(this,t,e)),!(e instanceof Wt)){if(q(e))return e.forEach(function(e){return n.add(e,t)}),this;if(I(e))return this.addLabel(e,t);if(!F(e))return this;e=ln.delayedCall(0,e)}return this!==e?Ye(this,e,t):this},n.getChildren=function(e,t,n,r){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===n&&(n=!0),void 0===r&&(r=-M);for(var i=[],a=this._first;a;)a._start>=r&&(a instanceof ln?t&&i.push(a):(n&&i.push(a),e&&i.push.apply(i,a.getChildren(!0,t,n)))),a=a._next;return i},n.getById=function(e){for(var t=this.getChildren(1,1,1),n=t.length;n--;)if(t[n].vars.id===e)return t[n]},n.remove=function(e){return I(e)?this.removeLabel(e):F(e)?this.killTweensOf(e):(e.parent===this&&Ie(this,e),e===this._recent&&(this._recent=this._last),Be(this))},n.totalTime=function(t,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=ke(Nt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,n),this._forcing=0,this):this._tTime},n.addLabel=function(e,t){return this.labels[e]=nt(this,t),this},n.removeLabel=function(e){return delete this.labels[e],this},n.addPause=function(e,t,n){var r=ln.delayedCall(0,t||le,n);return r.data="isPause",this._hasPause=1,Ye(this,r,nt(this,e))},n.removePause=function(e){var t=this._first;for(e=nt(this,e);t;)t._start===e&&"isPause"===t.data&&Fe(t),t=t._next},n.killTweensOf=function(e,t,n){for(var r=this.getTweensOf(e,n),i=r.length;i--;)Xt!==r[i]&&r[i].kill(e,t);return this},n.getTweensOf=function(e,t){for(var n,r=[],i=ut(e),a=this._first,l=B(t);a;)a instanceof ln?Ee(a._targets,i)&&(l?(!Xt||a._initted&&a._ts)&&a.globalTime(0)<=t&&a.globalTime(a.totalDuration())>t:!t||a.isActive())&&r.push(a):(n=a.getTweensOf(i,t)).length&&r.push.apply(r,n),a=a._next;return r},n.tweenTo=function(e,t){t=t||{};var n,r=this,i=nt(r,e),a=t,l=a.startAt,s=a.onStart,o=a.onStartParams,u=a.immediateRender,c=ln.to(r,ze({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:t.duration||Math.abs((i-(l&&"time"in l?l.time:r._time))/r.timeScale())||L,onStart:function(){if(r.pause(),!n){var e=t.duration||Math.abs((i-(l&&"time"in l?l.time:r._time))/r.timeScale());c._dur!==e&&Je(c,e,0,1).render(c._time,!0,!0),n=1}s&&s.apply(c,o||[])}},t));return u?c.render(0):c},n.tweenFromTo=function(e,t,n){return this.tweenTo(t,ze({startAt:{time:nt(this,e)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(e){return void 0===e&&(e=this._time),bt(this,nt(this,e))},n.previousLabel=function(e){return void 0===e&&(e=this._time),bt(this,nt(this,e),1)},n.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+L)},n.shiftChildren=function(e,t,n){void 0===n&&(n=0);for(var r,i=this._first,a=this.labels;i;)i._start>=n&&(i._start+=e,i._end+=e),i=i._next;if(t)for(r in a)a[r]>=n&&(a[r]+=e);return Be(this)},n.invalidate=function(t){var n=this._first;for(this._lock=0;n;)n.invalidate(t),n=n._next;return e.prototype.invalidate.call(this,t)},n.clear=function(e){void 0===e&&(e=!0);for(var t,n=this._first;n;)t=n._next,this.remove(n),n=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),Be(this)},n.totalDuration=function(e){var t,n,r,i=0,a=this,l=a._last,s=M;if(arguments.length)return a.timeScale((a._repeat<0?a.duration():a.totalDuration())/(a.reversed()?-e:e));if(a._dirty){for(r=a.parent;l;)t=l._prev,l._dirty&&l.totalDuration(),(n=l._start)>s&&a._sort&&l._ts&&!a._lock?(a._lock=1,Ye(a,l,n-l._delay,1)._lock=0):s=n,n<0&&l._ts&&(i-=n,(!r&&!a._dp||r&&r.smoothChildTiming)&&(a._start+=n/a._ts,a._time-=n,a._tTime-=n),a.shiftChildren(-n,!1,-Infinity),s=0),l._end>i&&l._ts&&(i=l._end),l=t;Je(a,a===p&&a._time>i?a._time:i,1,1),a._dirty=0}return a._tDur},t.updateRoot=function(e){if(p._ts&&(Pe(p,Ge(e,p)),y=Nt.frame),Nt.frame>=me){me+=C.autoSleep||120;var t=p._first;if((!t||!t._ts)&&C.autoSleep&&Nt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||Nt.sleep()}}},t}(Wt);ze(Yt.prototype,{_lock:0,_hasPause:0,_forcing:0});var Xt,Qt,Kt=function(e,t,n,r,i,a,l){var s,o,u,c,d,f,p,h,m=new wn(this._pt,e,t,0,1,hn,null,i),g=0,v=0;for(m.b=n,m.e=r,n+="",(p=~(r+="").indexOf("random("))&&(r=vt(r)),a&&(a(h=[n,r],e,t),n=h[0],r=h[1]),o=n.match(Q)||[];s=Q.exec(r);)c=s[0],d=r.substring(g,s.index),u?u=(u+1)%5:"rgba("===d.substr(-5)&&(u=1),c!==o[v++]&&(f=parseFloat(o[v-1])||0,m._pt={_next:m._pt,p:d||1===v?d:",",s:f,c:"="===c.charAt(1)?xe(f,c)-f:parseFloat(c)-f,m:u&&u<4?Math.round:0},g=Q.lastIndex);return m.c=g<r.length?r.substring(g,r.length):"",m.fp=l,(K.test(r)||p)&&(m.e=0),this._pt=m,m},Zt=function(e,t,n,r,i,a,l,s,o,u){F(r)&&(r=r(i||0,e,a));var c,d=e[t],f="get"!==n?n:F(d)?o?e[t.indexOf("set")||!F(e["get"+t.substr(3)])?t:"get"+t.substr(3)](o):e[t]():d,p=F(d)?o?un:on:sn;if(I(r)&&(~r.indexOf("random(")&&(r=vt(r)),"="===r.charAt(1)&&((c=xe(f,r)+(lt(f)||0))||0===c)&&(r=c)),!u||f!==r||Qt)return isNaN(f*r)||""===r?(!d&&!(t in e)&&re(t,r),Kt.call(this,e,t,f,r,p,s||C.stringFilter,o)):(c=new wn(this._pt,e,t,+f||0,r-(f||0),"boolean"==typeof d?pn:fn,0,p),o&&(c.fp=o),l&&c.modifier(l,this,e),this._pt=c)},Jt=function(e,t,n,r,i,a){var l,s,o,u;if(pe[e]&&!1!==(l=new pe[e]).init(i,l.rawVars?t[e]:function(e,t,n,r,i){if(F(e)&&(e=nn(e,i,t,n,r)),!$(e)||e.style&&e.nodeType||q(e)||U(e))return I(e)?nn(e,i,t,n,r):e;var a,l={};for(a in e)l[a]=nn(e[a],i,t,n,r);return l}(t[e],r,i,a,n),n,r,a)&&(n._pt=s=new wn(n._pt,i,e,0,1,l.render,l,0,l.priority),n!==b))for(o=n._ptLookup[n._targets.indexOf(i)],u=l._props.length;u--;)o[l._props[u]]=s;return l},en=function e(t,n,r){var i,a,l,s,o,u,f,h,m,g,v,y,b,w=t.vars,_=w.ease,S=w.startAt,k=w.immediateRender,x=w.lazy,E=w.onUpdate,T=w.runBackwards,C=w.yoyoEase,z=w.keyframes,O=w.autoRevert,N=t._dur,A=t._startAt,D=t._targets,R=t.parent,I=R&&"nested"===R.data?R.vars.targets:D,F="auto"===t._overwrite&&!c,B=t.timeline;if(B&&(!z||!_)&&(_="none"),t._ease=$t(_,P.ease),t._yEase=C?Bt($t(!0===C?_:C,P.ease)):0,C&&t._yoyo&&!t._repeat&&(C=t._yEase,t._yEase=t._ease,t._ease=C),t._from=!B&&!!w.runBackwards,!B||z&&!w.stagger){if(y=(h=D[0]?be(D[0]).harness:0)&&w[h.prop],i=Ae(w,ce),A&&(A._zTime<0&&A.progress(1),n<0&&T&&k&&!O?A.render(-1,!0):A.revert(T&&N?oe:se),A._lazy=0),S){if(Fe(t._startAt=ln.set(D,ze({data:"isStart",overwrite:!1,parent:R,immediateRender:!0,lazy:!A&&V(x),startAt:null,delay:0,onUpdate:E&&function(){return wt(t,"onUpdate")},stagger:0},S))),t._startAt._dp=0,t._startAt._sat=t,n<0&&(d||!k&&!O)&&t._startAt.revert(oe),k&&N&&n<=0&&r<=0)return void(n&&(t._zTime=n))}else if(T&&N&&!A)if(n&&(k=!1),l=ze({overwrite:!1,data:"isFromStart",lazy:k&&!A&&V(x),immediateRender:k,stagger:0,parent:R},i),y&&(l[h.prop]=y),Fe(t._startAt=ln.set(D,l)),t._startAt._dp=0,t._startAt._sat=t,n<0&&(d?t._startAt.revert(oe):t._startAt.render(-1,!0)),t._zTime=n,k){if(!n)return}else e(t._startAt,L,L);for(t._pt=t._ptCache=0,x=N&&V(x)||x&&!N,a=0;a<D.length;a++){if(f=(o=D[a])._gsap||ye(D)[a]._gsap,t._ptLookup[a]=g={},fe[f.id]&&de.length&&Te(),v=I===D?a:I.indexOf(o),h&&!1!==(m=new h).init(o,y||i,t,v,I)&&(t._pt=s=new wn(t._pt,o,m.name,0,1,m.render,m,0,m.priority),m._props.forEach(function(e){g[e]=s}),m.priority&&(u=1)),!h||y)for(l in i)pe[l]&&(m=Jt(l,i,t,v,o,I))?m.priority&&(u=1):g[l]=s=Zt.call(t,o,l,"get",i[l],v,I,0,w.stringFilter);t._op&&t._op[a]&&t.kill(o,t._op[a]),F&&t._pt&&(Xt=t,p.killTweensOf(o,g,t.globalTime(n)),b=!t.parent,Xt=0),t._pt&&x&&(fe[f.id]=1)}u&&bn(t),t._onInit&&t._onInit(t)}t._onUpdate=E,t._initted=(!t._op||t._pt)&&!b,z&&n<=0&&B.render(M,!0,!0)},tn=function(e,t,n,r){var i,a,l=t.ease||r||"power1.inOut";if(q(t))a=n[e]||(n[e]=[]),t.forEach(function(e,n){return a.push({t:n/(t.length-1)*100,v:e,e:l})});else for(i in t)a=n[i]||(n[i]=[]),"ease"===i||a.push({t:parseFloat(e),v:t[i],e:l})},nn=function(e,t,n,r,i){return F(e)?e.call(t,n,r,i):I(e)&&~e.indexOf("random(")?vt(e):e},rn=ve+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",an={};_e(rn+",id,stagger,delay,duration,paused,scrollTrigger",function(e){return an[e]=1});var ln=function(e){function t(t,n,r,i){var a;"number"==typeof n&&(r.duration=n,n=r,r=null);var l,s,u,d,f,h,m,g,v=(a=e.call(this,i?n:De(n))||this).vars,y=v.duration,b=v.delay,w=v.immediateRender,_=v.stagger,S=v.overwrite,k=v.keyframes,x=v.defaults,E=v.scrollTrigger,T=v.yoyoEase,P=n.parent||p,M=(q(t)||U(t)?B(t[0]):"length"in n)?[t]:ut(t);if(a._targets=M.length?ye(M):ie("GSAP target "+t+" not found. https://gsap.com",!C.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=S,k||_||G(y)||G(b)){if(n=a.vars,(l=a.timeline=new Yt({data:"nested",defaults:x||{},targets:P&&"nested"===P.data?P.vars.targets:M})).kill(),l.parent=l._dp=o(a),l._start=0,_||G(y)||G(b)){if(d=M.length,m=_&&ft(_),$(_))for(f in _)~rn.indexOf(f)&&(g||(g={}),g[f]=_[f]);for(s=0;s<d;s++)(u=Ae(n,an)).stagger=0,T&&(u.yoyoEase=T),g&&Oe(u,g),h=M[s],u.duration=+nn(y,o(a),s,h,M),u.delay=(+nn(b,o(a),s,h,M)||0)-a._delay,!_&&1===d&&u.delay&&(a._delay=b=u.delay,a._start+=b,u.delay=0),l.to(h,u,m?m(s,h,M):0),l._ease=Dt.none;l.duration()?y=b=0:a.timeline=0}else if(k){De(ze(l.vars.defaults,{ease:"none"})),l._ease=$t(k.ease||n.ease||"none");var L,z,O,N=0;if(q(k))k.forEach(function(e){return l.to(M,e,">")}),l.duration();else{for(f in u={},k)"ease"===f||"easeEach"===f||tn(f,k[f],u,k.easeEach);for(f in u)for(L=u[f].sort(function(e,t){return e.t-t.t}),N=0,s=0;s<L.length;s++)(O={ease:(z=L[s]).e,duration:(z.t-(s?L[s-1].t:0))/100*y})[f]=z.v,l.to(M,O,N),N+=O.duration;l.duration()<y&&l.to({},{duration:y-l.duration()})}}y||a.duration(y=l.duration())}else a.timeline=0;return!0!==S||c||(Xt=o(a),p.killTweensOf(M),Xt=0),Ye(P,o(a),r),n.reversed&&a.reverse(),n.paused&&a.paused(!0),(w||!y&&!k&&a._start===ke(P._time)&&V(w)&&$e(o(a))&&"nested"!==P.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-b)||0)),E&&Xe(o(a),E),a}u(t,e);var n=t.prototype;return n.render=function(e,t,n){var r,i,a,l,s,o,u,c,f,p=this._time,h=this._tDur,m=this._dur,g=e<0,v=e>h-L&&!g?h:e<L?0:e;if(m){if(v!==this._tTime||!e||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==g||this._lazy){if(r=v,c=this.timeline,this._repeat){if(l=m+this._rDelay,this._repeat<-1&&g)return this.totalTime(100*l+e,t,n);if(r=ke(v%l),v===h?(a=this._repeat,r=m):(a=~~(s=ke(v/l)))&&a===s?(r=m,a--):r>m&&(r=m),(o=this._yoyo&&1&a)&&(f=this._yEase,r=m-r),s=He(this._tTime,l),r===p&&!n&&this._initted&&a===s)return this._tTime=v,this;a!==s&&(c&&this._yEase&&jt(c,o),this.vars.repeatRefresh&&!o&&!this._lock&&r!==l&&this._initted&&(this._lock=n=1,this.render(ke(l*a),!0).invalidate()._lock=0))}if(!this._initted){if(Qe(this,g?e:r,n,t,v))return this._tTime=0,this;if(!(p===this._time||n&&this.vars.repeatRefresh&&a!==s))return this;if(m!==this._dur)return this.render(e,t,n)}if(this._tTime=v,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(f||this._ease)(r/m),this._from&&(this.ratio=u=1-u),!p&&v&&!t&&!s&&(wt(this,"onStart"),this._tTime!==v))return this;for(i=this._pt;i;)i.r(u,i.d),i=i._next;c&&c.render(e<0?e:c._dur*c._ease(r/this._dur),t,n)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(g&&je(this,e,0,n),wt(this,"onUpdate")),this._repeat&&a!==s&&this.vars.onRepeat&&!t&&this.parent&&wt(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(g&&!this._onUpdate&&je(this,e,0,!0),(e||!m)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&Fe(this,1),t||g&&!p||!(v||p||o)||(wt(this,v===h?"onComplete":"onReverseComplete",!0),this._prom&&!(v<h&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,n,r){var i,a,l,s=e.ratio,o=t<0||!t&&(!e._start&&Ke(e)&&(e._initted||!Ze(e))||(e._ts<0||e._dp._ts<0)&&!Ze(e))?0:1,u=e._rDelay,c=0;if(u&&e._repeat&&(c=at(0,e._tDur,t),a=He(c,u),e._yoyo&&1&a&&(o=1-o),a!==He(e._tTime,u)&&(s=1-o,e.vars.repeatRefresh&&e._initted&&e.invalidate())),o!==s||d||r||e._zTime===L||!t&&e._zTime){if(!e._initted&&Qe(e,t,r,n,c))return;for(l=e._zTime,e._zTime=t||(n?L:0),n||(n=t&&!l),e.ratio=o,e._from&&(o=1-o),e._time=0,e._tTime=c,i=e._pt;i;)i.r(o,i.d),i=i._next;t<0&&je(e,t,0,!0),e._onUpdate&&!n&&wt(e,"onUpdate"),c&&e._repeat&&!n&&e.parent&&wt(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===o&&(o&&Fe(e,1),n||d||(wt(e,o?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,n);return this},n.targets=function(){return this._targets},n.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),e.prototype.invalidate.call(this,t)},n.resetTo=function(e,t,n,r,i){w||Nt.wake(),this._ts||this.play();var a=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||en(this,a),function(e,t,n,r,i,a,l,s){var o,u,c,d,f=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!f)for(f=e._ptCache[t]=[],c=e._ptLookup,d=e._targets.length;d--;){if((o=c[d][t])&&o.d&&o.d._pt)for(o=o.d._pt;o&&o.p!==t&&o.fp!==t;)o=o._next;if(!o)return Qt=1,e.vars[t]="+=0",en(e,l),Qt=0,s?ie(t+" not eligible for reset"):1;f.push(o)}for(d=f.length;d--;)(o=(u=f[d])._pt||u).s=!r&&0!==r||i?o.s+(r||0)+a*o.c:r,o.c=n-o.s,u.e&&(u.e=Se(n)+lt(u.e)),u.b&&(u.b=o.s+lt(u.b))}(this,e,t,n,r,this._ease(a/this._dur),a,i)?this.resetTo(e,t,n,r,1):(qe(this,0),this.parent||Re(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},n.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?_t(this):this.scrollTrigger&&this.scrollTrigger.kill(!!d),this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,Xt&&!0!==Xt.vars.overwrite)._first||_t(this),this.parent&&n!==this.timeline.totalDuration()&&Je(this,this._dur*this.timeline._tDur/n,0,1),this}var r,i,a,l,s,o,u,c=this._targets,f=e?ut(e):c,p=this._ptLookup,h=this._pt;if((!t||"all"===t)&&function(e,t){for(var n=e.length,r=n===t.length;r&&n--&&e[n]===t[n];);return n<0}(c,f))return"all"===t&&(this._pt=0),_t(this);for(r=this._op=this._op||[],"all"!==t&&(I(t)&&(s={},_e(t,function(e){return s[e]=1}),t=s),t=function(e,t){var n,r,i,a,l=e[0]?be(e[0]).harness:0,s=l&&l.aliases;if(!s)return t;for(r in n=Oe({},t),s)if(r in n)for(i=(a=s[r].split(",")).length;i--;)n[a[i]]=n[r];return n}(c,t)),u=c.length;u--;)if(~f.indexOf(c[u]))for(s in i=p[u],"all"===t?(r[u]=t,l=i,a={}):(a=r[u]=r[u]||{},l=t),l)(o=i&&i[s])&&("kill"in o.d&&!0!==o.d.kill(s)||Ie(this,o,"_pt"),delete i[s]),"all"!==a&&(a[s]=1);return this._initted&&!this._pt&&h&&_t(this),this},t.to=function(e,n){return new t(e,n,arguments[2])},t.from=function(e,t){return rt(1,arguments)},t.delayedCall=function(e,n,r,i){return new t(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:i})},t.fromTo=function(e,t,n){return rt(2,arguments)},t.set=function(e,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new t(e,n)},t.killTweensOf=function(e,t,n){return p.killTweensOf(e,t,n)},t}(Wt);ze(ln.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),_e("staggerTo,staggerFrom,staggerFromTo",function(e){ln[e]=function(){var t=new Yt,n=st.call(arguments,0);return n.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,n)}});var sn=function(e,t,n){return e[t]=n},on=function(e,t,n){return e[t](n)},un=function(e,t,n,r){return e[t](r.fp,n)},cn=function(e,t,n){return e.setAttribute(t,n)},dn=function(e,t){return F(e[t])?on:j(e[t])&&e.setAttribute?cn:sn},fn=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},pn=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},hn=function(e,t){var n=t._pt,r="";if(!e&&t.b)r=t.b;else if(1===e&&t.e)r=t.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*e):Math.round(1e4*(n.s+n.c*e))/1e4)+r,n=n._next;r+=t.c}t.set(t.t,t.p,r,t)},mn=function(e,t){for(var n=t._pt;n;)n.r(e,n.d),n=n._next},gn=function(e,t,n,r){for(var i,a=this._pt;a;)i=a._next,a.p===r&&a.modifier(e,t,n),a=i},vn=function(e){for(var t,n,r=this._pt;r;)n=r._next,r.p===e&&!r.op||r.op===e?Ie(this,r,"_pt"):r.dep||(t=1),r=n;return!t},yn=function(e,t,n,r){r.mSet(e,t,r.m.call(r.tween,n,r.mt),r)},bn=function(e){for(var t,n,r,i,a=e._pt;a;){for(t=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:i)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:i=a,a=t}e._pt=r},wn=function(){function e(e,t,n,r,i,a,l,s,o){this.t=t,this.s=r,this.c=i,this.p=n,this.r=a||fn,this.d=l||this,this.set=s||sn,this.pr=o||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,n){this.mSet=this.mSet||this.set,this.set=yn,this.m=e,this.mt=n,this.tween=t},e}();_e(ve+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",function(e){return ce[e]=1}),ee.TweenMax=ee.TweenLite=ln,ee.TimelineLite=ee.TimelineMax=Yt,p=new Yt({sortChildren:!1,defaults:P,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),C.stringFilter=Ot;var _n=[],Sn={},kn=[],xn=0,En=0,Tn=function(e){return(Sn[e]||kn).map(function(e){return e()})},Cn=function(){var e=Date.now(),t=[];e-xn>2&&(Tn("matchMediaInit"),_n.forEach(function(e){var n,r,i,a,l=e.queries,s=e.conditions;for(r in l)(n=h.matchMedia(l[r]).matches)&&(i=1),n!==s[r]&&(s[r]=n,a=1);a&&(e.revert(),i&&t.push(e))}),Tn("matchMediaRevert"),t.forEach(function(e){return e.onMatch(e,function(t){return e.add(null,t)})}),xn=e,Tn("matchMedia"))},Pn=function(){function e(e,t){this.selector=t&&ct(t),this.data=[],this._r=[],this.isReverted=!1,this.id=En++,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,n){F(e)&&(n=t,t=e,e=F);var r=this,i=function(){var e,i=f,a=r.selector;return i&&i!==r&&i.data.push(r),n&&(r.selector=ct(n)),f=r,e=t.apply(r,arguments),F(e)&&r._r.push(e),f=i,r.selector=a,r.isReverted=!1,e};return r.last=i,e===F?i(r,function(e){return r.add(null,e)}):e?r[e]=i:i},t.ignore=function(e){var t=f;f=null,e(this),f=t},t.getTweens=function(){var t=[];return this.data.forEach(function(n){return n instanceof e?t.push.apply(t,n.getTweens()):n instanceof ln&&!(n.parent&&"nested"===n.parent.data)&&t.push(n)}),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var n=this;if(e?function(){for(var t,r=n.getTweens(),i=n.data.length;i--;)"isFlip"===(t=n.data[i]).data&&(t.revert(),t.getChildren(!0,!0,!1).forEach(function(e){return r.splice(r.indexOf(e),1)}));for(r.map(function(e){return{g:e._dur||e._delay||e._sat&&!e._sat.vars.immediateRender?e.globalTime(0):-1/0,t:e}}).sort(function(e,t){return t.g-e.g||-1/0}).forEach(function(t){return t.t.revert(e)}),i=n.data.length;i--;)(t=n.data[i])instanceof Yt?"nested"!==t.data&&(t.scrollTrigger&&t.scrollTrigger.revert(),t.kill()):!(t instanceof ln)&&t.revert&&t.revert(e);n._r.forEach(function(t){return t(e,n)}),n.isReverted=!0}():this.data.forEach(function(e){return e.kill&&e.kill()}),this.clear(),t)for(var r=_n.length;r--;)_n[r].id===this.id&&_n.splice(r,1)},t.revert=function(e){this.kill(e||{})},e}(),Mn=function(){function e(e){this.contexts=[],this.scope=e,f&&f.data.push(this)}var t=e.prototype;return t.add=function(e,t,n){$(e)||(e={matches:e});var r,i,a,l=new Pn(0,n||this.scope),s=l.conditions={};for(i in f&&!l.selector&&(l.selector=f.selector),this.contexts.push(l),t=l.add("onMatch",t),l.queries=e,e)"all"===i?a=1:(r=h.matchMedia(e[i]))&&(_n.indexOf(l)<0&&_n.push(l),(s[i]=r.matches)&&(a=1),r.addListener?r.addListener(Cn):r.addEventListener("change",Cn));return a&&t(l,function(e){return l.add(null,e)}),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach(function(t){return t.kill(e,!0)})},e}(),Ln={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach(function(e){return kt(e)})},timeline:function(e){return new Yt(e)},getTweensOf:function(e,t){return p.getTweensOf(e,t)},getProperty:function(e,t,n,r){I(e)&&(e=ut(e)[0]);var i=be(e||{}).get,a=n?Le:Me;return"native"===n&&(n=""),e?t?a((pe[t]&&pe[t].get||i)(e,t,n,r)):function(t,n,r){return a((pe[t]&&pe[t].get||i)(e,t,n,r))}:e},quickSetter:function(e,t,n){if((e=ut(e)).length>1){var r=e.map(function(e){return Nn.quickSetter(e,t,n)}),i=r.length;return function(e){for(var t=i;t--;)r[t](e)}}e=e[0]||{};var a=pe[t],l=be(e),s=l.harness&&(l.harness.aliases||{})[t]||t,o=a?function(t){var r=new a;b._pt=0,r.init(e,n?t+n:t,b,0,[e]),r.render(1,r),b._pt&&mn(1,b)}:l.set(e,s);return a?o:function(t){return o(e,s,n?t+n:t,l,1)}},quickTo:function(e,t,n){var r,i=Nn.to(e,ze(((r={})[t]="+=0.1",r.paused=!0,r.stagger=0,r),n||{})),a=function(e,n,r){return i.resetTo(t,e,n,r)};return a.tween=i,a},isTweening:function(e){return p.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=$t(e.ease,P.ease)),Ne(P,e||{})},config:function(e){return Ne(C,e||{})},registerEffect:function(e){var t=e.name,n=e.effect,r=e.plugins,i=e.defaults,a=e.extendTimeline;(r||"").split(",").forEach(function(e){return e&&!pe[e]&&!ee[e]&&ie(t+" effect requires "+e+" plugin.")}),he[t]=function(e,t,r){return n(ut(e),ze(t||{},i),r)},a&&(Yt.prototype[t]=function(e,n,r){return this.add(he[t](e,$(n)?n:(r=n)&&{},this),r)})},registerEase:function(e,t){Dt[e]=$t(t)},parseEase:function(e,t){return arguments.length?$t(e,t):Dt},getById:function(e){return p.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var n,r,i=new Yt(e);for(i.smoothChildTiming=V(e.smoothChildTiming),p.remove(i),i._dp=0,i._time=i._tTime=p._time,n=p._first;n;)r=n._next,!t&&!n._dur&&n instanceof ln&&n.vars.onComplete===n._targets[0]||Ye(i,n,n._start-n._delay),n=r;return Ye(p,i,0),i},context:function(e,t){return e?new Pn(e,t):f},matchMedia:function(e){return new Mn(e)},matchMediaRefresh:function(){return _n.forEach(function(e){var t,n,r=e.conditions;for(n in r)r[n]&&(r[n]=!1,t=1);t&&e.revert()})||Cn()},addEventListener:function(e,t){var n=Sn[e]||(Sn[e]=[]);~n.indexOf(t)||n.push(t)},removeEventListener:function(e,t){var n=Sn[e],r=n&&n.indexOf(t);r>=0&&n.splice(r,1)},utils:{wrap:function e(t,n,r){var i=n-t;return q(t)?gt(t,e(0,t.length),n):it(r,function(e){return(i+(e-t)%i)%i+t})},wrapYoyo:function e(t,n,r){var i=n-t,a=2*i;return q(t)?gt(t,e(0,t.length-1),n):it(r,function(e){return t+((e=(a+(e-t)%a)%a||0)>i?a-e:e)})},distribute:ft,random:mt,snap:ht,normalize:function(e,t,n){return yt(e,t,0,1,n)},getUnit:lt,clamp:function(e,t,n){return it(n,function(n){return at(e,t,n)})},splitColor:Ct,toArray:ut,selector:ct,mapRange:yt,pipe:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.reduce(function(e,t){return t(e)},e)}},unitize:function(e,t){return function(n){return e(parseFloat(n))+(t||lt(n))}},interpolate:function e(t,n,r,i){var a=isNaN(t+n)?0:function(e){return(1-e)*t+e*n};if(!a){var l,s,o,u,c,d=I(t),f={};if(!0===r&&(i=1)&&(r=null),d)t={p:t},n={p:n};else if(q(t)&&!q(n)){for(o=[],u=t.length,c=u-2,s=1;s<u;s++)o.push(e(t[s-1],t[s]));u--,a=function(e){e*=u;var t=Math.min(c,~~e);return o[t](e-t)},r=n}else i||(t=Oe(q(t)?[]:{},t));if(!o){for(l in n)Zt.call(f,t,l,"get",n[l]);a=function(e){return mn(e,f)||(d?t.p:t)}}}return it(r,a)},shuffle:dt},install:ne,effects:he,ticker:Nt,updateRoot:Yt.updateRoot,plugins:pe,globalTimeline:p,core:{PropTween:wn,globals:ae,Tween:ln,Timeline:Yt,Animation:Wt,getCache:be,_removeLinkedListItem:Ie,reverting:function(){return d},context:function(e){return e&&f&&(f.data.push(e),e._ctx=f),f},suppressOverwrites:function(e){return c=e}}};_e("to,from,fromTo,delayedCall,set,killTweensOf",function(e){return Ln[e]=ln[e]}),Nt.add(Yt.updateRoot),b=Ln.to({},{duration:0});var zn=function(e,t){for(var n=e._pt;n&&n.p!==t&&n.op!==t&&n.fp!==t;)n=n._next;return n},On=function(e,t){return{name:e,headless:1,rawVars:1,init:function(e,n,r){r._onInit=function(e){var r,i;if(I(n)&&(r={},_e(n,function(e){return r[e]=1}),n=r),t){for(i in r={},n)r[i]=t(n[i]);n=r}!function(e,t){var n,r,i,a=e._targets;for(n in t)for(r=a.length;r--;)(i=e._ptLookup[r][n])&&(i=i.d)&&(i._pt&&(i=zn(i,n)),i&&i.modifier&&i.modifier(t[n],e,a[r],n))}(e,n)}}}},Nn=Ln.registerPlugin({name:"attr",init:function(e,t,n,r,i){var a,l,s;for(a in this.tween=n,t)s=e.getAttribute(a)||"",(l=this.add(e,"setAttribute",(s||0)+"",t[a],r,i,0,0,a)).op=a,l.b=s,this._props.push(a)},render:function(e,t){for(var n=t._pt;n;)d?n.set(n.t,n.p,n.b,n):n.r(e,n.d),n=n._next}},{name:"endArray",headless:1,init:function(e,t){for(var n=t.length;n--;)this.add(e,n,e[n]||0,t[n],0,0,0,0,0,1)}},On("roundProps",pt),On("modifiers"),On("snap",ht))||Ln;ln.version=Yt.version=Nn.version="3.13.0",v=1,H()&&At(),Dt.Power0,Dt.Power1,Dt.Power2,Dt.Power3,Dt.Power4,Dt.Linear,Dt.Quad,Dt.Cubic,Dt.Quart,Dt.Quint,Dt.Strong,Dt.Elastic,Dt.Back,Dt.SteppedEase,Dt.Bounce,Dt.Sine,Dt.Expo,Dt.Circ;var An,Dn,Rn,In,Fn,Bn,jn,$n,Vn={},Hn=180/Math.PI,Gn=Math.PI/180,Un=Math.atan2,qn=/([A-Z])/g,Wn=/(left|right|width|margin|padding|x)/i,Yn=/[\s,\(]\S/,Xn={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Qn=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},Kn=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},Zn=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},Jn=function(e,t){var n=t.s+t.c*e;t.set(t.t,t.p,~~(n+(n<0?-.5:.5))+t.u,t)},er=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},tr=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},nr=function(e,t,n){return e.style[t]=n},rr=function(e,t,n){return e.style.setProperty(t,n)},ir=function(e,t,n){return e._gsap[t]=n},ar=function(e,t,n){return e._gsap.scaleX=e._gsap.scaleY=n},lr=function(e,t,n,r,i){var a=e._gsap;a.scaleX=a.scaleY=n,a.renderTransform(i,a)},sr=function(e,t,n,r,i){var a=e._gsap;a[t]=n,a.renderTransform(i,a)},or="transform",ur=or+"Origin",cr=function e(t,n){var r=this,i=this.target,a=i.style,l=i._gsap;if(t in Vn&&a){if(this.tfm=this.tfm||{},"transform"===t)return Xn.transform.split(",").forEach(function(t){return e.call(r,t,n)});if(~(t=Xn[t]||t).indexOf(",")?t.split(",").forEach(function(e){return r.tfm[e]=Pr(i,e)}):this.tfm[t]=l.x?l[t]:Pr(i,t),t===ur&&(this.tfm.zOrigin=l.zOrigin),this.props.indexOf(or)>=0)return;l.svg&&(this.svgo=i.getAttribute("data-svg-origin"),this.props.push(ur,n,"")),t=or}(a||n)&&this.props.push(t,n,a[t])},dr=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},fr=function(){var e,t,n=this.props,r=this.target,i=r.style,a=r._gsap;for(e=0;e<n.length;e+=3)n[e+1]?2===n[e+1]?r[n[e]](n[e+2]):r[n[e]]=n[e+2]:n[e+2]?i[n[e]]=n[e+2]:i.removeProperty("--"===n[e].substr(0,2)?n[e]:n[e].replace(qn,"-$1").toLowerCase());if(this.tfm){for(t in this.tfm)a[t]=this.tfm[t];a.svg&&(a.renderTransform(),r.setAttribute("data-svg-origin",this.svgo||"")),(e=jn())&&e.isStart||i[or]||(dr(i),a.zOrigin&&i[ur]&&(i[ur]+=" "+a.zOrigin+"px",a.zOrigin=0,a.renderTransform()),a.uncache=1)}},pr=function(e,t){var n={target:e,props:[],revert:fr,save:cr};return e._gsap||Nn.core.getCache(e),t&&e.style&&e.nodeType&&t.split(",").forEach(function(e){return n.save(e)}),n},hr=function(e,t){var n=Dn.createElementNS?Dn.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):Dn.createElement(e);return n&&n.style?n:Dn.createElement(e)},mr=function e(t,n,r){var i=getComputedStyle(t);return i[n]||i.getPropertyValue(n.replace(qn,"-$1").toLowerCase())||i.getPropertyValue(n)||!r&&e(t,vr(n)||n,1)||""},gr="O,Moz,ms,Ms,Webkit".split(","),vr=function(e,t,n){var r=(t||Fn).style,i=5;if(e in r&&!n)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);i--&&!(gr[i]+e in r););return i<0?null:(3===i?"ms":i>=0?gr[i]:"")+e},yr=function(){"undefined"!=typeof window&&window.document&&(An=window,Dn=An.document,Rn=Dn.documentElement,Fn=hr("div")||{style:{}},hr("div"),or=vr(or),ur=or+"Origin",Fn.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",$n=!!vr("perspective"),jn=Nn.core.reverting,In=1)},br=function(e){var t,n=e.ownerSVGElement,r=hr("svg",n&&n.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=e.cloneNode(!0);i.style.display="block",r.appendChild(i),Rn.appendChild(r);try{t=i.getBBox()}catch(e){}return r.removeChild(i),Rn.removeChild(r),t},wr=function(e,t){for(var n=t.length;n--;)if(e.hasAttribute(t[n]))return e.getAttribute(t[n])},_r=function(e){var t,n;try{t=e.getBBox()}catch(r){t=br(e),n=1}return t&&(t.width||t.height)||n||(t=br(e)),!t||t.width||t.x||t.y?t:{x:+wr(e,["x","cx","x1"])||0,y:+wr(e,["y","cy","y1"])||0,width:0,height:0}},Sr=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!_r(e))},kr=function(e,t){if(t){var n,r=e.style;t in Vn&&t!==ur&&(t=or),r.removeProperty?("ms"!==(n=t.substr(0,2))&&"webkit"!==t.substr(0,6)||(t="-"+t),r.removeProperty("--"===n?t:t.replace(qn,"-$1").toLowerCase())):r.removeAttribute(t)}},xr=function(e,t,n,r,i,a){var l=new wn(e._pt,t,n,0,1,a?tr:er);return e._pt=l,l.b=r,l.e=i,e._props.push(n),l},Er={deg:1,rad:1,turn:1},Tr={grid:1,flex:1},Cr=function e(t,n,r,i){var a,l,s,o,u=parseFloat(r)||0,c=(r+"").trim().substr((u+"").length)||"px",d=Fn.style,f=Wn.test(n),p="svg"===t.tagName.toLowerCase(),h=(p?"client":"offset")+(f?"Width":"Height"),m=100,g="px"===i,v="%"===i;if(i===c||!u||Er[i]||Er[c])return u;if("px"!==c&&!g&&(u=e(t,n,r,"px")),o=t.getCTM&&Sr(t),(v||"%"===c)&&(Vn[n]||~n.indexOf("adius")))return a=o?t.getBBox()[f?"width":"height"]:t[h],Se(v?u/a*m:u/100*a);if(d[f?"width":"height"]=m+(g?c:i),l="rem"!==i&&~n.indexOf("adius")||"em"===i&&t.appendChild&&!p?t:t.parentNode,o&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==Dn&&l.appendChild||(l=Dn.body),(s=l._gsap)&&v&&s.width&&f&&s.time===Nt.time&&!s.uncache)return Se(u/s.width*m);if(!v||"height"!==n&&"width"!==n)(v||"%"===c)&&!Tr[mr(l,"display")]&&(d.position=mr(t,"position")),l===t&&(d.position="static"),l.appendChild(Fn),a=Fn[h],l.removeChild(Fn),d.position="absolute";else{var y=t.style[n];t.style[n]=m+i,a=t[h],y?t.style[n]=y:kr(t,n)}return f&&v&&((s=be(l)).time=Nt.time,s.width=l[h]),Se(g?a*u/m:a&&u?m/a*u:0)},Pr=function(e,t,n,r){var i;return In||yr(),t in Xn&&"transform"!==t&&~(t=Xn[t]).indexOf(",")&&(t=t.split(",")[0]),Vn[t]&&"transform"!==t?(i=jr(e,r),i="transformOrigin"!==t?i[t]:i.svg?i.origin:$r(mr(e,ur))+" "+i.zOrigin+"px"):(!(i=e.style[t])||"auto"===i||r||~(i+"").indexOf("calc("))&&(i=Nr[t]&&Nr[t](e,t,n)||mr(e,t)||we(e,t)||("opacity"===t?1:0)),n&&!~(i+"").trim().indexOf(" ")?Cr(e,t,i,n)+n:i},Mr=function(e,t,n,r){if(!n||"none"===n){var i=vr(t,e,1),a=i&&mr(e,i,1);a&&a!==n?(t=i,n=a):"borderColor"===t&&(n=mr(e,"borderTopColor"))}var l,s,o,u,c,d,f,p,h,m,g,v=new wn(this._pt,e.style,t,0,1,hn),y=0,b=0;if(v.b=n,v.e=r,n+="","var(--"===(r+="").substring(0,6)&&(r=mr(e,r.substring(4,r.indexOf(")")))),"auto"===r&&(d=e.style[t],e.style[t]=r,r=mr(e,t)||r,d?e.style[t]=d:kr(e,t)),Ot(l=[n,r]),r=l[1],o=(n=l[0]).match(X)||[],(r.match(X)||[]).length){for(;s=X.exec(r);)f=s[0],h=r.substring(y,s.index),c?c=(c+1)%5:"rgba("!==h.substr(-5)&&"hsla("!==h.substr(-5)||(c=1),f!==(d=o[b++]||"")&&(u=parseFloat(d)||0,g=d.substr((u+"").length),"="===f.charAt(1)&&(f=xe(u,f)+g),p=parseFloat(f),m=f.substr((p+"").length),y=X.lastIndex-m.length,m||(m=m||C.units[t]||g,y===r.length&&(r+=m,v.e+=m)),g!==m&&(u=Cr(e,t,d,m)||0),v._pt={_next:v._pt,p:h||1===b?h:",",s:u,c:p-u,m:c&&c<4||"zIndex"===t?Math.round:0});v.c=y<r.length?r.substring(y,r.length):""}else v.r="display"===t&&"none"===r?tr:er;return K.test(r)&&(v.e=0),this._pt=v,v},Lr={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},zr=function(e){var t=e.split(" "),n=t[0],r=t[1]||"50%";return"top"!==n&&"bottom"!==n&&"left"!==r&&"right"!==r||(e=n,n=r,r=e),t[0]=Lr[n]||n,t[1]=Lr[r]||r,t.join(" ")},Or=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var n,r,i,a=t.t,l=a.style,s=t.u,o=a._gsap;if("all"===s||!0===s)l.cssText="",r=1;else for(i=(s=s.split(",")).length;--i>-1;)n=s[i],Vn[n]&&(r=1,n="transformOrigin"===n?ur:or),kr(a,n);r&&(kr(a,or),o&&(o.svg&&a.removeAttribute("transform"),l.scale=l.rotate=l.translate="none",jr(a,1),o.uncache=1,dr(l)))}},Nr={clearProps:function(e,t,n,r,i){if("isFromStart"!==i.data){var a=e._pt=new wn(e._pt,t,n,0,0,Or);return a.u=r,a.pr=-10,a.tween=i,e._props.push(n),1}}},Ar=[1,0,0,1,0,0],Dr={},Rr=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},Ir=function(e){var t=mr(e,or);return Rr(t)?Ar:t.substr(7).match(Y).map(Se)},Fr=function(e,t){var n,r,i,a,l=e._gsap||be(e),s=e.style,o=Ir(e);return l.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(o=[(i=e.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?Ar:o:(o!==Ar||e.offsetParent||e===Rn||l.svg||(i=s.display,s.display="block",(n=e.parentNode)&&(e.offsetParent||e.getBoundingClientRect().width)||(a=1,r=e.nextElementSibling,Rn.appendChild(e)),o=Ir(e),i?s.display=i:kr(e,"display"),a&&(r?n.insertBefore(e,r):n?n.appendChild(e):Rn.removeChild(e))),t&&o.length>6?[o[0],o[1],o[4],o[5],o[12],o[13]]:o)},Br=function(e,t,n,r,i,a){var l,s,o,u=e._gsap,c=i||Fr(e,!0),d=u.xOrigin||0,f=u.yOrigin||0,p=u.xOffset||0,h=u.yOffset||0,m=c[0],g=c[1],v=c[2],y=c[3],b=c[4],w=c[5],_=t.split(" "),S=parseFloat(_[0])||0,k=parseFloat(_[1])||0;n?c!==Ar&&(s=m*y-g*v)&&(o=S*(-g/s)+k*(m/s)-(m*w-g*b)/s,S=S*(y/s)+k*(-v/s)+(v*w-y*b)/s,k=o):(S=(l=_r(e)).x+(~_[0].indexOf("%")?S/100*l.width:S),k=l.y+(~(_[1]||_[0]).indexOf("%")?k/100*l.height:k)),r||!1!==r&&u.smooth?(b=S-d,w=k-f,u.xOffset=p+(b*m+w*v)-b,u.yOffset=h+(b*g+w*y)-w):u.xOffset=u.yOffset=0,u.xOrigin=S,u.yOrigin=k,u.smooth=!!r,u.origin=t,u.originIsAbsolute=!!n,e.style[ur]="0px 0px",a&&(xr(a,u,"xOrigin",d,S),xr(a,u,"yOrigin",f,k),xr(a,u,"xOffset",p,u.xOffset),xr(a,u,"yOffset",h,u.yOffset)),e.setAttribute("data-svg-origin",S+" "+k)},jr=function(e,t){var n=e._gsap||new qt(e);if("x"in n&&!t&&!n.uncache)return n;var r,i,a,l,s,o,u,c,d,f,p,h,m,g,v,y,b,w,_,S,k,x,E,T,P,M,L,z,O,N,A,D,R=e.style,I=n.scaleX<0,F="px",B="deg",j=getComputedStyle(e),$=mr(e,ur)||"0";return r=i=a=o=u=c=d=f=p=0,l=s=1,n.svg=!(!e.getCTM||!Sr(e)),j.translate&&("none"===j.translate&&"none"===j.scale&&"none"===j.rotate||(R[or]=("none"!==j.translate?"translate3d("+(j.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==j.rotate?"rotate("+j.rotate+") ":"")+("none"!==j.scale?"scale("+j.scale.split(" ").join(",")+") ":"")+("none"!==j[or]?j[or]:"")),R.scale=R.rotate=R.translate="none"),g=Fr(e,n.svg),n.svg&&(n.uncache?(P=e.getBBox(),$=n.xOrigin-P.x+"px "+(n.yOrigin-P.y)+"px",T=""):T=!t&&e.getAttribute("data-svg-origin"),Br(e,T||$,!!T||n.originIsAbsolute,!1!==n.smooth,g)),h=n.xOrigin||0,m=n.yOrigin||0,g!==Ar&&(w=g[0],_=g[1],S=g[2],k=g[3],r=x=g[4],i=E=g[5],6===g.length?(l=Math.sqrt(w*w+_*_),s=Math.sqrt(k*k+S*S),o=w||_?Un(_,w)*Hn:0,(d=S||k?Un(S,k)*Hn+o:0)&&(s*=Math.abs(Math.cos(d*Gn))),n.svg&&(r-=h-(h*w+m*S),i-=m-(h*_+m*k))):(D=g[6],N=g[7],L=g[8],z=g[9],O=g[10],A=g[11],r=g[12],i=g[13],a=g[14],u=(v=Un(D,O))*Hn,v&&(T=x*(y=Math.cos(-v))+L*(b=Math.sin(-v)),P=E*y+z*b,M=D*y+O*b,L=x*-b+L*y,z=E*-b+z*y,O=D*-b+O*y,A=N*-b+A*y,x=T,E=P,D=M),c=(v=Un(-S,O))*Hn,v&&(y=Math.cos(-v),A=k*(b=Math.sin(-v))+A*y,w=T=w*y-L*b,_=P=_*y-z*b,S=M=S*y-O*b),o=(v=Un(_,w))*Hn,v&&(T=w*(y=Math.cos(v))+_*(b=Math.sin(v)),P=x*y+E*b,_=_*y-w*b,E=E*y-x*b,w=T,x=P),u&&Math.abs(u)+Math.abs(o)>359.9&&(u=o=0,c=180-c),l=Se(Math.sqrt(w*w+_*_+S*S)),s=Se(Math.sqrt(E*E+D*D)),v=Un(x,E),d=Math.abs(v)>2e-4?v*Hn:0,p=A?1/(A<0?-A:A):0),n.svg&&(T=e.getAttribute("transform"),n.forceCSS=e.setAttribute("transform","")||!Rr(mr(e,or)),T&&e.setAttribute("transform",T))),Math.abs(d)>90&&Math.abs(d)<270&&(I?(l*=-1,d+=o<=0?180:-180,o+=o<=0?180:-180):(s*=-1,d+=d<=0?180:-180)),t=t||n.uncache,n.x=r-((n.xPercent=r&&(!t&&n.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-r)?-50:0)))?e.offsetWidth*n.xPercent/100:0)+F,n.y=i-((n.yPercent=i&&(!t&&n.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-i)?-50:0)))?e.offsetHeight*n.yPercent/100:0)+F,n.z=a+F,n.scaleX=Se(l),n.scaleY=Se(s),n.rotation=Se(o)+B,n.rotationX=Se(u)+B,n.rotationY=Se(c)+B,n.skewX=d+B,n.skewY=f+B,n.transformPerspective=p+F,(n.zOrigin=parseFloat($.split(" ")[2])||!t&&n.zOrigin||0)&&(R[ur]=$r($)),n.xOffset=n.yOffset=0,n.force3D=C.force3D,n.renderTransform=n.svg?Yr:$n?Wr:Hr,n.uncache=0,n},$r=function(e){return(e=e.split(" "))[0]+" "+e[1]},Vr=function(e,t,n){var r=lt(t);return Se(parseFloat(t)+parseFloat(Cr(e,"x",n+"px",r)))+r},Hr=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,Wr(e,t)},Gr="0deg",Ur="0px",qr=") ",Wr=function(e,t){var n=t||this,r=n.xPercent,i=n.yPercent,a=n.x,l=n.y,s=n.z,o=n.rotation,u=n.rotationY,c=n.rotationX,d=n.skewX,f=n.skewY,p=n.scaleX,h=n.scaleY,m=n.transformPerspective,g=n.force3D,v=n.target,y=n.zOrigin,b="",w="auto"===g&&e&&1!==e||!0===g;if(y&&(c!==Gr||u!==Gr)){var _,S=parseFloat(u)*Gn,k=Math.sin(S),x=Math.cos(S);S=parseFloat(c)*Gn,_=Math.cos(S),a=Vr(v,a,k*_*-y),l=Vr(v,l,-Math.sin(S)*-y),s=Vr(v,s,x*_*-y+y)}m!==Ur&&(b+="perspective("+m+qr),(r||i)&&(b+="translate("+r+"%, "+i+"%) "),(w||a!==Ur||l!==Ur||s!==Ur)&&(b+=s!==Ur||w?"translate3d("+a+", "+l+", "+s+") ":"translate("+a+", "+l+qr),o!==Gr&&(b+="rotate("+o+qr),u!==Gr&&(b+="rotateY("+u+qr),c!==Gr&&(b+="rotateX("+c+qr),d===Gr&&f===Gr||(b+="skew("+d+", "+f+qr),1===p&&1===h||(b+="scale("+p+", "+h+qr),v.style[or]=b||"translate(0, 0)"},Yr=function(e,t){var n,r,i,a,l,s=t||this,o=s.xPercent,u=s.yPercent,c=s.x,d=s.y,f=s.rotation,p=s.skewX,h=s.skewY,m=s.scaleX,g=s.scaleY,v=s.target,y=s.xOrigin,b=s.yOrigin,w=s.xOffset,_=s.yOffset,S=s.forceCSS,k=parseFloat(c),x=parseFloat(d);f=parseFloat(f),p=parseFloat(p),(h=parseFloat(h))&&(p+=h=parseFloat(h),f+=h),f||p?(f*=Gn,p*=Gn,n=Math.cos(f)*m,r=Math.sin(f)*m,i=Math.sin(f-p)*-g,a=Math.cos(f-p)*g,p&&(h*=Gn,l=Math.tan(p-h),i*=l=Math.sqrt(1+l*l),a*=l,h&&(l=Math.tan(h),n*=l=Math.sqrt(1+l*l),r*=l)),n=Se(n),r=Se(r),i=Se(i),a=Se(a)):(n=m,a=g,r=i=0),(k&&!~(c+"").indexOf("px")||x&&!~(d+"").indexOf("px"))&&(k=Cr(v,"x",c,"px"),x=Cr(v,"y",d,"px")),(y||b||w||_)&&(k=Se(k+y-(y*n+b*i)+w),x=Se(x+b-(y*r+b*a)+_)),(o||u)&&(l=v.getBBox(),k=Se(k+o/100*l.width),x=Se(x+u/100*l.height)),l="matrix("+n+","+r+","+i+","+a+","+k+","+x+")",v.setAttribute("transform",l),S&&(v.style[or]=l)},Xr=function(e,t,n,r,i){var a,l,s=360,o=I(i),u=parseFloat(i)*(o&&~i.indexOf("rad")?Hn:1)-r,c=r+u+"deg";return o&&("short"===(a=i.split("_")[1])&&(u%=s)!==u%180&&(u+=u<0?s:-360),"cw"===a&&u<0?u=(u+36e9)%s-~~(u/s)*s:"ccw"===a&&u>0&&(u=(u-36e9)%s-~~(u/s)*s)),e._pt=l=new wn(e._pt,t,n,r,u,Kn),l.e=c,l.u="deg",e._props.push(n),l},Qr=function(e,t){for(var n in t)e[n]=t[n];return e},Kr=function(e,t,n){var r,i,a,l,s,o,u,c=Qr({},n._gsap),d=n.style;for(i in c.svg?(a=n.getAttribute("transform"),n.setAttribute("transform",""),d[or]=t,r=jr(n,1),kr(n,or),n.setAttribute("transform",a)):(a=getComputedStyle(n)[or],d[or]=t,r=jr(n,1),d[or]=a),Vn)(a=c[i])!==(l=r[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(s=lt(a)!==(u=lt(l))?Cr(n,i,a,u):parseFloat(a),o=parseFloat(l),e._pt=new wn(e._pt,r,i,s,o-s,Qn),e._pt.u=u||0,e._props.push(i));Qr(r,c)};_e("padding,margin,Width,Radius",function(e,t){var n="Top",r="Right",i="Bottom",a="Left",l=(t<3?[n,r,i,a]:[n+a,n+r,i+r,i+a]).map(function(n){return t<2?e+n:"border"+n+e});Nr[t>1?"border"+e:e]=function(e,t,n,r,i){var a,s;if(arguments.length<4)return a=l.map(function(t){return Pr(e,t,n)}),5===(s=a.join(" ")).split(a[0]).length?a[0]:s;a=(r+"").split(" "),s={},l.forEach(function(e,t){return s[e]=a[t]=a[t]||a[(t-1)/2|0]}),e.init(t,s,i)}});var Zr,Jr,ei={name:"css",register:yr,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,n,r,i){var a,l,s,o,u,c,d,f,p,h,m,g,v,y,b,w,_=this._props,S=e.style,k=n.vars.startAt;for(d in In||yr(),this.styles=this.styles||pr(e),w=this.styles.props,this.tween=n,t)if("autoRound"!==d&&(l=t[d],!pe[d]||!Jt(d,t,n,r,e,i)))if(u=typeof l,c=Nr[d],"function"===u&&(u=typeof(l=l.call(n,r,e,i))),"string"===u&&~l.indexOf("random(")&&(l=vt(l)),c)c(this,e,d,l,n)&&(b=1);else if("--"===d.substr(0,2))a=(getComputedStyle(e).getPropertyValue(d)+"").trim(),l+="",Lt.lastIndex=0,Lt.test(a)||(f=lt(a),p=lt(l)),p?f!==p&&(a=Cr(e,d,a,p)+p):f&&(l+=f),this.add(S,"setProperty",a,l,r,i,0,0,d),_.push(d),w.push(d,0,S[d]);else if("undefined"!==u){if(k&&d in k?(a="function"==typeof k[d]?k[d].call(n,r,e,i):k[d],I(a)&&~a.indexOf("random(")&&(a=vt(a)),lt(a+"")||"auto"===a||(a+=C.units[d]||lt(Pr(e,d))||""),"="===(a+"").charAt(1)&&(a=Pr(e,d))):a=Pr(e,d),o=parseFloat(a),(h="string"===u&&"="===l.charAt(1)&&l.substr(0,2))&&(l=l.substr(2)),s=parseFloat(l),d in Xn&&("autoAlpha"===d&&(1===o&&"hidden"===Pr(e,"visibility")&&s&&(o=0),w.push("visibility",0,S.visibility),xr(this,S,"visibility",o?"inherit":"hidden",s?"inherit":"hidden",!s)),"scale"!==d&&"transform"!==d&&~(d=Xn[d]).indexOf(",")&&(d=d.split(",")[0])),m=d in Vn)if(this.styles.save(d),"string"===u&&"var(--"===l.substring(0,6)&&(l=mr(e,l.substring(4,l.indexOf(")"))),s=parseFloat(l)),g||((v=e._gsap).renderTransform&&!t.parseTransform||jr(e,t.parseTransform),y=!1!==t.smoothOrigin&&v.smooth,(g=this._pt=new wn(this._pt,S,or,0,1,v.renderTransform,v,0,-1)).dep=1),"scale"===d)this._pt=new wn(this._pt,v,"scaleY",v.scaleY,(h?xe(v.scaleY,h+s):s)-v.scaleY||0,Qn),this._pt.u=0,_.push("scaleY",d),d+="X";else{if("transformOrigin"===d){w.push(ur,0,S[ur]),l=zr(l),v.svg?Br(e,l,0,y,0,this):((p=parseFloat(l.split(" ")[2])||0)!==v.zOrigin&&xr(this,v,"zOrigin",v.zOrigin,p),xr(this,S,d,$r(a),$r(l)));continue}if("svgOrigin"===d){Br(e,l,1,y,0,this);continue}if(d in Dr){Xr(this,v,d,o,h?xe(o,h+l):l);continue}if("smoothOrigin"===d){xr(this,v,"smooth",v.smooth,l);continue}if("force3D"===d){v[d]=l;continue}if("transform"===d){Kr(this,l,e);continue}}else d in S||(d=vr(d)||d);if(m||(s||0===s)&&(o||0===o)&&!Yn.test(l)&&d in S)s||(s=0),(f=(a+"").substr((o+"").length))!==(p=lt(l)||(d in C.units?C.units[d]:f))&&(o=Cr(e,d,a,p)),this._pt=new wn(this._pt,m?v:S,d,o,(h?xe(o,h+s):s)-o,m||"px"!==p&&"zIndex"!==d||!1===t.autoRound?Qn:Jn),this._pt.u=p||0,f!==p&&"%"!==p&&(this._pt.b=a,this._pt.r=Zn);else if(d in S)Mr.call(this,e,d,a,h?h+l:l);else if(d in e)this.add(e,d,a||e[d],h?h+l:l,r,i);else if("parseTransform"!==d){re(d,l);continue}m||(d in S?w.push(d,0,S[d]):"function"==typeof e[d]?w.push(d,2,e[d]()):w.push(d,1,a||e[d])),_.push(d)}b&&bn(this)},render:function(e,t){if(t.tween._time||!jn())for(var n=t._pt;n;)n.r(e,n.d),n=n._next;else t.styles.revert()},get:Pr,aliases:Xn,getSetter:function(e,t,n){var r=Xn[t];return r&&r.indexOf(",")<0&&(t=r),t in Vn&&t!==ur&&(e._gsap.x||Pr(e,"x"))?n&&Bn===n?"scale"===t?ar:ir:(Bn=n||{})&&("scale"===t?lr:sr):e.style&&!j(e.style[t])?nr:~t.indexOf("-")?rr:dn(e,t)},core:{_removeProperty:kr,_getMatrix:Fr}};Nn.utils.checkPrefix=vr,Nn.core.getStyleSaver=pr,Jr=_e("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(Zr="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",function(e){Vn[e]=1}),_e(Zr,function(e){C.units[e]="deg",Dr[e]=1}),Xn[Jr[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+Zr,_e("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",function(e){var t=e.split(":");Xn[t[1]]=Jr[t[0]]}),_e("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",function(e){C.units[e]="px"}),Nn.registerPlugin(ei);var ti=Nn.registerPlugin(ei)||Nn;ti.core.Tween;let ni="undefined"!=typeof document?a.useLayoutEffect:a.useEffect,ri=e=>e&&!Array.isArray(e)&&"object"==typeof e,ii=[],ai={},li=ti;const si=(e,t=ii)=>{let n=ai;ri(e)?(n=e,e=null,t="dependencies"in n?n.dependencies:ii):ri(t)&&(n=t,t="dependencies"in n?n.dependencies:ii),e&&"function"!=typeof e&&console.warn("First parameter must be a function or config object");const{scope:r,revertOnUpdate:i}=n,l=(0,a.useRef)(!1),s=(0,a.useRef)(li.context(()=>{},r)),o=(0,a.useRef)(e=>s.current.add(null,e)),u=t&&t.length&&!i;return u&&ni(()=>(l.current=!0,()=>s.current.revert()),ii),ni(()=>{if(e&&s.current.add(e,r),!u||!l.current)return()=>s.current.revert()},t),{context:s.current,contextSafe:o.current}};si.register=e=>{li=e},si.headless=!0;var oi=/[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,ui=/(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,ci=/[\+\-]?\d*\.?\d+e[\+\-]?\d+/gi,di=/(^[#\.][a-z]|[a-y][a-z])/i,fi=Math.PI/180,pi=180/Math.PI,hi=Math.sin,mi=Math.cos,gi=Math.abs,vi=Math.sqrt,yi=Math.atan2,bi=1e8,wi=function(e){return"string"==typeof e},_i=function(e){return"number"==typeof e},Si={},ki={},xi=1e5,Ei=function(e){return Math.round((e+bi)%1*xi)/xi||(e<0?0:1)},Ti=function(e){return Math.round(e*xi)/xi||0},Ci=function(e){return Math.round(1e10*e)/1e10||0},Pi=function(e,t,n,r){var i=e[t],a=1===r?6:Bi(i,n,r);if((a||!r)&&a+n+2<i.length)return e.splice(t,0,i.slice(0,n+a+2)),i.splice(0,n+a),1},Mi=function(e,t,n){var r=e.length,i=~~(n*r);if(e[i]>t){for(;--i&&e[i]>t;);i<0&&(i=0)}else for(;e[++i]<t&&i<r;);return i<r?i:r-1},Li=function(e,t){return t.totalLength=e.totalLength,e.samples?(t.samples=e.samples.slice(0),t.lookup=e.lookup.slice(0),t.minLength=e.minLength,t.resolution=e.resolution):e.totalPoints&&(t.totalPoints=e.totalPoints),t},zi=function(e,t){var n=e.length,r=e[n-1]||[],i=r.length;n&&t[0]===r[i-2]&&t[1]===r[i-1]&&(t=r.concat(t.slice(2)),n--),e[n]=t};function Oi(e){var t,n=(e=wi(e)&&di.test(e)&&document.querySelector(e)||e).getAttribute?e:0;return n&&(e=e.getAttribute("d"))?(n._gsPath||(n._gsPath={}),(t=n._gsPath[e])&&!t._dirty?t:n._gsPath[e]=Gi(e)):e?wi(e)?Gi(e):_i(e[0])?[e]:e:console.warn("Expecting a <path> element or an SVG path data string")}function Ni(e){var t,n=0;for(e.reverse();n<e.length;n+=2)t=e[n],e[n]=e[n+1],e[n+1]=t;e.reversed=!e.reversed}var Ai={rect:"rx,ry,x,y,width,height",circle:"r,cx,cy",ellipse:"rx,ry,cx,cy",line:"x1,x2,y1,y2"};function Di(e,t,n){var r,i=e[t],a=e[t+2],l=e[t+4];return i+=(a-i)*n,i+=((a+=(l-a)*n)-i)*n,r=a+(l+(e[t+6]-l)*n-a)*n-i,i=e[t+1],i+=((a=e[t+3])-i)*n,i+=((a+=((l=e[t+5])-a)*n)-i)*n,Ti(yi(a+(l+(e[t+7]-l)*n-a)*n-i,r)*pi)}function Ri(e,t,n){n=void 0===n?1:Ci(n)||0,t=Ci(t)||0;var r=Math.max(0,~~(gi(n-t)-1e-8)),i=function(e){for(var t=[],n=0;n<e.length;n++)t[n]=Li(e[n],e[n].slice(0));return Li(e,t)}(e);if(t>n&&(t=1-t,n=1-n,function(e){var t=e.length;for(e.reverse();t--;)e[t].reversed||Ni(e[t])}(i),i.totalLength=0),t<0||n<0){var a=Math.abs(~~Math.min(t,n))+1;t+=a,n+=a}i.totalLength||Fi(i);var l,s,o,u,c,d,f,p,h=n>1,m=ji(i,t,Si,!0),g=ji(i,n,ki),v=g.segment,y=m.segment,b=g.segIndex,w=m.segIndex,_=g.i,S=m.i,k=w===b,x=_===S&&k;if(h||r){for(l=b<w||k&&_<S||x&&g.t<m.t,Pi(i,w,S,m.t)&&(w++,l||(b++,x?(g.t=(g.t-m.t)/(1-m.t),_=0):k&&(_-=S))),Math.abs(1-(n-t))<1e-5?b=w-1:!g.t&&b?b--:Pi(i,b,_,g.t)&&l&&w++,1===m.t&&(w=(w+1)%i.length),c=[],f=1+(d=i.length)*r,p=w,f+=(d-w+b)%d,u=0;u<f;u++)zi(c,i[p++%d]);i=c}else if(o=1===g.t?6:Bi(v,_,g.t),t!==n)for(s=Bi(y,S,x?m.t/g.t:m.t),k&&(o+=s),v.splice(_+o+2),(s||S)&&y.splice(0,S+s),u=i.length;u--;)(u<w||u>b)&&i.splice(u,1);else v.angle=Di(v,_+o,0),m=v[_+=o],g=v[_+1],v.length=v.totalLength=0,v.totalPoints=i.totalPoints=8,v.push(m,g,m,g,m,g,m,g);return i.totalLength=0,i}function Ii(e,t,n){t=t||0,e.samples||(e.samples=[],e.lookup=[]);var r,i,a,l,s,o,u,c,d,f,p,h,m,g,v,y,b,w=~~e.resolution||12,_=1/w,S=n?t+6*n+1:e.length,k=e[t],x=e[t+1],E=t?t/6*w:0,T=e.samples,C=e.lookup,P=(t?e.minLength:bi)||bi,M=T[E+n*w-1],L=t?T[E-1]:0;for(T.length=C.length=0,i=t+2;i<S;i+=6){if(a=e[i+4]-k,l=e[i+2]-k,s=e[i]-k,c=e[i+5]-x,d=e[i+3]-x,f=e[i+1]-x,o=u=p=h=0,gi(a)<.01&&gi(c)<.01&&gi(s)+gi(f)<.01)e.length>8&&(e.splice(i,6),i-=6,S-=6);else for(r=1;r<=w;r++)o=u-(u=((g=_*r)*g*a+3*(m=1-g)*(g*l+m*s))*g),p=h-(h=(g*g*c+3*m*(g*d+m*f))*g),(y=vi(p*p+o*o))<P&&(P=y),L+=y,T[E++]=L;k+=a,x+=c}if(M)for(M-=L;E<T.length;E++)T[E]+=M;if(T.length&&P){if(e.totalLength=b=T[T.length-1]||0,e.minLength=P,b/P<9999)for(y=v=0,r=0;r<b;r+=P)C[y++]=T[v]<r?++v:v}else e.totalLength=T[0]=0;return t?L-T[t/2-1]:L}function Fi(e,t){var n,r,i;for(i=n=r=0;i<e.length;i++)e[i].resolution=~~t||12,r+=e[i].length,n+=Ii(e[i]);return e.totalPoints=r,e.totalLength=n,e}function Bi(e,t,n){if(n<=0||n>=1)return 0;var r=e[t],i=e[t+1],a=e[t+2],l=e[t+3],s=e[t+4],o=e[t+5],u=r+(a-r)*n,c=a+(s-a)*n,d=i+(l-i)*n,f=l+(o-l)*n,p=u+(c-u)*n,h=d+(f-d)*n,m=s+(e[t+6]-s)*n,g=o+(e[t+7]-o)*n;return c+=(m-c)*n,f+=(g-f)*n,e.splice(t+2,4,Ti(u),Ti(d),Ti(p),Ti(h),Ti(p+(c-p)*n),Ti(h+(f-h)*n),Ti(c),Ti(f),Ti(m),Ti(g)),e.samples&&e.samples.splice(t/6*e.resolution|0,0,0,0,0,0,0,0),6}function ji(e,t,n,r){n=n||{},e.totalLength||Fi(e),(t<0||t>1)&&(t=Ei(t));var i,a,l,s,o,u,c,d=0,f=e[0];if(t)if(1===t)c=1,u=(f=e[d=e.length-1]).length-8;else{if(e.length>1){for(l=e.totalLength*t,o=u=0;(o+=e[u++].totalLength)<l;)d=u;t=(l-(s=o-(f=e[d]).totalLength))/(o-s)||0}i=f.samples,a=f.resolution,l=f.totalLength*t,s=(u=f.lookup.length?f.lookup[~~(l/f.minLength)]||0:Mi(i,l,t))?i[u-1]:0,(o=i[u])<l&&(s=o,o=i[++u]),c=1/a*((l-s)/(o-s)+u%a),u=6*~~(u/a),r&&1===c&&(u+6<f.length?(u+=6,c=0):d+1<e.length&&(u=c=0,f=e[++d]))}else c=u=d=0,f=e[0];return n.t=c,n.i=u,n.path=e,n.segment=f,n.segIndex=d,n}function $i(e,t,n,r){var i,a,l,s,o,u,c,d,f,p=e[0],h=r||{};if((t<0||t>1)&&(t=Ei(t)),p.lookup||Fi(e),e.length>1){for(l=e.totalLength*t,o=u=0;(o+=e[u++].totalLength)<l;)p=e[u];t=(l-(s=o-p.totalLength))/(o-s)||0}return i=p.samples,a=p.resolution,l=p.totalLength*t,s=(u=p.lookup.length?p.lookup[t<1?~~(l/p.minLength):p.lookup.length-1]||0:Mi(i,l,t))?i[u-1]:0,(o=i[u])<l&&(s=o,o=i[++u]),f=1-(c=1/a*((l-s)/(o-s)+u%a)||0),d=p[u=6*~~(u/a)],h.x=Ti((c*c*(p[u+6]-d)+3*f*(c*(p[u+4]-d)+f*(p[u+2]-d)))*c+d),h.y=Ti((c*c*(p[u+7]-(d=p[u+1]))+3*f*(c*(p[u+5]-d)+f*(p[u+3]-d)))*c+d),n&&(h.angle=p.totalLength?Di(p,u,c>=1?1-1e-9:c||1e-9):p.angle||0),h}function Vi(e,t,n,r,i,a,l){for(var s,o,u,c,d,f=e.length;--f>-1;)for(o=(s=e[f]).length,u=0;u<o;u+=2)c=s[u],d=s[u+1],s[u]=c*t+d*r+a,s[u+1]=c*n+d*i+l;return e._dirty=1,e}function Hi(e,t,n,r,i,a,l,s,o){if(e!==s||t!==o){n=gi(n),r=gi(r);var u=i%360*fi,c=mi(u),d=hi(u),f=Math.PI,p=2*f,h=(e-s)/2,m=(t-o)/2,g=c*h+d*m,v=-d*h+c*m,y=g*g,b=v*v,w=y/(n*n)+b/(r*r);w>1&&(n=vi(w)*n,r=vi(w)*r);var _=n*n,S=r*r,k=(_*S-_*b-S*y)/(_*b+S*y);k<0&&(k=0);var x=(a===l?-1:1)*vi(k),E=x*(n*v/r),T=x*(-r*g/n),C=(e+s)/2+(c*E-d*T),P=(t+o)/2+(d*E+c*T),M=(g-E)/n,L=(v-T)/r,z=(-g-E)/n,O=(-v-T)/r,N=M*M+L*L,A=(L<0?-1:1)*Math.acos(M/vi(N)),D=(M*O-L*z<0?-1:1)*Math.acos((M*z+L*O)/vi(N*(z*z+O*O)));isNaN(D)&&(D=f),!l&&D>0?D-=p:l&&D<0&&(D+=p),A%=p,D%=p;var R,I=Math.ceil(gi(D)/(p/4)),F=[],B=D/I,j=4/3*hi(B/2)/(1+mi(B/2)),$=c*n,V=d*n,H=d*-r,G=c*r;for(R=0;R<I;R++)g=mi(i=A+R*B),v=hi(i),M=mi(i+=B),L=hi(i),F.push(g-j*v,v+j*g,M+j*L,L-j*M,M,L);for(R=0;R<F.length;R+=2)g=F[R],v=F[R+1],F[R]=g*$+v*H+C,F[R+1]=g*V+v*G+P;return F[R-2]=s,F[R-1]=o,F}}function Gi(e){var t,n,r,i,a,l,s,o,u,c,d,f,p,h,m,g=(e+"").replace(ci,function(e){var t=+e;return t<1e-4&&t>-1e-4?0:t}).match(oi)||[],v=[],y=0,b=0,w=2/3,_=g.length,S=0,k="ERROR: malformed path: "+e,x=function(e,t,n,r){c=(n-e)/3,d=(r-t)/3,s.push(e+c,t+d,n-c,r-d,n,r)};if(!e||!isNaN(g[0])||isNaN(g[1]))return console.log(k),v;for(t=0;t<_;t++)if(p=a,isNaN(g[t])?l=(a=g[t].toUpperCase())!==g[t]:t--,r=+g[t+1],i=+g[t+2],l&&(r+=y,i+=b),t||(o=r,u=i),"M"===a)s&&(s.length<8?v.length-=1:S+=s.length),y=o=r,b=u=i,s=[r,i],v.push(s),t+=2,a="L";else if("C"===a)s||(s=[0,0]),l||(y=b=0),s.push(r,i,y+1*g[t+3],b+1*g[t+4],y+=1*g[t+5],b+=1*g[t+6]),t+=6;else if("S"===a)c=y,d=b,"C"!==p&&"S"!==p||(c+=y-s[s.length-4],d+=b-s[s.length-3]),l||(y=b=0),s.push(c,d,r,i,y+=1*g[t+3],b+=1*g[t+4]),t+=4;else if("Q"===a)c=y+(r-y)*w,d=b+(i-b)*w,l||(y=b=0),y+=1*g[t+3],b+=1*g[t+4],s.push(c,d,y+(r-y)*w,b+(i-b)*w,y,b),t+=4;else if("T"===a)c=y-s[s.length-4],d=b-s[s.length-3],s.push(y+c,b+d,r+(y+1.5*c-r)*w,i+(b+1.5*d-i)*w,y=r,b=i),t+=2;else if("H"===a)x(y,b,y=r,b),t+=1;else if("V"===a)x(y,b,y,b=r+(l?b-y:0)),t+=1;else if("L"===a||"Z"===a)"Z"===a&&(r=o,i=u,s.closed=!0),("L"===a||gi(y-r)>.5||gi(b-i)>.5)&&(x(y,b,r,i),"L"===a&&(t+=2)),y=r,b=i;else if("A"===a){if(h=g[t+4],m=g[t+5],c=g[t+6],d=g[t+7],n=7,h.length>1&&(h.length<3?(d=c,c=m,n--):(d=m,c=h.substr(2),n-=2),m=h.charAt(1),h=h.charAt(0)),f=Hi(y,b,+g[t+1],+g[t+2],+g[t+3],+h,+m,(l?y:0)+1*c,(l?b:0)+1*d),t+=n,f)for(n=0;n<f.length;n++)s.push(f[n]);y=s[s.length-2],b=s[s.length-1]}else console.log(k);return(t=s.length)<6?(v.pop(),t=0):s[0]===s[t-2]&&s[1]===s[t-1]&&(s.closed=!0),v.totalPoints=S+t,v}function Ui(e,t){void 0===t&&(t=1);for(var n=e[0],r=0,i=[n,r],a=2;a<e.length;a+=2)i.push(n,r,e[a],r=(e[a]-n)*t/2,n=e[a],-r);return i}function qi(e,t){gi(e[0]-e[2])<1e-4&&gi(e[1]-e[3])<1e-4&&(e=e.slice(2));var n,r,i,a,l,s,o,u,c,d,f,p,h,m,g=e.length-2,v=+e[0],y=+e[1],b=+e[2],w=+e[3],_=[v,y,v,y],S=b-v,k=w-y,x=Math.abs(e[g]-v)<.001&&Math.abs(e[g+1]-y)<.001;for(x&&(e.push(b,w),b=v,w=y,v=e[g-2],y=e[g-1],e.unshift(v,y),g+=4),t=t||0===t?+t:1,i=2;i<g;i+=2)n=v,r=y,v=b,y=w,b=+e[i+2],w=+e[i+3],v===b&&y===w||(a=S,l=k,S=b-v,k=w-y,u=((s=vi(a*a+l*l))+(o=vi(S*S+k*k)))*t*.25/vi(Math.pow(S/o+a/s,2)+Math.pow(k/o+l/s,2)),f=v-((c=v-(v-n)*(s?u/s:0))+(((d=v+(b-v)*(o?u/o:0))-c)*(3*s/(s+o)+.5)/4||0)),m=y-((p=y-(y-r)*(s?u/s:0))+(((h=y+(w-y)*(o?u/o:0))-p)*(3*s/(s+o)+.5)/4||0)),v===n&&y===r||_.push(Ti(c+f),Ti(p+m),Ti(v),Ti(y),Ti(d+f),Ti(h+m)));return v!==b||y!==w||_.length<4?_.push(Ti(b),Ti(w),Ti(b),Ti(w)):_.length-=2,2===_.length?_.push(v,y,v,y,v,y):x&&(_.splice(0,6),_.length=_.length-6),_}function Wi(e){_i(e[0])&&(e=[e]);var t,n,r,i,a="",l=e.length;for(n=0;n<l;n++){for(i=e[n],a+="M"+Ti(i[0])+","+Ti(i[1])+" C",t=i.length,r=2;r<t;r++)a+=Ti(i[r++])+","+Ti(i[r++])+" "+Ti(i[r++])+","+Ti(i[r++])+" "+Ti(i[r++])+","+Ti(i[r])+" ";i.closed&&(a+="z")}return a}var Yi,Xi,Qi,Ki,Zi,Ji,ea,ta,na,ra="transform",ia=ra+"Origin",aa=function(e){var t=e.ownerDocument||e;!(ra in e.style)&&"msTransform"in e.style&&(ia=(ra="msTransform")+"Origin");for(;t.parentNode&&(t=t.parentNode););if(Xi=window,ea=new fa,t){Yi=t,Qi=t.documentElement,Ki=t.body,(ta=Yi.createElementNS("http://www.w3.org/2000/svg","g")).style.transform="none";var n=t.createElement("div"),r=t.createElement("div"),i=t&&(t.body||t.firstElementChild);i&&i.appendChild&&(i.appendChild(n),n.appendChild(r),n.setAttribute("style","position:static;transform:translate3d(0,0,1px)"),na=r.offsetParent!==n,i.removeChild(n))}return t},la=[],sa=[],oa=function(e){return e.ownerSVGElement||("svg"===(e.tagName+"").toLowerCase()?e:null)},ua=function e(t){return"fixed"===Xi.getComputedStyle(t).position||((t=t.parentNode)&&1===t.nodeType?e(t):void 0)},ca=function e(t,n){if(t.parentNode&&(Yi||aa(t))){var r=oa(t),i=r?r.getAttribute("xmlns")||"http://www.w3.org/2000/svg":"http://www.w3.org/1999/xhtml",a=r?n?"rect":"g":"div",l=2!==n?0:100,s=3===n?100:0,o="position:absolute;display:block;pointer-events:none;margin:0;padding:0;",u=Yi.createElementNS?Yi.createElementNS(i.replace(/^https/,"http"),a):Yi.createElement(a);return n&&(r?(Ji||(Ji=e(t)),u.setAttribute("width",.01),u.setAttribute("height",.01),u.setAttribute("transform","translate("+l+","+s+")"),Ji.appendChild(u)):(Zi||((Zi=e(t)).style.cssText=o),u.style.cssText=o+"width:0.1px;height:0.1px;top:"+s+"px;left:"+l+"px",Zi.appendChild(u))),u}throw"Need document and parent."},da=function(e,t,n,r,i,a,l){return e.a=t,e.b=n,e.c=r,e.d=i,e.e=a,e.f=l,e},fa=function(){function e(e,t,n,r,i,a){void 0===e&&(e=1),void 0===t&&(t=0),void 0===n&&(n=0),void 0===r&&(r=1),void 0===i&&(i=0),void 0===a&&(a=0),da(this,e,t,n,r,i,a)}var t=e.prototype;return t.inverse=function(){var e=this.a,t=this.b,n=this.c,r=this.d,i=this.e,a=this.f,l=e*r-t*n||1e-10;return da(this,r/l,-t/l,-n/l,e/l,(n*a-r*i)/l,-(e*a-t*i)/l)},t.multiply=function(e){var t=this.a,n=this.b,r=this.c,i=this.d,a=this.e,l=this.f,s=e.a,o=e.c,u=e.b,c=e.d,d=e.e,f=e.f;return da(this,s*t+u*r,s*n+u*i,o*t+c*r,o*n+c*i,a+d*t+f*r,l+d*n+f*i)},t.clone=function(){return new e(this.a,this.b,this.c,this.d,this.e,this.f)},t.equals=function(e){var t=this.a,n=this.b,r=this.c,i=this.d,a=this.e,l=this.f;return t===e.a&&n===e.b&&r===e.c&&i===e.d&&a===e.e&&l===e.f},t.apply=function(e,t){void 0===t&&(t={});var n=e.x,r=e.y,i=this.a,a=this.b,l=this.c,s=this.d,o=this.e,u=this.f;return t.x=n*i+r*l+o||0,t.y=n*a+r*s+u||0,t},e}();function pa(e,t,n,r){if(!e||!e.parentNode||(Yi||aa(e)).documentElement===e)return new fa;var i=function(e){for(var t,n;e&&e!==Ki;)(n=e._gsap)&&n.uncache&&n.get(e,"x"),n&&!n.scaleX&&!n.scaleY&&n.renderTransform&&(n.scaleX=n.scaleY=1e-4,n.renderTransform(1,n),t?t.push(n):t=[n]),e=e.parentNode;return t}(e),a=oa(e)?la:sa,l=function(e,t){var n,r,i,a,l,s,o=oa(e),u=e===o,c=o?la:sa,d=e.parentNode,f=d&&!o&&d.shadowRoot&&d.shadowRoot.appendChild?d.shadowRoot:d;if(e===Xi)return e;if(c.length||c.push(ca(e,1),ca(e,2),ca(e,3)),n=o?Ji:Zi,o)u?(i=function(e){var t,n=e.getCTM();return n||(t=e.style[ra],e.style[ra]="none",e.appendChild(ta),n=ta.getCTM(),e.removeChild(ta),t?e.style[ra]=t:e.style.removeProperty(ra.replace(/([A-Z])/g,"-$1").toLowerCase())),n||ea.clone()}(e),a=-i.e/i.a,l=-i.f/i.d,r=ea):e.getBBox?(i=e.getBBox(),r=(r=e.transform?e.transform.baseVal:{}).numberOfItems?r.numberOfItems>1?function(e){for(var t=new fa,n=0;n<e.numberOfItems;n++)t.multiply(e.getItem(n).matrix);return t}(r):r.getItem(0).matrix:ea,a=r.a*i.x+r.c*i.y,l=r.b*i.x+r.d*i.y):(r=new fa,a=l=0),t&&"g"===e.tagName.toLowerCase()&&(a=l=0),(u?o:d).appendChild(n),n.setAttribute("transform","matrix("+r.a+","+r.b+","+r.c+","+r.d+","+(r.e+a)+","+(r.f+l)+")");else{if(a=l=0,na)for(r=e.offsetParent,i=e;i&&(i=i.parentNode)&&i!==r&&i.parentNode;)(Xi.getComputedStyle(i)[ra]+"").length>4&&(a=i.offsetLeft,l=i.offsetTop,i=0);if("absolute"!==(s=Xi.getComputedStyle(e)).position&&"fixed"!==s.position)for(r=e.offsetParent;d&&d!==r;)a+=d.scrollLeft||0,l+=d.scrollTop||0,d=d.parentNode;(i=n.style).top=e.offsetTop-l+"px",i.left=e.offsetLeft-a+"px",i[ra]=s[ra],i[ia]=s[ia],i.position="fixed"===s.position?"fixed":"absolute",f.appendChild(n)}return n}(e,n),s=a[0].getBoundingClientRect(),o=a[1].getBoundingClientRect(),u=a[2].getBoundingClientRect(),c=l.parentNode,d=!r&&ua(e),f=new fa((o.left-s.left)/100,(o.top-s.top)/100,(u.left-s.left)/100,(u.top-s.top)/100,s.left+(d?0:Xi.pageXOffset||Yi.scrollLeft||Qi.scrollLeft||Ki.scrollLeft||0),s.top+(d?0:Xi.pageYOffset||Yi.scrollTop||Qi.scrollTop||Ki.scrollTop||0));if(c.removeChild(l),i)for(s=i.length;s--;)(o=i[s]).scaleX=o.scaleY=0,o.renderTransform(1,o);return t?f.inverse():f}var ha,ma,ga,va,ya,ba,wa="x,translateX,left,marginLeft,xPercent".split(","),_a="y,translateY,top,marginTop,yPercent".split(","),Sa=Math.PI/180,ka=function(e,t,n,r){for(var i=t.length,a=2===r?0:r,l=0;l<i;l++)e[a]=parseFloat(t[l][n]),2===r&&(e[a+1]=0),a+=2;return e},xa=function(e,t,n){return parseFloat(e._gsap.get(e,t,n||"px"))||0},Ea=function(e){var t,n=e[0],r=e[1];for(t=2;t<e.length;t+=2)n=e[t]+=n,r=e[t+1]+=r},Ta=function(e,t,n,r,i,a,l,s,o){return"cubic"===l.type?t=[t]:(!1!==l.fromCurrent&&t.unshift(xa(n,r,s),i?xa(n,i,o):0),l.relative&&Ea(t),t=[(i?qi:Ui)(t,l.curviness)]),t=a(za(t,n,l)),Oa(e,n,r,t,"x",s),i&&Oa(e,n,i,t,"y",o),Fi(t,l.resolution||(0===l.curviness?20:12))},Ca=function(e){return e},Pa=/[-+\.]*\d+\.?(?:e-|e\+)?\d*/g,Ma=function(e,t,n){var r,i=pa(e),a=0,l=0;return"svg"===(e.tagName+"").toLowerCase()?(r=e.viewBox.baseVal).width||(r={width:+e.getAttribute("width"),height:+e.getAttribute("height")}):r=t&&e.getBBox&&e.getBBox(),t&&"auto"!==t&&(a=t.push?t[0]*(r?r.width:e.offsetWidth||0):t.x,l=t.push?t[1]*(r?r.height:e.offsetHeight||0):t.y),n.apply(a||l?i.apply({x:a,y:l}):{x:i.e,y:i.f})},La=function(e,t,n,r){var i,a=pa(e.parentNode,!0,!0),l=a.clone().multiply(pa(t)),s=Ma(e,n,a),o=Ma(t,r,a),u=o.x,c=o.y;return l.e=l.f=0,"auto"===r&&t.getTotalLength&&"path"===t.tagName.toLowerCase()&&(i=t.getAttribute("d").match(Pa)||[],u+=(i=l.apply({x:+i[0],y:+i[1]})).x,c+=i.y),i&&(u-=(i=l.apply(t.getBBox())).x,c-=i.y),l.e=u-s.x,l.f=c-s.y,l},za=function(e,t,n){var r,i,a,l=n.align,s=n.matrix,o=n.offsetX,u=n.offsetY,c=n.alignOrigin,d=e[0][0],f=e[0][1],p=xa(t,"x"),h=xa(t,"y");return e&&e.length?(l&&("self"===l||(r=va(l)[0]||t)===t?Vi(e,1,0,0,1,p-d,h-f):(c&&!1!==c[2]?ha.set(t,{transformOrigin:100*c[0]+"% "+100*c[1]+"%"}):c=[xa(t,"xPercent")/-100,xa(t,"yPercent")/-100],a=(i=La(t,r,c,"auto")).apply({x:d,y:f}),Vi(e,i.a,i.b,i.c,i.d,p+i.e-(a.x-i.e),h+i.f-(a.y-i.f)))),s?Vi(e,s.a,s.b,s.c,s.d,s.e,s.f):(o||u)&&Vi(e,1,0,0,1,o||0,u||0),e):Oi("M0,0L0,0")},Oa=function(e,t,n,r,i,a){var l=t._gsap,s=l.harness,o=s&&s.aliases&&s.aliases[n],u=o&&o.indexOf(",")<0?o:n,c=e._pt=new ma(e._pt,t,u,0,0,Ca,0,l.set(t,u,e));c.u=ga(l.get(t,u,a))||0,c.path=r,c.pp=i,e._props.push(u)},Na={version:"3.13.0",name:"motionPath",register:function(e,t,n){ga=(ha=e).utils.getUnit,va=ha.utils.toArray,ya=ha.core.getStyleSaver,ba=ha.core.reverting||function(){},ma=n},init:function(e,t,n){if(!ha)return console.warn("Please gsap.registerPlugin(MotionPathPlugin)"),!1;"object"==typeof t&&!t.style&&t.path||(t={path:t});var r,i,a,l,s=[],o=t,u=o.path,c=o.autoRotate,d=o.unitX,f=o.unitY,p=o.x,h=o.y,m=u[0],g=(a=t.start,l="end"in t?t.end:1,function(e){return a||1!==l?Ri(e,a,l):e});if(this.rawPaths=s,this.target=e,this.tween=n,this.styles=ya&&ya(e,"transform"),(this.rotate=c||0===c)&&(this.rOffset=parseFloat(c)||0,this.radians=!!t.useRadians,this.rProp=t.rotation||"rotation",this.rSet=e._gsap.set(e,this.rProp,this),this.ru=ga(e._gsap.get(e,this.rProp))||0),Array.isArray(u)&&!("closed"in u)&&"number"!=typeof m){for(i in m)!p&&~wa.indexOf(i)?p=i:!h&&~_a.indexOf(i)&&(h=i);for(i in p&&h?s.push(Ta(this,ka(ka([],u,p,0),u,h,1),e,p,h,g,t,d||ga(u[0][p]),f||ga(u[0][h]))):p=h=0,m)i!==p&&i!==h&&s.push(Ta(this,ka([],u,i,2),e,i,0,g,t,ga(u[0][i])))}else Fi(r=g(za(Oi(t.path),e,t)),t.resolution),s.push(r),Oa(this,e,t.x||"x",r,"x",t.unitX||"px"),Oa(this,e,t.y||"y",r,"y",t.unitY||"px");n.vars.immediateRender&&this.render(n.progress(),this)},render:function(e,t){var n=t.rawPaths,r=n.length,i=t._pt;if(t.tween._time||!ba()){for(e>1?e=1:e<0&&(e=0);r--;)$i(n[r],e,!r&&t.rotate,n[r]);for(;i;)i.set(i.t,i.p,i.path[i.pp]+i.u,i.d,e),i=i._next;t.rotate&&t.rSet(t.target,t.rProp,n[0].angle*(t.radians?Sa:1)+t.rOffset+t.ru,t,e)}else t.styles.revert()},getLength:function(e){return Fi(Oi(e)).totalLength},sliceRawPath:Ri,getRawPath:Oi,pointsToSegment:qi,stringToRawPath:Gi,rawPathToString:Wi,transformRawPath:Vi,getGlobalMatrix:pa,getPositionOnPath:$i,cacheRawPathMeasurements:Fi,convertToPath:function(e,t){return va(e).map(function(e){return function(e,t){var n,r,i,a,l,s,o,u,c,d,f,p,h,m,g,v,y,b,w,_,S,k,x=e.tagName.toLowerCase(),E=.552284749831;return"path"!==x&&e.getBBox?(s=function(e,t){var n,r=document.createElementNS("http://www.w3.org/2000/svg","path"),i=[].slice.call(e.attributes),a=i.length;for(t=","+t+",";--a>-1;)n=i[a].nodeName.toLowerCase(),t.indexOf(","+n+",")<0&&r.setAttributeNS(null,n,i[a].nodeValue);return r}(e,"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points"),k=function(e,t){for(var n=t?t.split(","):[],r={},i=n.length;--i>-1;)r[n[i]]=+e.getAttribute(n[i])||0;return r}(e,Ai[x]),"rect"===x?(a=k.rx,l=k.ry||a,r=k.x,i=k.y,d=k.width-2*a,f=k.height-2*l,n=a||l?"M"+(v=(m=(h=r+a)+d)+a)+","+(b=i+l)+" V"+(w=b+f)+" C"+[v,_=w+l*E,g=m+a*E,S=w+l,m,S,m-(m-h)/3,S,h+(m-h)/3,S,h,S,p=r+a*(1-E),S,r,_,r,w,r,w-(w-b)/3,r,b+(w-b)/3,r,b,r,y=i+l*(1-E),p,i,h,i,h+(m-h)/3,i,m-(m-h)/3,i,m,i,g,i,v,y,v,b].join(",")+"z":"M"+(r+d)+","+i+" v"+f+" h"+-d+" v"+-f+" h"+d+"z"):"circle"===x||"ellipse"===x?("circle"===x?u=(a=l=k.r)*E:(a=k.rx,u=(l=k.ry)*E),n="M"+((r=k.cx)+a)+","+(i=k.cy)+" C"+[r+a,i+u,r+(o=a*E),i+l,r,i+l,r-o,i+l,r-a,i+u,r-a,i,r-a,i-u,r-o,i-l,r,i-l,r+o,i-l,r+a,i-u,r+a,i].join(",")+"z"):"line"===x?n="M"+k.x1+","+k.y1+" L"+k.x2+","+k.y2:"polyline"!==x&&"polygon"!==x||(n="M"+(r=(c=(e.getAttribute("points")+"").match(ui)||[]).shift())+","+(i=c.shift())+" L"+c.join(","),"polygon"===x&&(n+=","+r+","+i+"z")),s.setAttribute("d",Wi(s._gsRawPath=Gi(n))),t&&e.parentNode&&(e.parentNode.insertBefore(s,e),e.parentNode.removeChild(e)),s):e}(e,!1!==t)})},convertCoordinates:function(e,t,n){var r=pa(t,!0,!0).multiply(pa(e));return n?r.apply(n):r},getAlignMatrix:La,getRelativePosition:function(e,t,n,r){var i=La(e,t,n,r);return{x:i.e,y:i.f}},arrayToRawPath:function(e,t){var n=ka(ka([],e,(t=t||{}).x||"x",0),e,t.y||"y",1);return t.relative&&Ea(n),["cubic"===t.type?n:qi(n,t.curviness)]}};(ha||"undefined"!=typeof window&&(ha=window.gsap)&&ha.registerPlugin&&ha)&&ha.registerPlugin(Na),ti.registerPlugin(Na);var Aa=function(e,t){if(e&&0!==e.length)return"max"===t?e.reduce(function(e,t){return t.year>e?t.year:e},e[0].year):e.reduce(function(e,t){return t.year<e?t.year:e},e[0].year)};const Da=function(){var e,t=(0,a.useContext)(s),n=t.events,i=t.currentEvent,l=t.setCurrentEvent,o=(0,a.useRef)(null),u=(0,a.useRef)([]),c=(0,a.useRef)(null),d=(0,a.useRef)(null),f=(0,a.useRef)(i);return si(function(){if(ti.from(c.current,{innerText:Aa(n[f.current].events,"min"),snap:{innerText:1}}),ti.from(d.current,{innerText:Aa(n[f.current].events,"max"),snap:{innerText:1}}),o.current){var e=n.length,t=1/e,r=360/e*(n.length-1)/360,a=(r-f.current/e+e)%1,l=((r-i/e+e)%1-a+e)%1;l>.5&&(l-=1),l<-.5&&(l+=1),u.current.forEach(function(e,n){var r=(n*t+a)%1,i=r+l;ti.to(e,{duration:1,motionPath:{path:o.current,align:o.current,alignOrigin:[.5,.5],start:r,end:i},ease:"power2.out"})}),f.current=i}},{dependencies:[i]}),(0,r.jsxs)("div",{className:"category_picker",children:[(0,r.jsxs)("div",{className:"category_picker__years",tabIndex:-1,children:[(0,r.jsx)("h4",{ref:c,className:"category_picker__years--start",children:Aa(n[i].events,"min")}),(0,r.jsx)("h4",{ref:d,className:"category_picker__years--end",children:Aa(n[i].events,"max")})]}),(0,r.jsxs)("svg",{width:500,height:450,children:[(0,r.jsx)("path",{d:(e=200,"M ".concat(450,", ").concat(225," A ").concat(e,",").concat(e," 0 1,1 ").concat(50,",").concat(225," A ").concat(e,",").concat(e," 0 1,1 ").concat(450,",").concat(225)),fill:"none",className:"category_picker__circle",ref:o}),n.map(function(e,t){return(0,r.jsxs)("g",{onClick:function(){return l(t)},className:"category_picker__item_wrapper"+(t===i?" category_picker__item_wrapper--active":""),ref:function(e){e&&(u.current[t]=e)},children:[(0,r.jsx)("circle",{color:"currentColor",stroke:"currentColor",className:"category_picker__item"+(t===i?" category_picker__item--active":"")}),(0,r.jsx)("text",{y:4,fontSize:"14",textAnchor:"middle",className:"category_picker__item__number",children:t+1})]})})]})]})},Ra=function(){return(0,r.jsxs)("div",{className:"header",children:[(0,r.jsx)("div",{className:"header__border"}),(0,r.jsx)("h1",{className:"header__title",children:"Исторические даты"})]})};function Ia(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function Fa(e,t){void 0===e&&(e={}),void 0===t&&(t={});const n=["__proto__","constructor","prototype"];Object.keys(t).filter(e=>n.indexOf(e)<0).forEach(n=>{void 0===e[n]?e[n]=t[n]:Ia(t[n])&&Ia(e[n])&&Object.keys(t[n]).length>0&&Fa(e[n],t[n])})}const Ba={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function ja(){const e="undefined"!=typeof document?document:{};return Fa(e,Ba),e}const $a={document:Ba,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function Va(){const e="undefined"!=typeof window?window:{};return Fa(e,$a),e}function Ha(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function Ga(){return Date.now()}function Ua(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function qa(e){return"undefined"!=typeof window&&void 0!==window.HTMLElement?e instanceof HTMLElement:e&&(1===e.nodeType||11===e.nodeType)}function Wa(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let n=1;n<arguments.length;n+=1){const r=n<0||arguments.length<=n?void 0:arguments[n];if(null!=r&&!qa(r)){const n=Object.keys(Object(r)).filter(e=>t.indexOf(e)<0);for(let t=0,i=n.length;t<i;t+=1){const i=n[t],a=Object.getOwnPropertyDescriptor(r,i);void 0!==a&&a.enumerable&&(Ua(e[i])&&Ua(r[i])?r[i].__swiper__?e[i]=r[i]:Wa(e[i],r[i]):!Ua(e[i])&&Ua(r[i])?(e[i]={},r[i].__swiper__?e[i]=r[i]:Wa(e[i],r[i])):e[i]=r[i])}}}return e}function Ya(e,t,n){e.style.setProperty(t,n)}function Xa(e){let{swiper:t,targetPosition:n,side:r}=e;const i=Va(),a=-t.translate;let l,s=null;const o=t.params.speed;t.wrapperEl.style.scrollSnapType="none",i.cancelAnimationFrame(t.cssModeFrameID);const u=n>a?"next":"prev",c=(e,t)=>"next"===u&&e>=t||"prev"===u&&e<=t,d=()=>{l=(new Date).getTime(),null===s&&(s=l);const e=Math.max(Math.min((l-s)/o,1),0),u=.5-Math.cos(e*Math.PI)/2;let f=a+u*(n-a);if(c(f,n)&&(f=n),t.wrapperEl.scrollTo({[r]:f}),c(f,n))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout(()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[r]:f})}),void i.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=i.requestAnimationFrame(d)};d()}function Qa(e,t){void 0===t&&(t="");const n=Va(),r=[...e.children];return n.HTMLSlotElement&&e instanceof HTMLSlotElement&&r.push(...e.assignedElements()),t?r.filter(e=>e.matches(t)):r}function Ka(e){try{return void console.warn(e)}catch(e){}}function Za(e,t){void 0===t&&(t=[]);const n=document.createElement(e);return n.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter(e=>!!e.trim())}(t)),n}function Ja(e,t){return Va().getComputedStyle(e,null).getPropertyValue(t)}function el(e){let t,n=e;if(n){for(t=0;null!==(n=n.previousSibling);)1===n.nodeType&&(t+=1);return t}}function tl(e,t){const n=[];let r=e.parentElement;for(;r;)t?r.matches(t)&&n.push(r):n.push(r),r=r.parentElement;return n}function nl(e,t){t&&e.addEventListener("transitionend",function n(r){r.target===e&&(t.call(e,r),e.removeEventListener("transitionend",n))})}function rl(e,t,n){const r=Va();return n?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function il(e){return(Array.isArray(e)?e:[e]).filter(e=>!!e)}function al(e,t){void 0===t&&(t=""),"undefined"!=typeof trustedTypes?e.innerHTML=trustedTypes.createPolicy("html",{createHTML:e=>e}).createHTML(t):e.innerHTML=t}let ll,sl,ol;function ul(){return ll||(ll=function(){const e=Va(),t=ja();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),ll}function cl(e){return void 0===e&&(e={}),sl||(sl=function(e){let{userAgent:t}=void 0===e?{}:e;const n=ul(),r=Va(),i=r.navigator.platform,a=t||r.navigator.userAgent,l={ios:!1,android:!1},s=r.screen.width,o=r.screen.height,u=a.match(/(Android);?[\s\/]+([\d.]+)?/);let c=a.match(/(iPad).*OS\s([\d_]+)/);const d=a.match(/(iPod)(.*OS\s([\d_]+))?/),f=!c&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),p="Win32"===i;let h="MacIntel"===i;return!c&&h&&n.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${s}x${o}`)>=0&&(c=a.match(/(Version)\/([\d.]+)/),c||(c=[0,1,"13_0_0"]),h=!1),u&&!p&&(l.os="android",l.android=!0),(c||f||d)&&(l.os="ios",l.ios=!0),l}(e)),sl}function dl(){return ol||(ol=function(){const e=Va(),t=cl();let n=!1;function r(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(r()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,r]=t.split("Version/")[1].split(" ")[0].split(".").map(e=>Number(e));n=e<16||16===e&&r<2}}const i=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),a=r();return{isSafari:n||a,needPerspectiveFix:n,need3dFix:a||i&&t.ios,isWebView:i}}()),ol}var fl={on(e,t,n){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof t)return r;const i=n?"unshift":"push";return e.split(" ").forEach(e=>{r.eventsListeners[e]||(r.eventsListeners[e]=[]),r.eventsListeners[e][i](t)}),r},once(e,t,n){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof t)return r;function i(){r.off(e,i),i.__emitterProxy&&delete i.__emitterProxy;for(var n=arguments.length,a=new Array(n),l=0;l<n;l++)a[l]=arguments[l];t.apply(r,a)}return i.__emitterProxy=t,r.on(e,i,n)},onAny(e,t){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof e)return n;const r=t?"unshift":"push";return n.eventsAnyListeners.indexOf(e)<0&&n.eventsAnyListeners[r](e),n},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const n=t.eventsAnyListeners.indexOf(e);return n>=0&&t.eventsAnyListeners.splice(n,1),t},off(e,t){const n=this;return!n.eventsListeners||n.destroyed?n:n.eventsListeners?(e.split(" ").forEach(e=>{void 0===t?n.eventsListeners[e]=[]:n.eventsListeners[e]&&n.eventsListeners[e].forEach((r,i)=>{(r===t||r.__emitterProxy&&r.__emitterProxy===t)&&n.eventsListeners[e].splice(i,1)})}),n):n},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,n,r;for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return"string"==typeof a[0]||Array.isArray(a[0])?(t=a[0],n=a.slice(1,a.length),r=e):(t=a[0].events,n=a[0].data,r=a[0].context||e),n.unshift(r),(Array.isArray(t)?t:t.split(" ")).forEach(t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach(e=>{e.apply(r,[t,...n])}),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach(e=>{e.apply(r,n)})}),e}};const pl=(e,t,n)=>{t&&!e.classList.contains(n)?e.classList.add(n):!t&&e.classList.contains(n)&&e.classList.remove(n)},hl=(e,t,n)=>{t&&!e.classList.contains(n)?e.classList.add(n):!t&&e.classList.contains(n)&&e.classList.remove(n)},ml=(e,t)=>{if(!e||e.destroyed||!e.params)return;const n=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(n){let t=n.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(n.shadowRoot?t=n.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame(()=>{n.shadowRoot&&(t=n.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())})),t&&t.remove()}},gl=(e,t)=>{if(!e.slides[t])return;const n=e.slides[t].querySelector('[loading="lazy"]');n&&n.removeAttribute("loading")},vl=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const n=e.slides.length;if(!n||!t||t<0)return;t=Math.min(t,n);const r="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),i=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const n=i,a=[n-t];return a.push(...Array.from({length:t}).map((e,t)=>n+r+t)),void e.slides.forEach((t,n)=>{a.includes(t.column)&&gl(e,n)})}const a=i+r-1;if(e.params.rewind||e.params.loop)for(let r=i-t;r<=a+t;r+=1){const t=(r%n+n)%n;(t<i||t>a)&&gl(e,t)}else for(let r=Math.max(i-t,0);r<=Math.min(a+t,n-1);r+=1)r!==i&&(r>a||r<i)&&gl(e,r)};var yl={updateSize:function(){const e=this;let t,n;const r=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:r.clientWidth,n=void 0!==e.params.height&&null!==e.params.height?e.params.height:r.clientHeight,0===t&&e.isHorizontal()||0===n&&e.isVertical()||(t=t-parseInt(Ja(r,"padding-left")||0,10)-parseInt(Ja(r,"padding-right")||0,10),n=n-parseInt(Ja(r,"padding-top")||0,10)-parseInt(Ja(r,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(n)&&(n=0),Object.assign(e,{width:t,height:n,size:e.isHorizontal()?t:n}))},updateSlides:function(){const e=this;function t(t,n){return parseFloat(t.getPropertyValue(e.getDirectionLabel(n))||0)}const n=e.params,{wrapperEl:r,slidesEl:i,size:a,rtlTranslate:l,wrongRTL:s}=e,o=e.virtual&&n.virtual.enabled,u=o?e.virtual.slides.length:e.slides.length,c=Qa(i,`.${e.params.slideClass}, swiper-slide`),d=o?e.virtual.slides.length:c.length;let f=[];const p=[],h=[];let m=n.slidesOffsetBefore;"function"==typeof m&&(m=n.slidesOffsetBefore.call(e));let g=n.slidesOffsetAfter;"function"==typeof g&&(g=n.slidesOffsetAfter.call(e));const v=e.snapGrid.length,y=e.slidesGrid.length;let b=n.spaceBetween,w=-m,_=0,S=0;if(void 0===a)return;"string"==typeof b&&b.indexOf("%")>=0?b=parseFloat(b.replace("%",""))/100*a:"string"==typeof b&&(b=parseFloat(b)),e.virtualSize=-b,c.forEach(e=>{l?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""}),n.centeredSlides&&n.cssMode&&(Ya(r,"--swiper-centered-offset-before",""),Ya(r,"--swiper-centered-offset-after",""));const k=n.grid&&n.grid.rows>1&&e.grid;let x;k?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const E="auto"===n.slidesPerView&&n.breakpoints&&Object.keys(n.breakpoints).filter(e=>void 0!==n.breakpoints[e].slidesPerView).length>0;for(let r=0;r<d;r+=1){let i;if(x=0,c[r]&&(i=c[r]),k&&e.grid.updateSlide(r,i,c),!c[r]||"none"!==Ja(i,"display")){if("auto"===n.slidesPerView){E&&(c[r].style[e.getDirectionLabel("width")]="");const a=getComputedStyle(i),l=i.style.transform,s=i.style.webkitTransform;if(l&&(i.style.transform="none"),s&&(i.style.webkitTransform="none"),n.roundLengths)x=e.isHorizontal()?rl(i,"width",!0):rl(i,"height",!0);else{const e=t(a,"width"),n=t(a,"padding-left"),r=t(a,"padding-right"),l=t(a,"margin-left"),s=t(a,"margin-right"),o=a.getPropertyValue("box-sizing");if(o&&"border-box"===o)x=e+l+s;else{const{clientWidth:t,offsetWidth:a}=i;x=e+n+r+l+s+(a-t)}}l&&(i.style.transform=l),s&&(i.style.webkitTransform=s),n.roundLengths&&(x=Math.floor(x))}else x=(a-(n.slidesPerView-1)*b)/n.slidesPerView,n.roundLengths&&(x=Math.floor(x)),c[r]&&(c[r].style[e.getDirectionLabel("width")]=`${x}px`);c[r]&&(c[r].swiperSlideSize=x),h.push(x),n.centeredSlides?(w=w+x/2+_/2+b,0===_&&0!==r&&(w=w-a/2-b),0===r&&(w=w-a/2-b),Math.abs(w)<.001&&(w=0),n.roundLengths&&(w=Math.floor(w)),S%n.slidesPerGroup===0&&f.push(w),p.push(w)):(n.roundLengths&&(w=Math.floor(w)),(S-Math.min(e.params.slidesPerGroupSkip,S))%e.params.slidesPerGroup===0&&f.push(w),p.push(w),w=w+x+b),e.virtualSize+=x+b,_=x,S+=1}}if(e.virtualSize=Math.max(e.virtualSize,a)+g,l&&s&&("slide"===n.effect||"coverflow"===n.effect)&&(r.style.width=`${e.virtualSize+b}px`),n.setWrapperSize&&(r.style[e.getDirectionLabel("width")]=`${e.virtualSize+b}px`),k&&e.grid.updateWrapperSize(x,f),!n.centeredSlides){const t=[];for(let r=0;r<f.length;r+=1){let i=f[r];n.roundLengths&&(i=Math.floor(i)),f[r]<=e.virtualSize-a&&t.push(i)}f=t,Math.floor(e.virtualSize-a)-Math.floor(f[f.length-1])>1&&f.push(e.virtualSize-a)}if(o&&n.loop){const t=h[0]+b;if(n.slidesPerGroup>1){const r=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/n.slidesPerGroup),i=t*n.slidesPerGroup;for(let e=0;e<r;e+=1)f.push(f[f.length-1]+i)}for(let r=0;r<e.virtual.slidesBefore+e.virtual.slidesAfter;r+=1)1===n.slidesPerGroup&&f.push(f[f.length-1]+t),p.push(p[p.length-1]+t),e.virtualSize+=t}if(0===f.length&&(f=[0]),0!==b){const t=e.isHorizontal()&&l?"marginLeft":e.getDirectionLabel("marginRight");c.filter((e,t)=>!(n.cssMode&&!n.loop)||t!==c.length-1).forEach(e=>{e.style[t]=`${b}px`})}if(n.centeredSlides&&n.centeredSlidesBounds){let e=0;h.forEach(t=>{e+=t+(b||0)}),e-=b;const t=e>a?e-a:0;f=f.map(e=>e<=0?-m:e>t?t+g:e)}if(n.centerInsufficientSlides){let e=0;h.forEach(t=>{e+=t+(b||0)}),e-=b;const t=(n.slidesOffsetBefore||0)+(n.slidesOffsetAfter||0);if(e+t<a){const n=(a-e-t)/2;f.forEach((e,t)=>{f[t]=e-n}),p.forEach((e,t)=>{p[t]=e+n})}}if(Object.assign(e,{slides:c,snapGrid:f,slidesGrid:p,slidesSizesGrid:h}),n.centeredSlides&&n.cssMode&&!n.centeredSlidesBounds){Ya(r,"--swiper-centered-offset-before",-f[0]+"px"),Ya(r,"--swiper-centered-offset-after",e.size/2-h[h.length-1]/2+"px");const t=-e.snapGrid[0],n=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map(e=>e+t),e.slidesGrid=e.slidesGrid.map(e=>e+n)}if(d!==u&&e.emit("slidesLengthChange"),f.length!==v&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),p.length!==y&&e.emit("slidesGridLengthChange"),n.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(o||n.cssMode||"slide"!==n.effect&&"fade"!==n.effect)){const t=`${n.containerModifierClass}backface-hidden`,r=e.el.classList.contains(t);d<=n.maxBackfaceHiddenSlides?r||e.el.classList.add(t):r&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,n=[],r=t.virtual&&t.params.virtual.enabled;let i,a=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const l=e=>r?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach(e=>{n.push(e)});else for(i=0;i<Math.ceil(t.params.slidesPerView);i+=1){const e=t.activeIndex+i;if(e>t.slides.length&&!r)break;n.push(l(e))}else n.push(l(t.activeIndex));for(i=0;i<n.length;i+=1)if(void 0!==n[i]){const e=n[i].offsetHeight;a=e>a?e:a}(a||0===a)&&(t.wrapperEl.style.height=`${a}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,n=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let r=0;r<t.length;r+=1)t[r].swiperSlideOffset=(e.isHorizontal()?t[r].offsetLeft:t[r].offsetTop)-n-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,n=t.params,{slides:r,rtlTranslate:i,snapGrid:a}=t;if(0===r.length)return;void 0===r[0].swiperSlideOffset&&t.updateSlidesOffset();let l=-e;i&&(l=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let s=n.spaceBetween;"string"==typeof s&&s.indexOf("%")>=0?s=parseFloat(s.replace("%",""))/100*t.size:"string"==typeof s&&(s=parseFloat(s));for(let e=0;e<r.length;e+=1){const o=r[e];let u=o.swiperSlideOffset;n.cssMode&&n.centeredSlides&&(u-=r[0].swiperSlideOffset);const c=(l+(n.centeredSlides?t.minTranslate():0)-u)/(o.swiperSlideSize+s),d=(l-a[0]+(n.centeredSlides?t.minTranslate():0)-u)/(o.swiperSlideSize+s),f=-(l-u),p=f+t.slidesSizesGrid[e],h=f>=0&&f<=t.size-t.slidesSizesGrid[e],m=f>=0&&f<t.size-1||p>1&&p<=t.size||f<=0&&p>=t.size;m&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e)),pl(o,m,n.slideVisibleClass),pl(o,h,n.slideFullyVisibleClass),o.progress=i?-c:c,o.originalProgress=i?-d:d}},updateProgress:function(e){const t=this;if(void 0===e){const n=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*n||0}const n=t.params,r=t.maxTranslate()-t.minTranslate();let{progress:i,isBeginning:a,isEnd:l,progressLoop:s}=t;const o=a,u=l;if(0===r)i=0,a=!0,l=!0;else{i=(e-t.minTranslate())/r;const n=Math.abs(e-t.minTranslate())<1,s=Math.abs(e-t.maxTranslate())<1;a=n||i<=0,l=s||i>=1,n&&(i=0),s&&(i=1)}if(n.loop){const n=t.getSlideIndexByData(0),r=t.getSlideIndexByData(t.slides.length-1),i=t.slidesGrid[n],a=t.slidesGrid[r],l=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);s=o>=i?(o-i)/l:(o+l-a)/l,s>1&&(s-=1)}Object.assign(t,{progress:i,progressLoop:s,isBeginning:a,isEnd:l}),(n.watchSlidesProgress||n.centeredSlides&&n.autoHeight)&&t.updateSlidesProgress(e),a&&!o&&t.emit("reachBeginning toEdge"),l&&!u&&t.emit("reachEnd toEdge"),(o&&!a||u&&!l)&&t.emit("fromEdge"),t.emit("progress",i)},updateSlidesClasses:function(){const e=this,{slides:t,params:n,slidesEl:r,activeIndex:i}=e,a=e.virtual&&n.virtual.enabled,l=e.grid&&n.grid&&n.grid.rows>1,s=e=>Qa(r,`.${n.slideClass}${e}, swiper-slide${e}`)[0];let o,u,c;if(a)if(n.loop){let t=i-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),o=s(`[data-swiper-slide-index="${t}"]`)}else o=s(`[data-swiper-slide-index="${i}"]`);else l?(o=t.find(e=>e.column===i),c=t.find(e=>e.column===i+1),u=t.find(e=>e.column===i-1)):o=t[i];o&&(l||(c=function(e,t){const n=[];for(;e.nextElementSibling;){const r=e.nextElementSibling;t?r.matches(t)&&n.push(r):n.push(r),e=r}return n}(o,`.${n.slideClass}, swiper-slide`)[0],n.loop&&!c&&(c=t[0]),u=function(e,t){const n=[];for(;e.previousElementSibling;){const r=e.previousElementSibling;t?r.matches(t)&&n.push(r):n.push(r),e=r}return n}(o,`.${n.slideClass}, swiper-slide`)[0],n.loop&&0===!u&&(u=t[t.length-1]))),t.forEach(e=>{hl(e,e===o,n.slideActiveClass),hl(e,e===c,n.slideNextClass),hl(e,e===u,n.slidePrevClass)}),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,n=t.rtlTranslate?t.translate:-t.translate,{snapGrid:r,params:i,activeIndex:a,realIndex:l,snapIndex:s}=t;let o,u=e;const c=e=>{let n=e-t.virtual.slidesBefore;return n<0&&(n=t.virtual.slides.length+n),n>=t.virtual.slides.length&&(n-=t.virtual.slides.length),n};if(void 0===u&&(u=function(e){const{slidesGrid:t,params:n}=e,r=e.rtlTranslate?e.translate:-e.translate;let i;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?r>=t[e]&&r<t[e+1]-(t[e+1]-t[e])/2?i=e:r>=t[e]&&r<t[e+1]&&(i=e+1):r>=t[e]&&(i=e);return n.normalizeSlideIndex&&(i<0||void 0===i)&&(i=0),i}(t)),r.indexOf(n)>=0)o=r.indexOf(n);else{const e=Math.min(i.slidesPerGroupSkip,u);o=e+Math.floor((u-e)/i.slidesPerGroup)}if(o>=r.length&&(o=r.length-1),u===a&&!t.params.loop)return void(o!==s&&(t.snapIndex=o,t.emit("snapIndexChange")));if(u===a&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(u));const d=t.grid&&i.grid&&i.grid.rows>1;let f;if(t.virtual&&i.virtual.enabled&&i.loop)f=c(u);else if(d){const e=t.slides.find(e=>e.column===u);let n=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(n)&&(n=Math.max(t.slides.indexOf(e),0)),f=Math.floor(n/i.grid.rows)}else if(t.slides[u]){const e=t.slides[u].getAttribute("data-swiper-slide-index");f=e?parseInt(e,10):u}else f=u;Object.assign(t,{previousSnapIndex:s,snapIndex:o,previousRealIndex:l,realIndex:f,previousIndex:a,activeIndex:u}),t.initialized&&vl(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(l!==f&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const n=this,r=n.params;let i=e.closest(`.${r.slideClass}, swiper-slide`);!i&&n.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach(e=>{!i&&e.matches&&e.matches(`.${r.slideClass}, swiper-slide`)&&(i=e)});let a,l=!1;if(i)for(let e=0;e<n.slides.length;e+=1)if(n.slides[e]===i){l=!0,a=e;break}if(!i||!l)return n.clickedSlide=void 0,void(n.clickedIndex=void 0);n.clickedSlide=i,n.virtual&&n.params.virtual.enabled?n.clickedIndex=parseInt(i.getAttribute("data-swiper-slide-index"),10):n.clickedIndex=a,r.slideToClickedSlide&&void 0!==n.clickedIndex&&n.clickedIndex!==n.activeIndex&&n.slideToClickedSlide()}};function bl(e){let{swiper:t,runCallbacks:n,direction:r,step:i}=e;const{activeIndex:a,previousIndex:l}=t;let s=r;s||(s=a>l?"next":a<l?"prev":"reset"),t.emit(`transition${i}`),n&&"reset"===s?t.emit(`slideResetTransition${i}`):n&&a!==l&&(t.emit(`slideChangeTransition${i}`),"next"===s?t.emit(`slideNextTransition${i}`):t.emit(`slidePrevTransition${i}`))}var wl={slideTo:function(e,t,n,r,i){void 0===e&&(e=0),void 0===n&&(n=!0),"string"==typeof e&&(e=parseInt(e,10));const a=this;let l=e;l<0&&(l=0);const{params:s,snapGrid:o,slidesGrid:u,previousIndex:c,activeIndex:d,rtlTranslate:f,wrapperEl:p,enabled:h}=a;if(!h&&!r&&!i||a.destroyed||a.animating&&s.preventInteractionOnTransition)return!1;void 0===t&&(t=a.params.speed);const m=Math.min(a.params.slidesPerGroupSkip,l);let g=m+Math.floor((l-m)/a.params.slidesPerGroup);g>=o.length&&(g=o.length-1);const v=-o[g];if(s.normalizeSlideIndex)for(let e=0;e<u.length;e+=1){const t=-Math.floor(100*v),n=Math.floor(100*u[e]),r=Math.floor(100*u[e+1]);void 0!==u[e+1]?t>=n&&t<r-(r-n)/2?l=e:t>=n&&t<r&&(l=e+1):t>=n&&(l=e)}if(a.initialized&&l!==d){if(!a.allowSlideNext&&(f?v>a.translate&&v>a.minTranslate():v<a.translate&&v<a.minTranslate()))return!1;if(!a.allowSlidePrev&&v>a.translate&&v>a.maxTranslate()&&(d||0)!==l)return!1}let y;l!==(c||0)&&n&&a.emit("beforeSlideChangeStart"),a.updateProgress(v),y=l>d?"next":l<d?"prev":"reset";const b=a.virtual&&a.params.virtual.enabled;if((!b||!i)&&(f&&-v===a.translate||!f&&v===a.translate))return a.updateActiveIndex(l),s.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==s.effect&&a.setTranslate(v),"reset"!==y&&(a.transitionStart(n,y),a.transitionEnd(n,y)),!1;if(s.cssMode){const e=a.isHorizontal(),n=f?v:-v;if(0===t)b&&(a.wrapperEl.style.scrollSnapType="none",a._immediateVirtual=!0),b&&!a._cssModeVirtualInitialSet&&a.params.initialSlide>0?(a._cssModeVirtualInitialSet=!0,requestAnimationFrame(()=>{p[e?"scrollLeft":"scrollTop"]=n})):p[e?"scrollLeft":"scrollTop"]=n,b&&requestAnimationFrame(()=>{a.wrapperEl.style.scrollSnapType="",a._immediateVirtual=!1});else{if(!a.support.smoothScroll)return Xa({swiper:a,targetPosition:n,side:e?"left":"top"}),!0;p.scrollTo({[e?"left":"top"]:n,behavior:"smooth"})}return!0}const w=dl().isSafari;return b&&!i&&w&&a.isElement&&a.virtual.update(!1,!1,l),a.setTransition(t),a.setTranslate(v),a.updateActiveIndex(l),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,r),a.transitionStart(n,y),0===t?a.transitionEnd(n,y):a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(n,y))}),a.wrapperEl.addEventListener("transitionend",a.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,n,r){void 0===e&&(e=0),void 0===n&&(n=!0),"string"==typeof e&&(e=parseInt(e,10));const i=this;if(i.destroyed)return;void 0===t&&(t=i.params.speed);const a=i.grid&&i.params.grid&&i.params.grid.rows>1;let l=e;if(i.params.loop)if(i.virtual&&i.params.virtual.enabled)l+=i.virtual.slidesBefore;else{let e;if(a){const t=l*i.params.grid.rows;e=i.slides.find(e=>1*e.getAttribute("data-swiper-slide-index")===t).column}else e=i.getSlideIndexByData(l);const t=a?Math.ceil(i.slides.length/i.params.grid.rows):i.slides.length,{centeredSlides:n}=i.params;let s=i.params.slidesPerView;"auto"===s?s=i.slidesPerViewDynamic():(s=Math.ceil(parseFloat(i.params.slidesPerView,10)),n&&s%2==0&&(s+=1));let o=t-e<s;if(n&&(o=o||e<Math.ceil(s/2)),r&&n&&"auto"!==i.params.slidesPerView&&!a&&(o=!1),o){const r=n?e<i.activeIndex?"prev":"next":e-i.activeIndex-1<i.params.slidesPerView?"next":"prev";i.loopFix({direction:r,slideTo:!0,activeSlideIndex:"next"===r?e+1:e-t+1,slideRealIndex:"next"===r?i.realIndex:void 0})}if(a){const e=l*i.params.grid.rows;l=i.slides.find(t=>1*t.getAttribute("data-swiper-slide-index")===e).column}else l=i.getSlideIndexByData(l)}return requestAnimationFrame(()=>{i.slideTo(l,t,n,r)}),i},slideNext:function(e,t,n){void 0===t&&(t=!0);const r=this,{enabled:i,params:a,animating:l}=r;if(!i||r.destroyed)return r;void 0===e&&(e=r.params.speed);let s=a.slidesPerGroup;"auto"===a.slidesPerView&&1===a.slidesPerGroup&&a.slidesPerGroupAuto&&(s=Math.max(r.slidesPerViewDynamic("current",!0),1));const o=r.activeIndex<a.slidesPerGroupSkip?1:s,u=r.virtual&&a.virtual.enabled;if(a.loop){if(l&&!u&&a.loopPreventsSliding)return!1;if(r.loopFix({direction:"next"}),r._clientLeft=r.wrapperEl.clientLeft,r.activeIndex===r.slides.length-1&&a.cssMode)return requestAnimationFrame(()=>{r.slideTo(r.activeIndex+o,e,t,n)}),!0}return a.rewind&&r.isEnd?r.slideTo(0,e,t,n):r.slideTo(r.activeIndex+o,e,t,n)},slidePrev:function(e,t,n){void 0===t&&(t=!0);const r=this,{params:i,snapGrid:a,slidesGrid:l,rtlTranslate:s,enabled:o,animating:u}=r;if(!o||r.destroyed)return r;void 0===e&&(e=r.params.speed);const c=r.virtual&&i.virtual.enabled;if(i.loop){if(u&&!c&&i.loopPreventsSliding)return!1;r.loopFix({direction:"prev"}),r._clientLeft=r.wrapperEl.clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const f=d(s?r.translate:-r.translate),p=a.map(e=>d(e)),h=i.freeMode&&i.freeMode.enabled;let m=a[p.indexOf(f)-1];if(void 0===m&&(i.cssMode||h)){let e;a.forEach((t,n)=>{f>=t&&(e=n)}),void 0!==e&&(m=h?a[e]:a[e>0?e-1:e])}let g=0;if(void 0!==m&&(g=l.indexOf(m),g<0&&(g=r.activeIndex-1),"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(g=g-r.slidesPerViewDynamic("previous",!0)+1,g=Math.max(g,0))),i.rewind&&r.isBeginning){const i=r.params.virtual&&r.params.virtual.enabled&&r.virtual?r.virtual.slides.length-1:r.slides.length-1;return r.slideTo(i,e,t,n)}return i.loop&&0===r.activeIndex&&i.cssMode?(requestAnimationFrame(()=>{r.slideTo(g,e,t,n)}),!0):r.slideTo(g,e,t,n)},slideReset:function(e,t,n){void 0===t&&(t=!0);const r=this;if(!r.destroyed)return void 0===e&&(e=r.params.speed),r.slideTo(r.activeIndex,e,t,n)},slideToClosest:function(e,t,n,r){void 0===t&&(t=!0),void 0===r&&(r=.5);const i=this;if(i.destroyed)return;void 0===e&&(e=i.params.speed);let a=i.activeIndex;const l=Math.min(i.params.slidesPerGroupSkip,a),s=l+Math.floor((a-l)/i.params.slidesPerGroup),o=i.rtlTranslate?i.translate:-i.translate;if(o>=i.snapGrid[s]){const e=i.snapGrid[s];o-e>(i.snapGrid[s+1]-e)*r&&(a+=i.params.slidesPerGroup)}else{const e=i.snapGrid[s-1];o-e<=(i.snapGrid[s]-e)*r&&(a-=i.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,i.slidesGrid.length-1),i.slideTo(a,e,t,n)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:n}=e,r="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let i,a=e.getSlideIndexWhenGrid(e.clickedIndex);const l=e.isElement?"swiper-slide":`.${t.slideClass}`,s=e.grid&&e.params.grid&&e.params.grid.rows>1;if(t.loop){if(e.animating)return;i=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?e.slideToLoop(i):a>(s?(e.slides.length-r)/2-(e.params.grid.rows-1):e.slides.length-r)?(e.loopFix(),a=e.getSlideIndex(Qa(n,`${l}[data-swiper-slide-index="${i}"]`)[0]),Ha(()=>{e.slideTo(a)})):e.slideTo(a)}else e.slideTo(a)}},_l={loopCreate:function(e,t){const n=this,{params:r,slidesEl:i}=n;if(!r.loop||n.virtual&&n.params.virtual.enabled)return;const a=()=>{Qa(i,`.${r.slideClass}, swiper-slide`).forEach((e,t)=>{e.setAttribute("data-swiper-slide-index",t)})},l=n.grid&&r.grid&&r.grid.rows>1;r.loopAddBlankSlides&&(r.slidesPerGroup>1||l)&&(()=>{const e=Qa(i,`.${r.slideBlankClass}`);e.forEach(e=>{e.remove()}),e.length>0&&(n.recalcSlides(),n.updateSlides())})();const s=r.slidesPerGroup*(l?r.grid.rows:1),o=n.slides.length%s!==0,u=l&&n.slides.length%r.grid.rows!==0,c=e=>{for(let t=0;t<e;t+=1){const e=n.isElement?Za("swiper-slide",[r.slideBlankClass]):Za("div",[r.slideClass,r.slideBlankClass]);n.slidesEl.append(e)}};o?(r.loopAddBlankSlides?(c(s-n.slides.length%s),n.recalcSlides(),n.updateSlides()):Ka("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),a()):u?(r.loopAddBlankSlides?(c(r.grid.rows-n.slides.length%r.grid.rows),n.recalcSlides(),n.updateSlides()):Ka("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),a()):a(),n.loopFix({slideRealIndex:e,direction:r.centeredSlides?void 0:"next",initial:t})},loopFix:function(e){let{slideRealIndex:t,slideTo:n=!0,direction:r,setTranslate:i,activeSlideIndex:a,initial:l,byController:s,byMousewheel:o}=void 0===e?{}:e;const u=this;if(!u.params.loop)return;u.emit("beforeLoopFix");const{slides:c,allowSlidePrev:d,allowSlideNext:f,slidesEl:p,params:h}=u,{centeredSlides:m,initialSlide:g}=h;if(u.allowSlidePrev=!0,u.allowSlideNext=!0,u.virtual&&h.virtual.enabled)return n&&(h.centeredSlides||0!==u.snapIndex?h.centeredSlides&&u.snapIndex<h.slidesPerView?u.slideTo(u.virtual.slides.length+u.snapIndex,0,!1,!0):u.snapIndex===u.snapGrid.length-1&&u.slideTo(u.virtual.slidesBefore,0,!1,!0):u.slideTo(u.virtual.slides.length,0,!1,!0)),u.allowSlidePrev=d,u.allowSlideNext=f,void u.emit("loopFix");let v=h.slidesPerView;"auto"===v?v=u.slidesPerViewDynamic():(v=Math.ceil(parseFloat(h.slidesPerView,10)),m&&v%2==0&&(v+=1));const y=h.slidesPerGroupAuto?v:h.slidesPerGroup;let b=m?Math.max(y,Math.ceil(v/2)):y;b%y!==0&&(b+=y-b%y),b+=h.loopAdditionalSlides,u.loopedSlides=b;const w=u.grid&&h.grid&&h.grid.rows>1;c.length<v+b||"cards"===u.params.effect&&c.length<v+2*b?Ka("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled or not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):w&&"row"===h.grid.fill&&Ka("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const _=[],S=[],k=w?Math.ceil(c.length/h.grid.rows):c.length,x=l&&k-g<v&&!m;let E=x?g:u.activeIndex;void 0===a?a=u.getSlideIndex(c.find(e=>e.classList.contains(h.slideActiveClass))):E=a;const T="next"===r||!r,C="prev"===r||!r;let P=0,M=0;const L=(w?c[a].column:a)+(m&&void 0===i?-v/2+.5:0);if(L<b){P=Math.max(b-L,y);for(let e=0;e<b-L;e+=1){const t=e-Math.floor(e/k)*k;if(w){const e=k-t-1;for(let t=c.length-1;t>=0;t-=1)c[t].column===e&&_.push(t)}else _.push(k-t-1)}}else if(L+v>k-b){M=Math.max(L-(k-2*b),y),x&&(M=Math.max(M,v-k+g+1));for(let e=0;e<M;e+=1){const t=e-Math.floor(e/k)*k;w?c.forEach((e,n)=>{e.column===t&&S.push(n)}):S.push(t)}}if(u.__preventObserver__=!0,requestAnimationFrame(()=>{u.__preventObserver__=!1}),"cards"===u.params.effect&&c.length<v+2*b&&(S.includes(a)&&S.splice(S.indexOf(a),1),_.includes(a)&&_.splice(_.indexOf(a),1)),C&&_.forEach(e=>{c[e].swiperLoopMoveDOM=!0,p.prepend(c[e]),c[e].swiperLoopMoveDOM=!1}),T&&S.forEach(e=>{c[e].swiperLoopMoveDOM=!0,p.append(c[e]),c[e].swiperLoopMoveDOM=!1}),u.recalcSlides(),"auto"===h.slidesPerView?u.updateSlides():w&&(_.length>0&&C||S.length>0&&T)&&u.slides.forEach((e,t)=>{u.grid.updateSlide(t,e,u.slides)}),h.watchSlidesProgress&&u.updateSlidesOffset(),n)if(_.length>0&&C){if(void 0===t){const e=u.slidesGrid[E],t=u.slidesGrid[E+P]-e;o?u.setTranslate(u.translate-t):(u.slideTo(E+Math.ceil(P),0,!1,!0),i&&(u.touchEventsData.startTranslate=u.touchEventsData.startTranslate-t,u.touchEventsData.currentTranslate=u.touchEventsData.currentTranslate-t))}else if(i){const e=w?_.length/h.grid.rows:_.length;u.slideTo(u.activeIndex+e,0,!1,!0),u.touchEventsData.currentTranslate=u.translate}}else if(S.length>0&&T)if(void 0===t){const e=u.slidesGrid[E],t=u.slidesGrid[E-M]-e;o?u.setTranslate(u.translate-t):(u.slideTo(E-M,0,!1,!0),i&&(u.touchEventsData.startTranslate=u.touchEventsData.startTranslate-t,u.touchEventsData.currentTranslate=u.touchEventsData.currentTranslate-t))}else{const e=w?S.length/h.grid.rows:S.length;u.slideTo(u.activeIndex-e,0,!1,!0)}if(u.allowSlidePrev=d,u.allowSlideNext=f,u.controller&&u.controller.control&&!s){const e={slideRealIndex:t,direction:r,setTranslate:i,activeSlideIndex:a,byController:!0};Array.isArray(u.controller.control)?u.controller.control.forEach(t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===h.slidesPerView&&n})}):u.controller.control instanceof u.constructor&&u.controller.control.params.loop&&u.controller.control.loopFix({...e,slideTo:u.controller.control.params.slidesPerView===h.slidesPerView&&n})}u.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:n}=e;if(!t.loop||!n||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const r=[];e.slides.forEach(e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;r[t]=e}),e.slides.forEach(e=>{e.removeAttribute("data-swiper-slide-index")}),r.forEach(e=>{n.append(e)}),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function Sl(e,t,n){const r=Va(),{params:i}=e,a=i.edgeSwipeDetection,l=i.edgeSwipeThreshold;return!a||!(n<=l||n>=r.innerWidth-l)||"prevent"===a&&(t.preventDefault(),!0)}function kl(e){const t=this,n=ja();let r=e;r.originalEvent&&(r=r.originalEvent);const i=t.touchEventsData;if("pointerdown"===r.type){if(null!==i.pointerId&&i.pointerId!==r.pointerId)return;i.pointerId=r.pointerId}else"touchstart"===r.type&&1===r.targetTouches.length&&(i.touchId=r.targetTouches[0].identifier);if("touchstart"===r.type)return void Sl(t,r,r.targetTouches[0].pageX);const{params:a,touches:l,enabled:s}=t;if(!s)return;if(!a.simulateTouch&&"mouse"===r.pointerType)return;if(t.animating&&a.preventInteractionOnTransition)return;!t.animating&&a.cssMode&&a.loop&&t.loopFix();let o=r.target;if("wrapper"===a.touchEventsTarget&&!function(e,t){const n=Va();let r=t.contains(e);return!r&&n.HTMLSlotElement&&t instanceof HTMLSlotElement&&(r=[...t.assignedElements()].includes(e),r||(r=function(e,t){const n=[t];for(;n.length>0;){const t=n.shift();if(e===t)return!0;n.push(...t.children,...t.shadowRoot?t.shadowRoot.children:[],...t.assignedElements?t.assignedElements():[])}}(e,t))),r}(o,t.wrapperEl))return;if("which"in r&&3===r.which)return;if("button"in r&&r.button>0)return;if(i.isTouched&&i.isMoved)return;const u=!!a.noSwipingClass&&""!==a.noSwipingClass,c=r.composedPath?r.composedPath():r.path;u&&r.target&&r.target.shadowRoot&&c&&(o=c[0]);const d=a.noSwipingSelector?a.noSwipingSelector:`.${a.noSwipingClass}`,f=!(!r.target||!r.target.shadowRoot);if(a.noSwiping&&(f?function(e,t){return void 0===t&&(t=this),function t(n){if(!n||n===ja()||n===Va())return null;n.assignedSlot&&(n=n.assignedSlot);const r=n.closest(e);return r||n.getRootNode?r||t(n.getRootNode().host):null}(t)}(d,o):o.closest(d)))return void(t.allowClick=!0);if(a.swipeHandler&&!o.closest(a.swipeHandler))return;l.currentX=r.pageX,l.currentY=r.pageY;const p=l.currentX,h=l.currentY;if(!Sl(t,r,p))return;Object.assign(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=p,l.startY=h,i.touchStartTime=Ga(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,a.threshold>0&&(i.allowThresholdMove=!1);let m=!0;o.matches(i.focusableElements)&&(m=!1,"SELECT"===o.nodeName&&(i.isTouched=!1)),n.activeElement&&n.activeElement.matches(i.focusableElements)&&n.activeElement!==o&&("mouse"===r.pointerType||"mouse"!==r.pointerType&&!o.matches(i.focusableElements))&&n.activeElement.blur();const g=m&&t.allowTouchMove&&a.touchStartPreventDefault;!a.touchStartForcePreventDefault&&!g||o.isContentEditable||r.preventDefault(),a.freeMode&&a.freeMode.enabled&&t.freeMode&&t.animating&&!a.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",r)}function xl(e){const t=ja(),n=this,r=n.touchEventsData,{params:i,touches:a,rtlTranslate:l,enabled:s}=n;if(!s)return;if(!i.simulateTouch&&"mouse"===e.pointerType)return;let o,u=e;if(u.originalEvent&&(u=u.originalEvent),"pointermove"===u.type){if(null!==r.touchId)return;if(u.pointerId!==r.pointerId)return}if("touchmove"===u.type){if(o=[...u.changedTouches].find(e=>e.identifier===r.touchId),!o||o.identifier!==r.touchId)return}else o=u;if(!r.isTouched)return void(r.startMoving&&r.isScrolling&&n.emit("touchMoveOpposite",u));const c=o.pageX,d=o.pageY;if(u.preventedByNestedSwiper)return a.startX=c,void(a.startY=d);if(!n.allowTouchMove)return u.target.matches(r.focusableElements)||(n.allowClick=!1),void(r.isTouched&&(Object.assign(a,{startX:c,startY:d,currentX:c,currentY:d}),r.touchStartTime=Ga()));if(i.touchReleaseOnEdges&&!i.loop)if(n.isVertical()){if(d<a.startY&&n.translate<=n.maxTranslate()||d>a.startY&&n.translate>=n.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else{if(l&&(c>a.startX&&-n.translate<=n.maxTranslate()||c<a.startX&&-n.translate>=n.minTranslate()))return;if(!l&&(c<a.startX&&n.translate<=n.maxTranslate()||c>a.startX&&n.translate>=n.minTranslate()))return}if(t.activeElement&&t.activeElement.matches(r.focusableElements)&&t.activeElement!==u.target&&"mouse"!==u.pointerType&&t.activeElement.blur(),t.activeElement&&u.target===t.activeElement&&u.target.matches(r.focusableElements))return r.isMoved=!0,void(n.allowClick=!1);r.allowTouchCallbacks&&n.emit("touchMove",u),a.previousX=a.currentX,a.previousY=a.currentY,a.currentX=c,a.currentY=d;const f=a.currentX-a.startX,p=a.currentY-a.startY;if(n.params.threshold&&Math.sqrt(f**2+p**2)<n.params.threshold)return;if(void 0===r.isScrolling){let e;n.isHorizontal()&&a.currentY===a.startY||n.isVertical()&&a.currentX===a.startX?r.isScrolling=!1:f*f+p*p>=25&&(e=180*Math.atan2(Math.abs(p),Math.abs(f))/Math.PI,r.isScrolling=n.isHorizontal()?e>i.touchAngle:90-e>i.touchAngle)}if(r.isScrolling&&n.emit("touchMoveOpposite",u),void 0===r.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(r.startMoving=!0)),r.isScrolling||"touchmove"===u.type&&r.preventTouchMoveFromPointerMove)return void(r.isTouched=!1);if(!r.startMoving)return;n.allowClick=!1,!i.cssMode&&u.cancelable&&u.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&u.stopPropagation();let h=n.isHorizontal()?f:p,m=n.isHorizontal()?a.currentX-a.previousX:a.currentY-a.previousY;i.oneWayMovement&&(h=Math.abs(h)*(l?1:-1),m=Math.abs(m)*(l?1:-1)),a.diff=h,h*=i.touchRatio,l&&(h=-h,m=-m);const g=n.touchesDirection;n.swipeDirection=h>0?"prev":"next",n.touchesDirection=m>0?"prev":"next";const v=n.params.loop&&!i.cssMode,y="next"===n.touchesDirection&&n.allowSlideNext||"prev"===n.touchesDirection&&n.allowSlidePrev;if(!r.isMoved){if(v&&y&&n.loopFix({direction:n.swipeDirection}),r.startTranslate=n.getTranslate(),n.setTransition(0),n.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});n.wrapperEl.dispatchEvent(e)}r.allowMomentumBounce=!1,!i.grabCursor||!0!==n.allowSlideNext&&!0!==n.allowSlidePrev||n.setGrabCursor(!0),n.emit("sliderFirstMove",u)}if((new Date).getTime(),!1!==i._loopSwapReset&&r.isMoved&&r.allowThresholdMove&&g!==n.touchesDirection&&v&&y&&Math.abs(h)>=1)return Object.assign(a,{startX:c,startY:d,currentX:c,currentY:d,startTranslate:r.currentTranslate}),r.loopSwapReset=!0,void(r.startTranslate=r.currentTranslate);n.emit("sliderMove",u),r.isMoved=!0,r.currentTranslate=h+r.startTranslate;let b=!0,w=i.resistanceRatio;if(i.touchReleaseOnEdges&&(w=0),h>0?(v&&y&&r.allowThresholdMove&&r.currentTranslate>(i.centeredSlides?n.minTranslate()-n.slidesSizesGrid[n.activeIndex+1]-("auto"!==i.slidesPerView&&n.slides.length-i.slidesPerView>=2?n.slidesSizesGrid[n.activeIndex+1]+n.params.spaceBetween:0)-n.params.spaceBetween:n.minTranslate())&&n.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),r.currentTranslate>n.minTranslate()&&(b=!1,i.resistance&&(r.currentTranslate=n.minTranslate()-1+(-n.minTranslate()+r.startTranslate+h)**w))):h<0&&(v&&y&&r.allowThresholdMove&&r.currentTranslate<(i.centeredSlides?n.maxTranslate()+n.slidesSizesGrid[n.slidesSizesGrid.length-1]+n.params.spaceBetween+("auto"!==i.slidesPerView&&n.slides.length-i.slidesPerView>=2?n.slidesSizesGrid[n.slidesSizesGrid.length-1]+n.params.spaceBetween:0):n.maxTranslate())&&n.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:n.slides.length-("auto"===i.slidesPerView?n.slidesPerViewDynamic():Math.ceil(parseFloat(i.slidesPerView,10)))}),r.currentTranslate<n.maxTranslate()&&(b=!1,i.resistance&&(r.currentTranslate=n.maxTranslate()+1-(n.maxTranslate()-r.startTranslate-h)**w))),b&&(u.preventedByNestedSwiper=!0),!n.allowSlideNext&&"next"===n.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!n.allowSlidePrev&&"prev"===n.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),n.allowSlidePrev||n.allowSlideNext||(r.currentTranslate=r.startTranslate),i.threshold>0){if(!(Math.abs(h)>i.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,r.currentTranslate=r.startTranslate,void(a.diff=n.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}i.followFinger&&!i.cssMode&&((i.freeMode&&i.freeMode.enabled&&n.freeMode||i.watchSlidesProgress)&&(n.updateActiveIndex(),n.updateSlidesClasses()),i.freeMode&&i.freeMode.enabled&&n.freeMode&&n.freeMode.onTouchMove(),n.updateProgress(r.currentTranslate),n.setTranslate(r.currentTranslate))}function El(e){const t=this,n=t.touchEventsData;let r,i=e;if(i.originalEvent&&(i=i.originalEvent),"touchend"===i.type||"touchcancel"===i.type){if(r=[...i.changedTouches].find(e=>e.identifier===n.touchId),!r||r.identifier!==n.touchId)return}else{if(null!==n.touchId)return;if(i.pointerId!==n.pointerId)return;r=i}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(i.type)&&(!["pointercancel","contextmenu"].includes(i.type)||!t.browser.isSafari&&!t.browser.isWebView))return;n.pointerId=null,n.touchId=null;const{params:a,touches:l,rtlTranslate:s,slidesGrid:o,enabled:u}=t;if(!u)return;if(!a.simulateTouch&&"mouse"===i.pointerType)return;if(n.allowTouchCallbacks&&t.emit("touchEnd",i),n.allowTouchCallbacks=!1,!n.isTouched)return n.isMoved&&a.grabCursor&&t.setGrabCursor(!1),n.isMoved=!1,void(n.startMoving=!1);a.grabCursor&&n.isMoved&&n.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const c=Ga(),d=c-n.touchStartTime;if(t.allowClick){const e=i.path||i.composedPath&&i.composedPath();t.updateClickedSlide(e&&e[0]||i.target,e),t.emit("tap click",i),d<300&&c-n.lastClickTime<300&&t.emit("doubleTap doubleClick",i)}if(n.lastClickTime=Ga(),Ha(()=>{t.destroyed||(t.allowClick=!0)}),!n.isTouched||!n.isMoved||!t.swipeDirection||0===l.diff&&!n.loopSwapReset||n.currentTranslate===n.startTranslate&&!n.loopSwapReset)return n.isTouched=!1,n.isMoved=!1,void(n.startMoving=!1);let f;if(n.isTouched=!1,n.isMoved=!1,n.startMoving=!1,f=a.followFinger?s?t.translate:-t.translate:-n.currentTranslate,a.cssMode)return;if(a.freeMode&&a.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:f});const p=f>=-t.maxTranslate()&&!t.params.loop;let h=0,m=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<a.slidesPerGroupSkip?1:a.slidesPerGroup){const t=e<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;void 0!==o[e+t]?(p||f>=o[e]&&f<o[e+t])&&(h=e,m=o[e+t]-o[e]):(p||f>=o[e])&&(h=e,m=o[o.length-1]-o[o.length-2])}let g=null,v=null;a.rewind&&(t.isBeginning?v=a.virtual&&a.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(g=0));const y=(f-o[h])/m,b=h<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;if(d>a.longSwipesMs){if(!a.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(y>=a.longSwipesRatio?t.slideTo(a.rewind&&t.isEnd?g:h+b):t.slideTo(h)),"prev"===t.swipeDirection&&(y>1-a.longSwipesRatio?t.slideTo(h+b):null!==v&&y<0&&Math.abs(y)>a.longSwipesRatio?t.slideTo(v):t.slideTo(h))}else{if(!a.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||i.target!==t.navigation.nextEl&&i.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==g?g:h+b),"prev"===t.swipeDirection&&t.slideTo(null!==v?v:h)):i.target===t.navigation.nextEl?t.slideTo(h+b):t.slideTo(h)}}function Tl(){const e=this,{params:t,el:n}=e;if(n&&0===n.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:i,snapGrid:a}=e,l=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const s=l&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||s?e.params.loop&&!l?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout(()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()},500)),e.allowSlidePrev=i,e.allowSlideNext=r,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}function Cl(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function Pl(){const e=this,{wrapperEl:t,rtlTranslate:n,enabled:r}=e;if(!r)return;let i;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const a=e.maxTranslate()-e.minTranslate();i=0===a?0:(e.translate-e.minTranslate())/a,i!==e.progress&&e.updateProgress(n?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function Ml(e){const t=this;ml(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function Ll(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const zl=(e,t)=>{const n=ja(),{params:r,el:i,wrapperEl:a,device:l}=e,s=!!r.nested,o="on"===t?"addEventListener":"removeEventListener",u=t;i&&"string"!=typeof i&&(n[o]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:s}),i[o]("touchstart",e.onTouchStart,{passive:!1}),i[o]("pointerdown",e.onTouchStart,{passive:!1}),n[o]("touchmove",e.onTouchMove,{passive:!1,capture:s}),n[o]("pointermove",e.onTouchMove,{passive:!1,capture:s}),n[o]("touchend",e.onTouchEnd,{passive:!0}),n[o]("pointerup",e.onTouchEnd,{passive:!0}),n[o]("pointercancel",e.onTouchEnd,{passive:!0}),n[o]("touchcancel",e.onTouchEnd,{passive:!0}),n[o]("pointerout",e.onTouchEnd,{passive:!0}),n[o]("pointerleave",e.onTouchEnd,{passive:!0}),n[o]("contextmenu",e.onTouchEnd,{passive:!0}),(r.preventClicks||r.preventClicksPropagation)&&i[o]("click",e.onClick,!0),r.cssMode&&a[o]("scroll",e.onScroll),r.updateOnWindowResize?e[u](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",Tl,!0):e[u]("observerUpdate",Tl,!0),i[o]("load",e.onLoad,{capture:!0}))},Ol=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var Nl={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function Al(e,t){return function(n){void 0===n&&(n={});const r=Object.keys(n)[0],i=n[r];"object"==typeof i&&null!==i?(!0===e[r]&&(e[r]={enabled:!0}),"navigation"===r&&e[r]&&e[r].enabled&&!e[r].prevEl&&!e[r].nextEl&&(e[r].auto=!0),["pagination","scrollbar"].indexOf(r)>=0&&e[r]&&e[r].enabled&&!e[r].el&&(e[r].auto=!0),r in e&&"enabled"in i?("object"!=typeof e[r]||"enabled"in e[r]||(e[r].enabled=!0),e[r]||(e[r]={enabled:!1}),Wa(t,n)):Wa(t,n)):Wa(t,n)}}const Dl={eventsEmitter:fl,update:yl,translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:n,translate:r,wrapperEl:i}=this;if(t.virtualTranslate)return n?-r:r;if(t.cssMode)return r;let a=function(e,t){void 0===t&&(t="x");const n=Va();let r,i,a;const l=function(e){const t=Va();let n;return t.getComputedStyle&&(n=t.getComputedStyle(e,null)),!n&&e.currentStyle&&(n=e.currentStyle),n||(n=e.style),n}(e);return n.WebKitCSSMatrix?(i=l.transform||l.webkitTransform,i.split(",").length>6&&(i=i.split(", ").map(e=>e.replace(",",".")).join(", ")),a=new n.WebKitCSSMatrix("none"===i?"":i)):(a=l.MozTransform||l.OTransform||l.MsTransform||l.msTransform||l.transform||l.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),r=a.toString().split(",")),"x"===t&&(i=n.WebKitCSSMatrix?a.m41:16===r.length?parseFloat(r[12]):parseFloat(r[4])),"y"===t&&(i=n.WebKitCSSMatrix?a.m42:16===r.length?parseFloat(r[13]):parseFloat(r[5])),i||0}(i,e);return a+=this.cssOverflowAdjustment(),n&&(a=-a),a||0},setTranslate:function(e,t){const n=this,{rtlTranslate:r,params:i,wrapperEl:a,progress:l}=n;let s,o=0,u=0;n.isHorizontal()?o=r?-e:e:u=e,i.roundLengths&&(o=Math.floor(o),u=Math.floor(u)),n.previousTranslate=n.translate,n.translate=n.isHorizontal()?o:u,i.cssMode?a[n.isHorizontal()?"scrollLeft":"scrollTop"]=n.isHorizontal()?-o:-u:i.virtualTranslate||(n.isHorizontal()?o-=n.cssOverflowAdjustment():u-=n.cssOverflowAdjustment(),a.style.transform=`translate3d(${o}px, ${u}px, 0px)`);const c=n.maxTranslate()-n.minTranslate();s=0===c?0:(e-n.minTranslate())/c,s!==l&&n.updateProgress(e),n.emit("setTranslate",n.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,n,r,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0),void 0===r&&(r=!0);const a=this,{params:l,wrapperEl:s}=a;if(a.animating&&l.preventInteractionOnTransition)return!1;const o=a.minTranslate(),u=a.maxTranslate();let c;if(c=r&&e>o?o:r&&e<u?u:e,a.updateProgress(c),l.cssMode){const e=a.isHorizontal();if(0===t)s[e?"scrollLeft":"scrollTop"]=-c;else{if(!a.support.smoothScroll)return Xa({swiper:a,targetPosition:-c,side:e?"left":"top"}),!0;s.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(a.setTransition(0),a.setTranslate(c),n&&(a.emit("beforeTransitionStart",t,i),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(c),n&&(a.emit("beforeTransitionStart",t,i),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,a.animating=!1,n&&a.emit("transitionEnd"))}),a.wrapperEl.addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const n=this;n.params.cssMode||(n.wrapperEl.style.transitionDuration=`${e}ms`,n.wrapperEl.style.transitionDelay=0===e?"0ms":""),n.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const n=this,{params:r}=n;r.cssMode||(r.autoHeight&&n.updateAutoHeight(),bl({swiper:n,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const n=this,{params:r}=n;n.animating=!1,r.cssMode||(n.setTransition(0),bl({swiper:n,runCallbacks:e,direction:t,step:"End"}))}},slide:wl,loop:_l,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const n="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),n.style.cursor="move",n.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame(()=>{t.__preventObserver__=!1})},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame(()=>{e.__preventObserver__=!1}))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=kl.bind(e),e.onTouchMove=xl.bind(e),e.onTouchEnd=El.bind(e),e.onDocumentTouchStart=Ll.bind(e),t.cssMode&&(e.onScroll=Pl.bind(e)),e.onClick=Cl.bind(e),e.onLoad=Ml.bind(e),zl(e,"on")},detachEvents:function(){zl(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:n,params:r,el:i}=e,a=r.breakpoints;if(!a||a&&0===Object.keys(a).length)return;const l=ja(),s="window"!==r.breakpointsBase&&r.breakpointsBase?"container":r.breakpointsBase,o=["window","container"].includes(r.breakpointsBase)||!r.breakpointsBase?e.el:l.querySelector(r.breakpointsBase),u=e.getBreakpoint(a,s,o);if(!u||e.currentBreakpoint===u)return;const c=(u in a?a[u]:void 0)||e.originalParams,d=Ol(e,r),f=Ol(e,c),p=e.params.grabCursor,h=c.grabCursor,m=r.enabled;d&&!f?(i.classList.remove(`${r.containerModifierClass}grid`,`${r.containerModifierClass}grid-column`),e.emitContainerClasses()):!d&&f&&(i.classList.add(`${r.containerModifierClass}grid`),(c.grid.fill&&"column"===c.grid.fill||!c.grid.fill&&"column"===r.grid.fill)&&i.classList.add(`${r.containerModifierClass}grid-column`),e.emitContainerClasses()),p&&!h?e.unsetGrabCursor():!p&&h&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach(t=>{if(void 0===c[t])return;const n=r[t]&&r[t].enabled,i=c[t]&&c[t].enabled;n&&!i&&e[t].disable(),!n&&i&&e[t].enable()});const g=c.direction&&c.direction!==r.direction,v=r.loop&&(c.slidesPerView!==r.slidesPerView||g),y=r.loop;g&&n&&e.changeDirection(),Wa(e.params,c);const b=e.params.enabled,w=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),m&&!b?e.disable():!m&&b&&e.enable(),e.currentBreakpoint=u,e.emit("_beforeBreakpoint",c),n&&(v?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!y&&w?(e.loopCreate(t),e.updateSlides()):y&&!w&&e.loopDestroy()),e.emit("breakpoint",c)},getBreakpoint:function(e,t,n){if(void 0===t&&(t="window"),!e||"container"===t&&!n)return;let r=!1;const i=Va(),a="window"===t?i.innerHeight:n.clientHeight,l=Object.keys(e).map(e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:a*t,point:e}}return{value:e,point:e}});l.sort((e,t)=>parseInt(e.value,10)-parseInt(t.value,10));for(let e=0;e<l.length;e+=1){const{point:a,value:s}=l[e];"window"===t?i.matchMedia(`(min-width: ${s}px)`).matches&&(r=a):s<=n.clientWidth&&(r=a)}return r||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:n}=e,{slidesOffsetBefore:r}=n;if(r){const t=e.slides.length-1,n=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*r;e.isLocked=e.size>n}else e.isLocked=1===e.snapGrid.length;!0===n.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===n.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:n,rtl:r,el:i,device:a}=e,l=function(e,t){const n=[];return e.forEach(e=>{"object"==typeof e?Object.keys(e).forEach(r=>{e[r]&&n.push(t+r)}):"string"==typeof e&&n.push(t+e)}),n}(["initialized",n.direction,{"free-mode":e.params.freeMode&&n.freeMode.enabled},{autoheight:n.autoHeight},{rtl:r},{grid:n.grid&&n.grid.rows>1},{"grid-column":n.grid&&n.grid.rows>1&&"column"===n.grid.fill},{android:a.android},{ios:a.ios},{"css-mode":n.cssMode},{centered:n.cssMode&&n.centeredSlides},{"watch-progress":n.watchSlidesProgress}],n.containerModifierClass);t.push(...l),i.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}}},Rl={};class Il{constructor(){let e,t;for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];1===r.length&&r[0].constructor&&"Object"===Object.prototype.toString.call(r[0]).slice(8,-1)?t=r[0]:[e,t]=r,t||(t={}),t=Wa({},t),e&&!t.el&&(t.el=e);const a=ja();if(t.el&&"string"==typeof t.el&&a.querySelectorAll(t.el).length>1){const e=[];return a.querySelectorAll(t.el).forEach(n=>{const r=Wa({},t,{el:n});e.push(new Il(r))}),e}const l=this;l.__swiper__=!0,l.support=ul(),l.device=cl({userAgent:t.userAgent}),l.browser=dl(),l.eventsListeners={},l.eventsAnyListeners=[],l.modules=[...l.__modules__],t.modules&&Array.isArray(t.modules)&&l.modules.push(...t.modules);const s={};l.modules.forEach(e=>{e({params:t,swiper:l,extendParams:Al(t,s),on:l.on.bind(l),once:l.once.bind(l),off:l.off.bind(l),emit:l.emit.bind(l)})});const o=Wa({},Nl,s);return l.params=Wa({},o,Rl,t),l.originalParams=Wa({},l.params),l.passedParams=Wa({},t),l.params&&l.params.on&&Object.keys(l.params.on).forEach(e=>{l.on(e,l.params.on[e])}),l.params&&l.params.onAny&&l.onAny(l.params.onAny),Object.assign(l,{enabled:l.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===l.params.direction,isVertical:()=>"vertical"===l.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:l.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.emit("_swiper"),l.params.init&&l.init(),l}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:n}=this,r=el(Qa(t,`.${n.slideClass}, swiper-slide`)[0]);return el(e)-r}getSlideIndexByData(e){return this.getSlideIndex(this.slides.find(t=>1*t.getAttribute("data-swiper-slide-index")===e))}getSlideIndexWhenGrid(e){return this.grid&&this.params.grid&&this.params.grid.rows>1&&("column"===this.params.grid.fill?e=Math.floor(e/this.params.grid.rows):"row"===this.params.grid.fill&&(e%=Math.ceil(this.slides.length/this.params.grid.rows))),e}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=Qa(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const n=this;e=Math.min(Math.max(e,0),1);const r=n.minTranslate(),i=(n.maxTranslate()-r)*e+r;n.translateTo(i,void 0===t?0:t),n.updateActiveIndex(),n.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter(t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter(e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass)).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach(n=>{const r=e.getSlideClasses(n);t.push({slideEl:n,classNames:r}),e.emit("_slideClass",n,r)}),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:n,slides:r,slidesGrid:i,slidesSizesGrid:a,size:l,activeIndex:s}=this;let o=1;if("number"==typeof n.slidesPerView)return n.slidesPerView;if(n.centeredSlides){let e,t=r[s]?Math.ceil(r[s].swiperSlideSize):0;for(let n=s+1;n<r.length;n+=1)r[n]&&!e&&(t+=Math.ceil(r[n].swiperSlideSize),o+=1,t>l&&(e=!0));for(let n=s-1;n>=0;n-=1)r[n]&&!e&&(t+=r[n].swiperSlideSize,o+=1,t>l&&(e=!0))}else if("current"===e)for(let e=s+1;e<r.length;e+=1)(t?i[e]+a[e]-i[s]<l:i[e]-i[s]<l)&&(o+=1);else for(let e=s-1;e>=0;e-=1)i[s]-i[e]<l&&(o+=1);return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:n}=e;function r(){const t=e.rtlTranslate?-1*e.translate:e.translate,n=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(n),e.updateActiveIndex(),e.updateSlidesClasses()}let i;if(n.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach(t=>{t.complete&&ml(e,t)}),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),n.freeMode&&n.freeMode.enabled&&!n.cssMode)r(),n.autoHeight&&e.updateAutoHeight();else{if(("auto"===n.slidesPerView||n.slidesPerView>1)&&e.isEnd&&!n.centeredSlides){const t=e.virtual&&n.virtual.enabled?e.virtual.slides:e.slides;i=e.slideTo(t.length-1,0,!1,!0)}else i=e.slideTo(e.activeIndex,0,!1,!0);i||r()}n.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const n=this,r=n.params.direction;return e||(e="horizontal"===r?"vertical":"horizontal"),e===r||"horizontal"!==e&&"vertical"!==e||(n.el.classList.remove(`${n.params.containerModifierClass}${r}`),n.el.classList.add(`${n.params.containerModifierClass}${e}`),n.emitContainerClasses(),n.params.direction=e,n.slides.forEach(t=>{"vertical"===e?t.style.width="":t.style.height=""}),n.emit("changeDirection"),t&&n.update()),n}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let n=e||t.params.el;if("string"==typeof n&&(n=document.querySelector(n)),!n)return!1;n.swiper=t,n.parentNode&&n.parentNode.host&&n.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const r=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let i=n&&n.shadowRoot&&n.shadowRoot.querySelector?n.shadowRoot.querySelector(r()):Qa(n,r())[0];return!i&&t.params.createElements&&(i=Za("div",t.params.wrapperClass),n.append(i),Qa(n,`.${t.params.slideClass}`).forEach(e=>{i.append(e)})),Object.assign(t,{el:n,wrapperEl:i,slidesEl:t.isElement&&!n.parentNode.host.slideSlots?n.parentNode.host:i,hostEl:t.isElement?n.parentNode.host:n,mounted:!0,rtl:"rtl"===n.dir.toLowerCase()||"rtl"===Ja(n,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===n.dir.toLowerCase()||"rtl"===Ja(n,"direction")),wrongRTL:"-webkit-box"===Ja(i,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(void 0,!0),t.attachEvents();const n=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&n.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),n.forEach(e=>{e.complete?ml(t,e):e.addEventListener("load",e=>{ml(t,e.target)})}),vl(t),t.initialized=!0,vl(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const n=this,{params:r,el:i,wrapperEl:a,slides:l}=n;return void 0===n.params||n.destroyed||(n.emit("beforeDestroy"),n.initialized=!1,n.detachEvents(),r.loop&&n.loopDestroy(),t&&(n.removeClasses(),i&&"string"!=typeof i&&i.removeAttribute("style"),a&&a.removeAttribute("style"),l&&l.length&&l.forEach(e=>{e.classList.remove(r.slideVisibleClass,r.slideFullyVisibleClass,r.slideActiveClass,r.slideNextClass,r.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")})),n.emit("destroy"),Object.keys(n.eventsListeners).forEach(e=>{n.off(e)}),!1!==e&&(n.el&&"string"!=typeof n.el&&(n.el.swiper=null),function(e){const t=e;Object.keys(t).forEach(e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})}(n)),n.destroyed=!0),null}static extendDefaults(e){Wa(Rl,e)}static get extendedDefaults(){return Rl}static get defaults(){return Nl}static installModule(e){Il.prototype.__modules__||(Il.prototype.__modules__=[]);const t=Il.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach(e=>Il.installModule(e)),Il):(Il.installModule(e),Il)}}Object.keys(Dl).forEach(e=>{Object.keys(Dl[e]).forEach(t=>{Il.prototype[t]=Dl[e][t]})}),Il.use([function(e){let{swiper:t,on:n,emit:r}=e;const i=Va();let a=null,l=null;const s=()=>{t&&!t.destroyed&&t.initialized&&(r("beforeResize"),r("resize"))},o=()=>{t&&!t.destroyed&&t.initialized&&r("orientationchange")};n("init",()=>{t.params.resizeObserver&&void 0!==i.ResizeObserver?t&&!t.destroyed&&t.initialized&&(a=new ResizeObserver(e=>{l=i.requestAnimationFrame(()=>{const{width:n,height:r}=t;let i=n,a=r;e.forEach(e=>{let{contentBoxSize:n,contentRect:r,target:l}=e;l&&l!==t.el||(i=r?r.width:(n[0]||n).inlineSize,a=r?r.height:(n[0]||n).blockSize)}),i===n&&a===r||s()})}),a.observe(t.el)):(i.addEventListener("resize",s),i.addEventListener("orientationchange",o))}),n("destroy",()=>{l&&i.cancelAnimationFrame(l),a&&a.unobserve&&t.el&&(a.unobserve(t.el),a=null),i.removeEventListener("resize",s),i.removeEventListener("orientationchange",o)})},function(e){let{swiper:t,extendParams:n,on:r,emit:i}=e;const a=[],l=Va(),s=function(e,n){void 0===n&&(n={});const r=new(l.MutationObserver||l.WebkitMutationObserver)(e=>{if(t.__preventObserver__)return;if(1===e.length)return void i("observerUpdate",e[0]);const n=function(){i("observerUpdate",e[0])};l.requestAnimationFrame?l.requestAnimationFrame(n):l.setTimeout(n,0)});r.observe(e,{attributes:void 0===n.attributes||n.attributes,childList:t.isElement||(void 0===n.childList||n).childList,characterData:void 0===n.characterData||n.characterData}),a.push(r)};n({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",()=>{if(t.params.observer){if(t.params.observeParents){const e=tl(t.hostEl);for(let t=0;t<e.length;t+=1)s(e[t])}s(t.hostEl,{childList:t.params.observeSlideChildren}),s(t.wrapperEl,{attributes:!1})}}),r("destroy",()=>{a.forEach(e=>{e.disconnect()}),a.splice(0,a.length)})}]);const Fl=["eventsPrefix","injectStyles","injectStylesUrls","modules","init","_direction","oneWayMovement","swiperElementNodeName","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","breakpointsBase","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_loop","loopAdditionalSlides","loopAddBlankSlides","loopPreventsSliding","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","slideBlankClass","wrapperClass","lazyPreloaderClass","lazyPreloadPrevNext","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom","control"];function Bl(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)&&!e.__swiper__}function jl(e,t){const n=["__proto__","constructor","prototype"];Object.keys(t).filter(e=>n.indexOf(e)<0).forEach(n=>{void 0===e[n]?e[n]=t[n]:Bl(t[n])&&Bl(e[n])&&Object.keys(t[n]).length>0?t[n].__swiper__?e[n]=t[n]:jl(e[n],t[n]):e[n]=t[n]})}function $l(e){return void 0===e&&(e={}),e.navigation&&void 0===e.navigation.nextEl&&void 0===e.navigation.prevEl}function Vl(e){return void 0===e&&(e={}),e.pagination&&void 0===e.pagination.el}function Hl(e){return void 0===e&&(e={}),e.scrollbar&&void 0===e.scrollbar.el}function Gl(e){void 0===e&&(e="");const t=e.split(" ").map(e=>e.trim()).filter(e=>!!e),n=[];return t.forEach(e=>{n.indexOf(e)<0&&n.push(e)}),n.join(" ")}function Ul(e){return void 0===e&&(e=""),e?e.includes("swiper-wrapper")?e:`swiper-wrapper ${e}`:"swiper-wrapper"}function ql(){return ql=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ql.apply(this,arguments)}function Wl(e){return e.type&&e.type.displayName&&e.type.displayName.includes("SwiperSlide")}function Yl(e){const t=[];return a.Children.toArray(e).forEach(e=>{Wl(e)?t.push(e):e.props&&e.props.children&&Yl(e.props.children).forEach(e=>t.push(e))}),t}function Xl(e){const t=[],n={"container-start":[],"container-end":[],"wrapper-start":[],"wrapper-end":[]};return a.Children.toArray(e).forEach(e=>{if(Wl(e))t.push(e);else if(e.props&&e.props.slot&&n[e.props.slot])n[e.props.slot].push(e);else if(e.props&&e.props.children){const r=Yl(e.props.children);r.length>0?r.forEach(e=>t.push(e)):n["container-end"].push(e)}else n["container-end"].push(e)}),{slides:t,slots:n}}function Ql(e,t){return"undefined"==typeof window?(0,a.useEffect)(e,t):(0,a.useLayoutEffect)(e,t)}const Kl=(0,a.createContext)(null),Zl=(0,a.createContext)(null),Jl=(0,a.forwardRef)(function(e,t){let{className:n,tag:r="div",wrapperTag:i="div",children:l,onSwiper:s,...o}=void 0===e?{}:e,u=!1;const[c,d]=(0,a.useState)("swiper"),[f,p]=(0,a.useState)(null),[h,m]=(0,a.useState)(!1),g=(0,a.useRef)(!1),v=(0,a.useRef)(null),y=(0,a.useRef)(null),b=(0,a.useRef)(null),w=(0,a.useRef)(null),_=(0,a.useRef)(null),S=(0,a.useRef)(null),k=(0,a.useRef)(null),x=(0,a.useRef)(null),{params:E,passedParams:T,rest:C,events:P}=function(e,t){void 0===e&&(e={}),void 0===t&&(t=!0);const n={on:{}},r={},i={};jl(n,Nl),n._emitClasses=!0,n.init=!1;const a={},l=Fl.map(e=>e.replace(/_/,"")),s=Object.assign({},e);return Object.keys(s).forEach(s=>{void 0!==e[s]&&(l.indexOf(s)>=0?Bl(e[s])?(n[s]={},i[s]={},jl(n[s],e[s]),jl(i[s],e[s])):(n[s]=e[s],i[s]=e[s]):0===s.search(/on[A-Z]/)&&"function"==typeof e[s]?t?r[`${s[2].toLowerCase()}${s.substr(3)}`]=e[s]:n.on[`${s[2].toLowerCase()}${s.substr(3)}`]=e[s]:a[s]=e[s])}),["navigation","pagination","scrollbar"].forEach(e=>{!0===n[e]&&(n[e]={}),!1===n[e]&&delete n[e]}),{params:n,passedParams:i,rest:a,events:r}}(o),{slides:M,slots:L}=Xl(l),z=()=>{m(!h)};Object.assign(E.on,{_containerClasses(e,t){d(t)}});const O=()=>{Object.assign(E.on,P),u=!0;const e={...E};if(delete e.wrapperClass,y.current=new Il(e),y.current.virtual&&y.current.params.virtual.enabled){y.current.virtual.slides=M;const e={cache:!1,slides:M,renderExternal:p,renderExternalUpdate:!1};jl(y.current.params.virtual,e),jl(y.current.originalParams.virtual,e)}};return v.current||O(),y.current&&y.current.on("_beforeBreakpoint",z),(0,a.useEffect)(()=>()=>{y.current&&y.current.off("_beforeBreakpoint",z)}),(0,a.useEffect)(()=>{!g.current&&y.current&&(y.current.emitSlidesClasses(),g.current=!0)}),Ql(()=>{if(t&&(t.current=v.current),v.current)return y.current.destroyed&&O(),function(e,t){let{el:n,nextEl:r,prevEl:i,paginationEl:a,scrollbarEl:l,swiper:s}=e;$l(t)&&r&&i&&(s.params.navigation.nextEl=r,s.originalParams.navigation.nextEl=r,s.params.navigation.prevEl=i,s.originalParams.navigation.prevEl=i),Vl(t)&&a&&(s.params.pagination.el=a,s.originalParams.pagination.el=a),Hl(t)&&l&&(s.params.scrollbar.el=l,s.originalParams.scrollbar.el=l),s.init(n)}({el:v.current,nextEl:_.current,prevEl:S.current,paginationEl:k.current,scrollbarEl:x.current,swiper:y.current},E),s&&!y.current.destroyed&&s(y.current),()=>{y.current&&!y.current.destroyed&&y.current.destroy(!0,!1)}},[]),Ql(()=>{!u&&P&&y.current&&Object.keys(P).forEach(e=>{y.current.on(e,P[e])});const e=function(e,t,n,r,i){const a=[];if(!t)return a;const l=e=>{a.indexOf(e)<0&&a.push(e)};if(n&&r){const e=r.map(i),t=n.map(i);e.join("")!==t.join("")&&l("children"),r.length!==n.length&&l("children")}return Fl.filter(e=>"_"===e[0]).map(e=>e.replace(/_/,"")).forEach(n=>{if(n in e&&n in t)if(Bl(e[n])&&Bl(t[n])){const r=Object.keys(e[n]),i=Object.keys(t[n]);r.length!==i.length?l(n):(r.forEach(r=>{e[n][r]!==t[n][r]&&l(n)}),i.forEach(r=>{e[n][r]!==t[n][r]&&l(n)}))}else e[n]!==t[n]&&l(n)}),a}(T,b.current,M,w.current,e=>e.key);return b.current=T,w.current=M,e.length&&y.current&&!y.current.destroyed&&function(e){let{swiper:t,slides:n,passedParams:r,changedParams:i,nextEl:a,prevEl:l,scrollbarEl:s,paginationEl:o}=e;const u=i.filter(e=>"children"!==e&&"direction"!==e&&"wrapperClass"!==e),{params:c,pagination:d,navigation:f,scrollbar:p,virtual:h,thumbs:m}=t;let g,v,y,b,w,_,S,k;i.includes("thumbs")&&r.thumbs&&r.thumbs.swiper&&!r.thumbs.swiper.destroyed&&c.thumbs&&(!c.thumbs.swiper||c.thumbs.swiper.destroyed)&&(g=!0),i.includes("controller")&&r.controller&&r.controller.control&&c.controller&&!c.controller.control&&(v=!0),i.includes("pagination")&&r.pagination&&(r.pagination.el||o)&&(c.pagination||!1===c.pagination)&&d&&!d.el&&(y=!0),i.includes("scrollbar")&&r.scrollbar&&(r.scrollbar.el||s)&&(c.scrollbar||!1===c.scrollbar)&&p&&!p.el&&(b=!0),i.includes("navigation")&&r.navigation&&(r.navigation.prevEl||l)&&(r.navigation.nextEl||a)&&(c.navigation||!1===c.navigation)&&f&&!f.prevEl&&!f.nextEl&&(w=!0);const x=e=>{t[e]&&(t[e].destroy(),"navigation"===e?(t.isElement&&(t[e].prevEl.remove(),t[e].nextEl.remove()),c[e].prevEl=void 0,c[e].nextEl=void 0,t[e].prevEl=void 0,t[e].nextEl=void 0):(t.isElement&&t[e].el.remove(),c[e].el=void 0,t[e].el=void 0))};i.includes("loop")&&t.isElement&&(c.loop&&!r.loop?_=!0:!c.loop&&r.loop?S=!0:k=!0),u.forEach(e=>{if(Bl(c[e])&&Bl(r[e]))Object.assign(c[e],r[e]),"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e||!("enabled"in r[e])||r[e].enabled||x(e);else{const t=r[e];!0!==t&&!1!==t||"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e?c[e]=r[e]:!1===t&&x(e)}}),u.includes("controller")&&!v&&t.controller&&t.controller.control&&c.controller&&c.controller.control&&(t.controller.control=c.controller.control),i.includes("children")&&n&&h&&c.virtual.enabled?(h.slides=n,h.update(!0)):i.includes("virtual")&&h&&c.virtual.enabled&&(n&&(h.slides=n),h.update(!0)),i.includes("children")&&n&&c.loop&&(k=!0),g&&m.init()&&m.update(!0),v&&(t.controller.control=c.controller.control),y&&(!t.isElement||o&&"string"!=typeof o||(o=document.createElement("div"),o.classList.add("swiper-pagination"),o.part.add("pagination"),t.el.appendChild(o)),o&&(c.pagination.el=o),d.init(),d.render(),d.update()),b&&(!t.isElement||s&&"string"!=typeof s||(s=document.createElement("div"),s.classList.add("swiper-scrollbar"),s.part.add("scrollbar"),t.el.appendChild(s)),s&&(c.scrollbar.el=s),p.init(),p.updateSize(),p.setTranslate()),w&&(t.isElement&&(a&&"string"!=typeof a||(a=document.createElement("div"),a.classList.add("swiper-button-next"),al(a,t.hostEl.constructor.nextButtonSvg),a.part.add("button-next"),t.el.appendChild(a)),l&&"string"!=typeof l||(l=document.createElement("div"),l.classList.add("swiper-button-prev"),al(l,t.hostEl.constructor.prevButtonSvg),l.part.add("button-prev"),t.el.appendChild(l))),a&&(c.navigation.nextEl=a),l&&(c.navigation.prevEl=l),f.init(),f.update()),i.includes("allowSlideNext")&&(t.allowSlideNext=r.allowSlideNext),i.includes("allowSlidePrev")&&(t.allowSlidePrev=r.allowSlidePrev),i.includes("direction")&&t.changeDirection(r.direction,!1),(_||k)&&t.loopDestroy(),(S||k)&&t.loopCreate(),t.update()}({swiper:y.current,slides:M,passedParams:T,changedParams:e,nextEl:_.current,prevEl:S.current,scrollbarEl:x.current,paginationEl:k.current}),()=>{P&&y.current&&Object.keys(P).forEach(e=>{y.current.off(e,P[e])})}}),Ql(()=>{var e;!(e=y.current)||e.destroyed||!e.params.virtual||e.params.virtual&&!e.params.virtual.enabled||(e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.emit("_virtualUpdated"),e.parallax&&e.params.parallax&&e.params.parallax.enabled&&e.parallax.setTranslate())},[f]),a.createElement(r,ql({ref:v,className:Gl(`${c}${n?` ${n}`:""}`)},C),a.createElement(Zl.Provider,{value:y.current},L["container-start"],a.createElement(i,{className:Ul(E.wrapperClass)},L["wrapper-start"],E.virtual?function(e,t,n){if(!n)return null;const r=e=>{let n=e;return e<0?n=t.length+e:n>=t.length&&(n-=t.length),n},i=e.isHorizontal()?{[e.rtlTranslate?"right":"left"]:`${n.offset}px`}:{top:`${n.offset}px`},{from:l,to:s}=n,o=e.params.loop?-t.length:0,u=e.params.loop?2*t.length:t.length,c=[];for(let e=o;e<u;e+=1)e>=l&&e<=s&&c.push(t[r(e)]);return c.map((t,n)=>a.cloneElement(t,{swiper:e,style:i,key:t.props.virtualIndex||t.key||`slide-${n}`}))}(y.current,M,f):M.map((e,t)=>a.cloneElement(e,{swiper:y.current,swiperSlideIndex:t})),L["wrapper-end"]),$l(E)&&a.createElement(a.Fragment,null,a.createElement("div",{ref:S,className:"swiper-button-prev"}),a.createElement("div",{ref:_,className:"swiper-button-next"})),Hl(E)&&a.createElement("div",{ref:x,className:"swiper-scrollbar"}),Vl(E)&&a.createElement("div",{ref:k,className:"swiper-pagination"}),L["container-end"]))});Jl.displayName="Swiper";const es=(0,a.forwardRef)(function(e,t){let{tag:n="div",children:r,className:i="",swiper:l,zoom:s,lazy:o,virtualIndex:u,swiperSlideIndex:c,...d}=void 0===e?{}:e;const f=(0,a.useRef)(null),[p,h]=(0,a.useState)("swiper-slide"),[m,g]=(0,a.useState)(!1);function v(e,t,n){t===f.current&&h(n)}Ql(()=>{if(void 0!==c&&(f.current.swiperSlideIndex=c),t&&(t.current=f.current),f.current&&l){if(!l.destroyed)return l.on("_slideClass",v),()=>{l&&l.off("_slideClass",v)};"swiper-slide"!==p&&h("swiper-slide")}}),Ql(()=>{l&&f.current&&!l.destroyed&&h(l.getSlideClasses(f.current))},[l]);const y={isActive:p.indexOf("swiper-slide-active")>=0,isVisible:p.indexOf("swiper-slide-visible")>=0,isPrev:p.indexOf("swiper-slide-prev")>=0,isNext:p.indexOf("swiper-slide-next")>=0},b=()=>"function"==typeof r?r(y):r;return a.createElement(n,ql({ref:f,className:Gl(`${p}${i?` ${i}`:""}`),"data-swiper-slide-index":u,onLoad:()=>{g(!0)}},d),s&&a.createElement(Kl.Provider,{value:y},a.createElement("div",{className:"swiper-zoom-container","data-swiper-zoom":"number"==typeof s?s:void 0},b(),o&&!m&&a.createElement("div",{className:"swiper-lazy-preloader"}))),!s&&a.createElement(Kl.Provider,{value:y},b(),o&&!m&&a.createElement("div",{className:"swiper-lazy-preloader"})))});function ts(e,t,n,r){return e.params.createElements&&Object.keys(r).forEach(i=>{if(!n[i]&&!0===n.auto){let a=Qa(e.el,`.${r[i]}`)[0];a||(a=Za("div",r[i]),a.className=r[i],e.el.append(a)),n[i]=a,t[i]=a}}),n}function ns(e){let{swiper:t,extendParams:n,on:r,emit:i}=e;function a(e){let n;return e&&"string"==typeof e&&t.isElement&&(n=t.el.querySelector(e)||t.hostEl.querySelector(e),n)?n:(e&&("string"==typeof e&&(n=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&n&&n.length>1&&1===t.el.querySelectorAll(e).length?n=t.el.querySelector(e):n&&1===n.length&&(n=n[0])),e&&!n?e:n)}function l(e,n){const r=t.params.navigation;(e=il(e)).forEach(e=>{e&&(e.classList[n?"add":"remove"](...r.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=n),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](r.lockClass))})}function s(){const{nextEl:e,prevEl:n}=t.navigation;if(t.params.loop)return l(n,!1),void l(e,!1);l(n,t.isBeginning&&!t.params.rewind),l(e,t.isEnd&&!t.params.rewind)}function o(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),i("navigationPrev"))}function u(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),i("navigationNext"))}function c(){const e=t.params.navigation;if(t.params.navigation=ts(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let n=a(e.nextEl),r=a(e.prevEl);Object.assign(t.navigation,{nextEl:n,prevEl:r}),n=il(n),r=il(r);const i=(n,r)=>{n&&n.addEventListener("click","next"===r?u:o),!t.enabled&&n&&n.classList.add(...e.lockClass.split(" "))};n.forEach(e=>i(e,"next")),r.forEach(e=>i(e,"prev"))}function d(){let{nextEl:e,prevEl:n}=t.navigation;e=il(e),n=il(n);const r=(e,n)=>{e.removeEventListener("click","next"===n?u:o),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach(e=>r(e,"next")),n.forEach(e=>r(e,"prev"))}n({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},r("init",()=>{!1===t.params.navigation.enabled?f():(c(),s())}),r("toEdge fromEdge lock unlock",()=>{s()}),r("destroy",()=>{d()}),r("enable disable",()=>{let{nextEl:e,prevEl:n}=t.navigation;e=il(e),n=il(n),t.enabled?s():[...e,...n].filter(e=>!!e).forEach(e=>e.classList.add(t.params.navigation.lockClass))}),r("click",(e,n)=>{let{nextEl:r,prevEl:a}=t.navigation;r=il(r),a=il(a);const l=n.target;let s=a.includes(l)||r.includes(l);if(t.isElement&&!s){const e=n.path||n.composedPath&&n.composedPath();e&&(s=e.find(e=>r.includes(e)||a.includes(e)))}if(t.params.navigation.hideOnClick&&!s){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===l||t.pagination.el.contains(l)))return;let e;r.length?e=r[0].classList.contains(t.params.navigation.hiddenClass):a.length&&(e=a[0].classList.contains(t.params.navigation.hiddenClass)),i(!0===e?"navigationShow":"navigationHide"),[...r,...a].filter(e=>!!e).forEach(e=>e.classList.toggle(t.params.navigation.hiddenClass))}});const f=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),d()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),c(),s()},disable:f,update:s,init:c,destroy:d})}function rs(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/()[\]])/g,"\\$1").replace(/ /g,".")}`}function is(e){let{swiper:t,extendParams:n,on:r,emit:i}=e;const a="swiper-pagination";let l;n({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${a}-bullet`,bulletActiveClass:`${a}-bullet-active`,modifierClass:`${a}-`,currentClass:`${a}-current`,totalClass:`${a}-total`,hiddenClass:`${a}-hidden`,progressbarFillClass:`${a}-progressbar-fill`,progressbarOppositeClass:`${a}-progressbar-opposite`,clickableClass:`${a}-clickable`,lockClass:`${a}-lock`,horizontalClass:`${a}-horizontal`,verticalClass:`${a}-vertical`,paginationDisabledClass:`${a}-disabled`}}),t.pagination={el:null,bullets:[]};let s=0;function o(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function u(e,n){const{bulletActiveClass:r}=t.params.pagination;e&&(e=e[("prev"===n?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${r}-${n}`),(e=e[("prev"===n?"previous":"next")+"ElementSibling"])&&e.classList.add(`${r}-${n}-${n}`))}function c(e){const n=e.target.closest(rs(t.params.pagination.bulletClass));if(!n)return;e.preventDefault();const r=el(n)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===r)return;const e=(i=t.realIndex,a=r,(a%=l=t.slides.length)===1+(i%=l)?"next":a===i-1?"previous":void 0);"next"===e?t.slideNext():"previous"===e?t.slidePrev():t.slideToLoop(r)}else t.slideTo(r);var i,a,l}function d(){const e=t.rtl,n=t.params.pagination;if(o())return;let r,a,c=t.pagination.el;c=il(c);const d=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,f=t.params.loop?Math.ceil(d/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(a=t.previousRealIndex||0,r=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(r=t.snapIndex,a=t.previousSnapIndex):(a=t.previousIndex||0,r=t.activeIndex||0),"bullets"===n.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const i=t.pagination.bullets;let o,d,f;if(n.dynamicBullets&&(l=rl(i[0],t.isHorizontal()?"width":"height",!0),c.forEach(e=>{e.style[t.isHorizontal()?"width":"height"]=l*(n.dynamicMainBullets+4)+"px"}),n.dynamicMainBullets>1&&void 0!==a&&(s+=r-(a||0),s>n.dynamicMainBullets-1?s=n.dynamicMainBullets-1:s<0&&(s=0)),o=Math.max(r-s,0),d=o+(Math.min(i.length,n.dynamicMainBullets)-1),f=(d+o)/2),i.forEach(e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map(e=>`${n.bulletActiveClass}${e}`)].map(e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e).flat();e.classList.remove(...t)}),c.length>1)i.forEach(e=>{const i=el(e);i===r?e.classList.add(...n.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),n.dynamicBullets&&(i>=o&&i<=d&&e.classList.add(...`${n.bulletActiveClass}-main`.split(" ")),i===o&&u(e,"prev"),i===d&&u(e,"next"))});else{const e=i[r];if(e&&e.classList.add(...n.bulletActiveClass.split(" ")),t.isElement&&i.forEach((e,t)=>{e.setAttribute("part",t===r?"bullet-active":"bullet")}),n.dynamicBullets){const e=i[o],t=i[d];for(let e=o;e<=d;e+=1)i[e]&&i[e].classList.add(...`${n.bulletActiveClass}-main`.split(" "));u(e,"prev"),u(t,"next")}}if(n.dynamicBullets){const r=Math.min(i.length,n.dynamicMainBullets+4),a=(l*r-l)/2-f*l,s=e?"right":"left";i.forEach(e=>{e.style[t.isHorizontal()?s:"top"]=`${a}px`})}}c.forEach((e,a)=>{if("fraction"===n.type&&(e.querySelectorAll(rs(n.currentClass)).forEach(e=>{e.textContent=n.formatFractionCurrent(r+1)}),e.querySelectorAll(rs(n.totalClass)).forEach(e=>{e.textContent=n.formatFractionTotal(f)})),"progressbar"===n.type){let i;i=n.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const a=(r+1)/f;let l=1,s=1;"horizontal"===i?l=a:s=a,e.querySelectorAll(rs(n.progressbarFillClass)).forEach(e=>{e.style.transform=`translate3d(0,0,0) scaleX(${l}) scaleY(${s})`,e.style.transitionDuration=`${t.params.speed}ms`})}"custom"===n.type&&n.renderCustom?(al(e,n.renderCustom(t,r+1,f)),0===a&&i("paginationRender",e)):(0===a&&i("paginationRender",e),i("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](n.lockClass)})}function f(){const e=t.params.pagination;if(o())return;const n=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let r=t.pagination.el;r=il(r);let a="";if("bullets"===e.type){let r=t.params.loop?Math.ceil(n/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&r>n&&(r=n);for(let n=0;n<r;n+=1)e.renderBullet?a+=e.renderBullet.call(t,n,e.bulletClass):a+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(a=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(a=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],r.forEach(n=>{"custom"!==e.type&&al(n,a||""),"bullets"===e.type&&t.pagination.bullets.push(...n.querySelectorAll(rs(e.bulletClass)))}),"custom"!==e.type&&i("paginationRender",r[0])}function p(){t.params.pagination=ts(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let n;"string"==typeof e.el&&t.isElement&&(n=t.el.querySelector(e.el)),n||"string"!=typeof e.el||(n=[...document.querySelectorAll(e.el)]),n||(n=e.el),n&&0!==n.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(n)&&n.length>1&&(n=[...t.el.querySelectorAll(e.el)],n.length>1&&(n=n.find(e=>tl(e,".swiper")[0]===t.el))),Array.isArray(n)&&1===n.length&&(n=n[0]),Object.assign(t.pagination,{el:n}),n=il(n),n.forEach(n=>{"bullets"===e.type&&e.clickable&&n.classList.add(...(e.clickableClass||"").split(" ")),n.classList.add(e.modifierClass+e.type),n.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(n.classList.add(`${e.modifierClass}${e.type}-dynamic`),s=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&n.classList.add(e.progressbarOppositeClass),e.clickable&&n.addEventListener("click",c),t.enabled||n.classList.add(e.lockClass)}))}function h(){const e=t.params.pagination;if(o())return;let n=t.pagination.el;n&&(n=il(n),n.forEach(n=>{n.classList.remove(e.hiddenClass),n.classList.remove(e.modifierClass+e.type),n.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(n.classList.remove(...(e.clickableClass||"").split(" ")),n.removeEventListener("click",c))})),t.pagination.bullets&&t.pagination.bullets.forEach(t=>t.classList.remove(...e.bulletActiveClass.split(" ")))}r("changeDirection",()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:n}=t.pagination;n=il(n),n.forEach(n=>{n.classList.remove(e.horizontalClass,e.verticalClass),n.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)})}),r("init",()=>{!1===t.params.pagination.enabled?m():(p(),f(),d())}),r("activeIndexChange",()=>{void 0===t.snapIndex&&d()}),r("snapIndexChange",()=>{d()}),r("snapGridLengthChange",()=>{f(),d()}),r("destroy",()=>{h()}),r("enable disable",()=>{let{el:e}=t.pagination;e&&(e=il(e),e.forEach(e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass)))}),r("lock unlock",()=>{d()}),r("click",(e,n)=>{const r=n.target,a=il(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&a&&a.length>0&&!r.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&r===t.navigation.nextEl||t.navigation.prevEl&&r===t.navigation.prevEl))return;const e=a[0].classList.contains(t.params.pagination.hiddenClass);i(!0===e?"paginationShow":"paginationHide"),a.forEach(e=>e.classList.toggle(t.params.pagination.hiddenClass))}});const m=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=il(e),e.forEach(e=>e.classList.add(t.params.pagination.paginationDisabledClass))),h()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=il(e),e.forEach(e=>e.classList.remove(t.params.pagination.paginationDisabledClass))),p(),f(),d()},disable:m,render:f,update:d,init:p,destroy:h})}function as(e){let{swiper:t,extendParams:n,emit:r,once:i}=e;n({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(t,{freeMode:{onTouchStart:function(){if(t.params.cssMode)return;const e=t.getTranslate();t.setTranslate(e),t.setTransition(0),t.touchEventsData.velocities.length=0,t.freeMode.onTouchEnd({currentPos:t.rtl?t.translate:-t.translate})},onTouchMove:function(){if(t.params.cssMode)return;const{touchEventsData:e,touches:n}=t;0===e.velocities.length&&e.velocities.push({position:n[t.isHorizontal()?"startX":"startY"],time:e.touchStartTime}),e.velocities.push({position:n[t.isHorizontal()?"currentX":"currentY"],time:Ga()})},onTouchEnd:function(e){let{currentPos:n}=e;if(t.params.cssMode)return;const{params:a,wrapperEl:l,rtlTranslate:s,snapGrid:o,touchEventsData:u}=t,c=Ga()-u.touchStartTime;if(n<-t.minTranslate())t.slideTo(t.activeIndex);else if(n>-t.maxTranslate())t.slides.length<o.length?t.slideTo(o.length-1):t.slideTo(t.slides.length-1);else{if(a.freeMode.momentum){if(u.velocities.length>1){const e=u.velocities.pop(),n=u.velocities.pop(),r=e.position-n.position,i=e.time-n.time;t.velocity=r/i,t.velocity/=2,Math.abs(t.velocity)<a.freeMode.minimumVelocity&&(t.velocity=0),(i>150||Ga()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=a.freeMode.momentumVelocityRatio,u.velocities.length=0;let e=1e3*a.freeMode.momentumRatio;const n=t.velocity*e;let c=t.translate+n;s&&(c=-c);let d,f=!1;const p=20*Math.abs(t.velocity)*a.freeMode.momentumBounceRatio;let h;if(c<t.maxTranslate())a.freeMode.momentumBounce?(c+t.maxTranslate()<-p&&(c=t.maxTranslate()-p),d=t.maxTranslate(),f=!0,u.allowMomentumBounce=!0):c=t.maxTranslate(),a.loop&&a.centeredSlides&&(h=!0);else if(c>t.minTranslate())a.freeMode.momentumBounce?(c-t.minTranslate()>p&&(c=t.minTranslate()+p),d=t.minTranslate(),f=!0,u.allowMomentumBounce=!0):c=t.minTranslate(),a.loop&&a.centeredSlides&&(h=!0);else if(a.freeMode.sticky){let e;for(let t=0;t<o.length;t+=1)if(o[t]>-c){e=t;break}c=Math.abs(o[e]-c)<Math.abs(o[e-1]-c)||"next"===t.swipeDirection?o[e]:o[e-1],c=-c}if(h&&i("transitionEnd",()=>{t.loopFix()}),0!==t.velocity){if(e=s?Math.abs((-c-t.translate)/t.velocity):Math.abs((c-t.translate)/t.velocity),a.freeMode.sticky){const n=Math.abs((s?-c:c)-t.translate),r=t.slidesSizesGrid[t.activeIndex];e=n<r?a.speed:n<2*r?1.5*a.speed:2.5*a.speed}}else if(a.freeMode.sticky)return void t.slideToClosest();a.freeMode.momentumBounce&&f?(t.updateProgress(d),t.setTransition(e),t.setTranslate(c),t.transitionStart(!0,t.swipeDirection),t.animating=!0,nl(l,()=>{t&&!t.destroyed&&u.allowMomentumBounce&&(r("momentumBounce"),t.setTransition(a.speed),setTimeout(()=>{t.setTranslate(d),nl(l,()=>{t&&!t.destroyed&&t.transitionEnd()})},0))})):t.velocity?(r("_freeModeNoMomentumRelease"),t.updateProgress(c),t.setTransition(e),t.setTranslate(c),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,nl(l,()=>{t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(c),t.updateActiveIndex(),t.updateSlidesClasses()}else{if(a.freeMode.sticky)return void t.slideToClosest();a.freeMode&&r("_freeModeNoMomentumRelease")}(!a.freeMode.momentum||c>=a.longSwipesMs)&&(r("_freeModeStaticRelease"),t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}}}})}es.displayName="SwiperSlide";var ls=function(e){var t=e.date,n=e.description;return(0,r.jsxs)("div",{className:"swiper-slide",children:[(0,r.jsx)("span",{className:"swiper-slide__date",children:t}),(0,r.jsx)("p",{className:"swiper-slide__description",children:n})]})};const ss=function(){var e=(0,a.useContext)(s),t=e.events,n=e.currentEvent,i=function(){var e=(0,a.useState)({width:0,height:0}),t=e[0],n=e[1],r=function(){n({width:window.innerWidth,height:window.innerHeight})};return(0,a.useLayoutEffect)(function(){return r(),window.addEventListener("resize",r),function(){return window.removeEventListener("resize",r)}},[]),t}().width,l=(0,a.useRef)(null);return si(function(){l.current&&ti.fromTo(l.current,{opacity:0,duration:2,delay:1},{opacity:1,duration:2,delay:1})},[n]),(0,r.jsx)("div",{className:"swiper-container",children:(0,r.jsx)(Jl,{ref:l,slidesPerView:i>988?3:1,spaceBetween:60,freeMode:!0,pagination:!0,navigation:!0,modules:[as,ns,is],children:t[n].events.map(function(e,t){return(0,r.jsx)(es,{children:(0,r.jsx)(ls,{date:e.year,description:e.description})},n+t+e.year)})})})};var os,us;function cs(){return cs=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},cs.apply(null,arguments)}const ds=function(e){return a.createElement("svg",cs({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 50 50"},e),os||(os=a.createElement("circle",{cx:25,cy:25,r:24.5,stroke:"currentColor",strokeOpacity:.5,transform:"matrix(-1 0 0 1 50 0)"})),us||(us=a.createElement("path",{stroke:"currentColor",strokeWidth:2,d:"M27.5 18.75 21.25 25l6.25 6.25"})))},fs=function(){var e=(0,a.useContext)(s),t=e.events,n=e.currentEvent,i=e.setCurrentEvent;return(0,r.jsxs)("div",{className:"arrow_picker_container",children:[(0,r.jsxs)("div",{children:["0",n+1,"/0",t.length]}),(0,r.jsxs)("div",{className:"arrow_picker",children:[(0,r.jsx)(ds,{className:"arrow_picker__left"+(0===n?" disabled":""),onClick:function(){return 0!==n&&i(n-1)}}),(0,r.jsx)(ds,{className:"arrow_picker__right"+(n===t.length-1?" disabled":""),style:{cursor:n===t.length-1?"default":"pointer"},onClick:function(){return n!==t.length-1&&i(n+1)}})]})]})},ps=function(){var e=(0,a.useState)(0),t=e[0],n=e[1];return(0,r.jsx)(s.Provider,{value:{events:l,currentEvent:t,setCurrentEvent:n},children:(0,r.jsxs)("div",{className:"history_widget",children:[(0,r.jsx)(Ra,{}),(0,r.jsx)(Da,{}),(0,r.jsx)("hr",{}),(0,r.jsx)(fs,{}),(0,r.jsx)(ss,{})]})})};var hs=document.getElementById("root");if(!hs)throw new Error("Root element not found");(0,i.createRoot)(hs).render((0,r.jsx)(function(){return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(ps,{})})},{}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,